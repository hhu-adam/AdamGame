msgid ""
msgstr "Project-Id-Version: Game v4.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: Thu Aug 29 19:12:17 2024\n"
"Last-Translator: \n"
"Language-Team: none\n"
"Language: de\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit"

#: GameServer.RpcHandlers
msgid "level completed! 🎉"
msgstr ""

#: GameServer.RpcHandlers
msgid "level completed with warnings… 🎭"
msgstr ""

#: GameServer.RpcHandlers
msgid "intermediate goal solved! 🎉"
msgstr ""

#: Game.Doc.Definition
msgid "Eine Funktion `f` is injektiv wenn:\n"
"\n"
"```\n"
"∀ a b, f a = f b → a = b\n"
"```"
msgstr ""

#: Game.Doc.Definition
msgid "Eine Funktion `f` is surjektiv wenn:\n"
"\n"
"```\n"
"∀ b, ∃ a, f a = b\n"
"```"
msgstr ""

#: Game.Doc.Definition
msgid "Eine Funktion `f` is bijectiv wenn sie injektiv und surjektiv ist."
msgstr ""

#: Game.Doc.Definition
msgid "`f` ist strikt monoton wenn\n"
"\n"
"```\n"
"∀ a b, a < b → f a < f b\n"
"```"
msgstr ""

#: Game.Doc.Definition
msgid "Anonyme Funktionen kann man mit `fun (x : ℤ) => 2 * x` definieren und\n"
"wie andere Objekte verwenden.\n"
"\n"
"Note: `=>` wird in mathlib oft auch `↦` (`\\\\maps`) geschrieben."
msgstr ""

#: Game.Doc.Definition
msgid "`A ∧ B` (\"und\") ist die Aussage dass sowohl `A` als auch `B` wahr ist."
msgstr ""

#: Game.Doc.Definition
msgid "* Für `A B : Prop` ist `A → B` eine Implikation \"`A` impliziert `B`\"\n"
"* Für andere `X Y : Type` ist `X → Y` eine Funktion, die Werte aus `X` nach `Y` abbildet,\n"
"  z.B. `f : ℕ → ℤ := n ↦ -n`."
msgstr ""

#: Game.Doc.Definition
msgid "Nützliche Taktiken für Gleicheit sind: `rfl`, `rw`, `trans`"
msgstr ""

#: Game.Doc.Definition
msgid "Die Aussage `False : Prop` ist nie wahr.\n"
"\n"
"Lean benützt diese intern für Widersprüche, ein Widerspruch ist ein Beweis `(hF : False)` von\n"
"`False` und z.B. `¬ A` ist als `A → False` implementiert."
msgstr ""

#: Game.Doc.Definition
msgid "Genau-dann-wenn (if-and-only-if). Can meistens mit `constructor` oder `obtain ⟨fwd, bwd⟩ := h`\n"
"in Einzelteile zerlegt werden.\n"
"\n"
"Bei einer Annahme `h : A ↔ B`, heissen die Einzelteile zudem `h.mp : A → B` und `h.mpr : B → A`."
msgstr ""

#: Game.Doc.Definition
msgid "Ungleichheit `x ≠ y` ist definiert als `x = y → False`."
msgstr ""

#: Game.Doc.Definition
msgid "`¬ A` ist intern als `A → False` implementiert.\n"
"\n"
"Nütliche Tactiken sind: `push_neg`, `by_contra`, `contrapose`."
msgstr ""

#: Game.Doc.Definition
msgid "`A ∨ B` (\"oder\") ist die Aussage mindestens eine der Aussagen `A`, `B` wahr ist."
msgstr ""

#: Game.Doc.Definition
msgid "`(A : Prop)` ist eine beliebige Aussage, ohne weitere Angabe, ob diese wahr, falsch oder\n"
"nicht beweisbar ist.\n"
"\n"
"Siehe auch `(True : Prop)` und `(False : Prop)` die uneingeschränkt wahre (rsp. falsche)\n"
"Aussage."
msgstr ""

#: Game.Doc.Definition
msgid "Die Aussage `True : Prop` ist immer wahr."
msgstr ""

#: Game.Doc.Tactic
msgid "Sind eine Annahme `h : A` und eine Implikation `hAB : A → B` gegeben, so\n"
"verwandelt `apply hAB at h` die gegebene Annahme in die Annahme `h : B`.\n"
"Ist `B` unser Beweisziel, können wir mit `apply hAB` auch rückwärts argumentieren und\n"
"erhalten `A` als neues Beweisziel.   In beiden Fällen kann die Implikation `hAB` wahlweise\n"
"als Annahme gegeben oder ein bereits bekanntes Lemma sein.\n"
"\n"
"\n"
"## Beispiel\n"
"\n"
"Gegeben sei für `n : ℕ` folgendes Lemma:\n"
"```\n"
"lemma lem (h : n ≤ 0) : n = 0\n"
"```\n"
"\n"
"Finden wir nun als Beweisziel\n"
"\n"
"```\n"
"Goal\n"
"  n = 0\n"
"```\n"
"\n"
"vor, so ändert `apply lem` das Beweisziel zu `n ≤ 0`.\n"
"\n"
"Anders herum, falls wir eine Annahme `g : m ≤ 0` in unseren Annahmen finden, können wir\n"
"diese mit `apply lem at g` zu `g : m = 0` umwandeln.\n"
"\n"
"(Das Lemma ist gemeinhin als `Nat.eq_zero_of_le_zero` bekannt.)"
msgstr ""

#: Game.Doc.Tactic
msgid "`assumption` sucht nach einer Annahme, die genau dem Goal entspricht.\n"
"\n"
"## Beispiel\n"
"\n"
"`assumption` sucht durch die Annahmen und merkt dass `h` genau mit dem Goal übereinstimmt.\n"
"\n"
"```\n"
"Objekte\n"
"  a b c d : ℕ\n"
"  h : a + b = c\n"
"  g : a * b = 16\n"
"  t : c = 12\n"
"Goal\n"
"  a + b = c\n"
"```"
msgstr ""

#: Game.Doc.Tactic
msgid "`by_cases h : P` macht eine Fallunterscheidung. Im ersten Goal wird eine Annahme\n"
"`(h : P)` hinzugefügt, im zweiten `(h : ¬P)`.\n"
"\n"
"## Details\n"
"\n"
"`P` kann eine beliegige Aussage sein, die als entweder wahr oder falsch angenommen wird.\n"
"\n"
"## Beispiel\n"
"\n"
"```\n"
"example (A : Prop) : A ∨ ¬ A := by\n"
"  by_cases h : A\n"
"  · left\n"
"    assumption\n"
"  · right\n"
"    assumption\n"
"```"
msgstr ""

#: Game.Doc.Tactic
msgid "`by_contra h` startet einen Widerspruchsbeweis.\n"
"\n"
"## Details\n"
"Sei `P` das aktuelle Goal. `by_contra h` fügt eine neue Annahme `(h : ¬P)` hinzu\n"
"und setzt das Goal auf `False`.\n"
"\n"
"Oft will man `by_contra` nutzen wenn das Goal von der Form `¬ P` ist.\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* `contradiction` schliesst den Widerspruchsbeweis wenn sich (zwei) Annahmen\n"
"widersprechen.\n"
"* `contrapose` führt einen Beweis durch Kontraposition und ist entsprechend\n"
"in ähnlichen Situationen nutzbar wie `by_contra`"
msgstr ""

#: Game.Doc.Tactic
msgid "`change t` ändert das Goal zu `t`. Voraussetzung ist, dass `t` und das alte Goal defEq sind.\n"
"\n"
"## Details\n"
"\n"
"Dies ist insbesonder hilfreich wenn eine Taktik nicht merkt, dass das Goal defEq ist zu einem\n"
"Term, der eigentlich gebraucht würde.\n"
"\n"
"## Beispiel\n"
"\n"
"Aktuelles Goal:\n"
"\n"
"```\n"
"b: ℝ\n"
"⊢ 1 • b = b\n"
"```\n"
"Wobei die Skalarmultiplikation als `fun (a : ℚ) (r : ℝ) => ↑a * r` definiert war. Dann\n"
"kann man mit `change (1 : ℚ) * b = b` das Goal umschreiben und anschliessend mit Lemmas\n"
"über die Multiplikation beweisen."
msgstr ""

#: Game.Doc.Tactic
msgid "`constructor` teilt ein Beweisziel, das eine Struktur ist, in seine Bestandteile auf.\n"
"\n"
"## Detail\n"
"\n"
"Übliche Anwendungsfälle sind Beweisziele der Form `A ∧ B` sowie Äquivalenzen, also Beweisziele der Form `A ↔ B`.\n"
"Im ersten Fall ersetzt `constructor` das Ziel `A ∧ B` durch die zwei Ziel `A` and `B`, im zweiten Fall ersetzt `constructor` die Äquivalenz durch die beiden Beweisziele `A → B` and `B → A`.\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* Das Gegenteil von `constructor` ist `⟨_, _⟩` (`\\\\<>`), der *anonyme Konstruktor*.\n"
"Dieser enspricht ungefähr der Tupel-Notation in\n"
"\\\"eine Gruppe ist ein Tupel $(G, 0, +)$, sodass …\\\".\n"
"\n"
"## Beispiel\n"
"\n"
"```\n"
"example {A B : Prop} (h : A) (g : B) : A ∧ B := by\n"
"  constructor\n"
"  · assumption\n"
"  · assumption\n"
"```"
msgstr ""

#: Game.Doc.Tactic
msgid "`contradiction` schliesst den Beweis wenn es einen Widerspruch in den Annahmen findet.\n"
"\n"
"## Details\n"
"\n"
"Ein Widerspruch in den Annahmen kann unter anderem folgendermaßen aussehen:\n"
"\n"
"* `(h : n ≠ n)`\n"
"* `(h : A)` und `(h' : ¬A)`\n"
"* `(h : False)` (i.e. ein Beweis von `False`)\n"
"\n"
"## Beispiel\n"
"\n"
"Folgenes Goal wird von `contradiction` bewiesen\n"
"\n"
"```\n"
"Objekte:\n"
"  (n m : ℕ)\n"
"  (h : n = m)\n"
"  (g : n ≠ m)\n"
"Goal\n"
"  37 = 60\n"
"```\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* Normalerweise wird `contradiction` gebraucht um einen Widerspruchsbeweis zu\n"
"  schliessen, der mit `by_contra` eröffnet wurde.\n"
"* Ein Beweis von `False` representiert in Lean einen Widerspruch.\n"
"  nach dem Motto \\\"ein Widerspruch beweist alles.\\\""
msgstr ""

#: Game.Doc.Tactic
msgid "`contrapose` ändert ein Goal der Form `A → B` zu `¬B → ¬A` und führt damit\n"
"eine Beweis durch Kontraposition.\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* `revert h` kann nützlich sein um eine Annahme als Implikationsprämisse zu schreiben bevor man\n"
"  `contrapose` verwendet."
msgstr ""

#: Game.Doc.Tactic
msgid "`exact h` schliesst das Goal wenn der Term `h` mit dem Goal übereinstimmt."
msgstr ""

#: Game.Doc.Tactic
msgid "`fin_cases i` führt eine Fallunterscheidung wenn `i` ein endlicher Typ ist.\n"
"\n"
"## Details\n"
"`fin_cases i` ist insbesondere nützlich für `(i : Fin n)`, zum Beispiel als Index in\n"
"endlich dimensionalen Vektorräumen.\n"
"\n"
"In diesem Fall bewirkt `fin_cases i` dass man Komponentenweise arbeitet."
msgstr ""

#: Game.Doc.Tactic
msgid "`funext x` wird bei Gleichungen von Funktionen `f = g` gebraucht. Das Goal wird zu\n"
"`f x = g x`.\n"
"\n"
"## Details\n"
"Nach dem Motto `f = g ↔ ∀ x, f x = g x` sind zwei Funktionen dann identisch, wenn sie\n"
"angewendet auf jedes Element identisch sind. `funext x` benutzt dieses Argument."
msgstr ""

#: Game.Doc.Tactic
msgid "`have h : P` führt ein Zwischenresultat ein.\n"
"\n"
"## Details\n"
"Anschliessend muss man zuerst dieses Zwischenresultat beweisen bevor man mit dem Beweis\n"
"weitermachen und das Zwischenresultat verwenden kann.\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* `suffices h : P` funktioniert genau gleich, außer dass die beiden entstehenden Beweise\n"
"  vertauscht sind.\n"
"* `let h : Prop := A ∧ B` ist verwandt mit `have`, mit Unterschied, dass man mit `let`\n"
"  eine temporäre Definition einführt."
msgstr ""

#: Game.Doc.Tactic
msgid "`induction n` führt einen Induktionsbeweis über `n`.\n"
"\n"
"## Detail\n"
"\n"
"Diese Taktik erstellt zwei Goals:\n"
"* Induktionsanfang, wo `n = 0` ersetzt wird.\n"
"* Induktionsschritt, in dem man die Induktionshypothese `n_ih` zur Verfügung hat.\n"
"\n"
"## Modifikationen in diesem Spiel\n"
"\n"
"* `induction n with d hd` benennt Induktionsvariable und -hypothese. (das ist Lean3-Syntax)\n"
"und funktioniert außerhalb vom Spiel nicht genau so.\n"
"* Außerhalb des Spiels kriegst du `Nat.zero` und `Nat.succ n` anstatt `0` und `n + 1`\n"
"als Fälle. Diese\n"
"Terme sind DefEq, aber manchmal benötigt man die lemmas `zero_eq` und `Nat.succ_eq_add_one`\n"
"um zwischen den schreibweisen zu wechseln\n"
"\n"
"Der richtige Lean4-Syntax für `with` streckt sich über mehrere Zeilen und ist:\n"
"\n"
"```\n"
"induction n with\n"
"| zero =>\n"
"  sorry\n"
"| succ m m_ih =>\n"
"  sorry\n"
"```\n"
"\n"
"da dieser sich über mehrere Zeilen erstreckt wird er im Spiel nicht eingeführt.\n"
"\n"
"## Hifreiche Resultate\n"
"\n"
"* `Nat.succ_eq_add_one`: schreibt `n.succ = n + 1` um.\n"
"* `Nat.zero_eq`: schreibt `Nat.zero = 0` um.\n"
"\n"
"Beide sind DefEq, aber manche Taktiken können nicht damit umgehen\n"
"\n"
"* Siehe Definition `∑` für Hilfe mit Induktion über Summen.\n"
"* `obtain ⟨⟩ := n` ist sehr ähnlich zu `induction n`. Der Unterschied ist, dass bei\n"
"`obtain` keine Induktionshypothese im Fall `n + 1` zur Verfügung steht.\n"
"\n"
"## Beispiel\n"
"\n"
"```\n"
"example (n : ℕ) : 4 ∣ 5^n + 7 := by\n"
"  induction n\n"
"  sorry      -- Fall `n = 0`\n"
"  sorry      -- Fall `n + 1`\n"
"```"
msgstr ""

#: Game.Doc.Tactic
msgid "`intro x` wird für Goals der Form `A → B` oder `∀ x, P x` verwendet.\n"
"Dadurch wird die Implikationsprämisse (oder das Objekt `x`) den Annahmen hinzugefügt.\n"
"\n"
"## Beispiele\n"
"\n"
"```\n"
"Goal:\n"
"  ∀ (m n : ℕ), n ≤ m ∨ m ≤ n\n"
"```\n"
"\n"
"die Taktik `intro a n` führt 2 Variablen ein und gibt diesen die Namen `a` und `n`:\n"
"\n"
"```\n"
"Objekte:\n"
"  a n : ℕ\n"
"Goal:\n"
"  n ≤ a ∨ a ≤ n\n"
"```\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* `revert h` macht das Gegenteil von `intro`."
msgstr ""

#: Game.Doc.Tactic
msgid "Wenn das Goal von der Form `A ∨ B` ist, enscheidet man mit `left` die linke Seite zu zeigen.\n"
"\n"
"## Beispiele\n"
"\n"
"Folgendes Beispiel kann mit `left` und `assumption` gelöst werden.\n"
"```\n"
"Objekte:\n"
"  ha : A\n"
"Goal:\n"
"  A ∨ B\n"
"```\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* `right` entscheidet sich für die right Seite."
msgstr ""

#: Game.Doc.Tactic
msgid "`let x : ℕ := 5 ^ 2` führt eine neue temporäre Definition ein.\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* `have x : ℕ := 5 ^ 2` führt ebenfalls eine neue natürliche Zahle `x` ein, aber\n"
"  Lean vergisst sofort, wie die Zahl definiert war. D.h. `x = 25` wäre dann nicht\n"
"  beweisbar. Mit `let x : ℕ := 5 ^ 2` ist `x = 25` durch `rfl` beweisbar.\n"
"* `set x : ℕ := 5 ^ 2` macht das Gleiche wie `let` aber versucht auch `x` im Goal überall einzusetzen wo `5 ^ 2` steht."
msgstr ""

#: Game.Doc.Tactic
msgid "`set f := _` funktioniert wie `let` aber versucht auch `f` im Goal überall einzusetzen."
msgstr ""

#: Game.Doc.Tactic
msgid "`linarith` löst Systeme linearer (Un-)Gleichungen.\n"
"\n"
"## Detail\n"
"`linarith` kann lineare Gleichungen und Ungleichungen beweisen indem\n"
"es das Gegenteil vom Goal annimmt und versucht einen Widerspruch in den\n"
"Annahmen zu erzeugen (Widerspruchsbeweis). Es braucht ein `≤` definiert um\n"
"zu funktionieren.\n"
"\n"
"## Beispiel\n"
"\n"
"Folgendes kann `linarith` beweisen.\n"
"```\n"
"Objekte\n"
"  x y : ℤ\n"
"  h₁ : 5 * y ≤ 35 - 2 * x\n"
"  h₂ : 2 * y ≤ x + 3\n"
"Goal\n"
"  y ≤ 5\n"
"```"
msgstr ""

#: Game.Doc.Tactic
msgid "`push_neg` schreibt `¬∀ x, _` zu `∃ x, ¬ _` und `¬∃ x, _` zu `∀x, ¬ _` um.\n"
"\n"
"## Details\n"
"\n"
"`push_neg` schiebt das `¬` soweit nach innen wie möglich.\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* Die beiden Lemmas heissen `not_forall` und `not_exists` und können mit `rw` einzeln angewendet\n"
"  werden."
msgstr ""

#: Game.Doc.Tactic
msgid "obtain ⟨arg1, arg2⟩ := h decomposes `h` to its parts `arg1` and `arg2`"
msgstr ""

#: Game.Doc.Tactic
msgid "`obtain ⟨⟩ := h` teilt eine Annahme `h` in ihre Einzelteile auf.\n"
"\n"
"## Details\n"
"Für Annahmen die Strukturen sind, wie z.B. `h : A ∧ B` (oder `∃x, P x`) kann man die\n"
"Einzelteile mit  `obtain ⟨a, b⟩ := h` benennen.\n"
"\n"
"Für eine Annahme der Form `h : A ∨ B` kann man mit `obtain ha | hb := h` zwei Goals\n"
"erzeugen, einmal unter Annahme der linken Seite, einmal unter Annahme der Rechten.\n"
"\n"
"Die Wildcard `obtain ⟨⟩ := h` entscheidet selbständig, welcher Fall vorliegt und\n"
"benennt die entehenden Annahmen.\n"
"\n"
"## Beispiele\n"
"\n"
"```\n"
"Annahmen:\n"
"  h : A ∧ B\n"
"  g : A → C ∨ B → C\n"
"Goal:\n"
"  C\n"
"```\n"
"\n"
"wenn man hier `obtain ⟨h₁, h₂⟩ := h` und danach `obtain g₁ | g₂ := g` benützt, kriegt man\n"
"zwei Goals:\n"
"\n"
"```\n"
"Annahmen:\n"
"  h₁ : A\n"
"  h₂ : B\n"
"  g₁ : A → C\n"
"Goal:\n"
"  C\n"
"```\n"
"\n"
"```\n"
"Annahmen:\n"
"  h₁ : A\n"
"  h₂ : B\n"
"  g₂ : B → C\n"
"Goal:\n"
"  C\n"
"```\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* Für `n : ℕ` hat `obtain ⟨⟩ := n` einen ähnlichen Effekt wie `induction n` mit dem Unterschied,\n"
"  dass im Fall `n + 1` keine Induktionshypothese zur Verfügung steht."
msgstr ""

#: Game.Doc.Tactic
msgid "`refine { ?..! }` wird benötigt um eine Struktur (z.B. ein $R$-Modul) im Taktikmodus in einzelne\n"
"Goals aufzuteilen. Danach hat man ein Goal pro Strukturfeld.\n"
"\n"
"(*Bemerkung*: Es gibt in Lean verschiedenste bessere Varianten dies zu erreichen,\n"
"z.B. \\\"Term Modus\\\" oder \\\"anonyme Konstruktoren\\\", aber für den Zweck des Spieles bleiben wir\n"
"bei diesem Syntax.)"
msgstr ""

#: Game.Doc.Tactic
msgid "`refine' { .. }` wird benötigt um eine Struktur (z.B. ein $R$-Modul) im Taktikmodus in einzelne\n"
"Goals aufzuteilen. Danach hat man ein Goal pro Strukturfeld.\n"
"\n"
"(*Bemerkung*: Es gibt in Lean verschiedenste bessere Varianten dies zu erreichen,\n"
"z.B. \\\"Term Modus\\\" oder \\\"anonyme Konstruktoren\\\", aber für den Zweck des Spieles bleiben wir\n"
"bei diesem Syntax.)"
msgstr ""

#: Game.Doc.Tactic
msgid "`revert h` fügt die Annahme `h` als Implikationsprämisse vorne ans Goal an.\n"
"\n"
"## Beispiel\n"
"\n"
"```\n"
"Objekte:\n"
"  A B : Prop\n"
"Annahmen:\n"
"  h : A\n"
"  g : A → B\n"
"Goal:\n"
"  B\n"
"```\n"
"\n"
"In diesem Fall bewirkt `revert h`, dass `h` aus den Annahmen vorne als `A →` ans Goal angefügt wird:\n"
"\n"
"```\n"
"Objekte:\n"
"  A B : Prop\n"
"Annahmen:\n"
"  g : A → B\n"
"Goal:\n"
"  a → B\n"
"```\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* `revert` ist das Gegenteil von `intro`.\n"
"* `revert` kann insbesondere nützlich sein, um anschliessend `contrapose` zu verwenden.\n"
"\n"
"## Beispiel\n"
"\n"
"```\n"
"Objekte\n"
"  A P : Prop\n"
"  h : P\n"
"Goal\n"
"  A\n"
"```\n"
"\n"
"hier ändert `revert h` das Goal zu\n"
"\n"
"```\n"
"Objekte\n"
"  A P : Prop\n"
"Goal\n"
"  P → A\n"
"```"
msgstr ""

#: Game.Doc.Tactic
msgid "`rfl` beweist ein Goal der Form `X = X`.\n"
"\n"
"## Detail\n"
"\n"
"`rfl` beweist jedes Goal `A = B` wenn `A` und `B` per Definition das gleiche sind (DefEq).\n"
"Andere Taktiken rufen `rfl` oft am Ende versteckt\n"
"automatisch auf um zu versuchen, den Beweis zu schliessen.\n"
"\n"
"\n"
"## Beispiel\n"
"`rfl` kann folgende Goals beweisen:\n"
"\n"
"```\n"
"Objekte\n"
"  a b c : ℕ\n"
"Goal:\n"
"  (a + b) * c = (a + b) * c\n"
"```\n"
"\n"
"```\n"
"Objekte\n"
"  n : ℕ\n"
"Goal\n"
"  1 + 1 = 2\n"
"```\n"
"denn Lean liest dies intern als `0.succ.succ = 0.succ.succ`."
msgstr ""

#: Game.Doc.Tactic
msgid "Wenn das Goal von der Form `A ∨ B` ist, enscheidet man mit `right` die rechte Seite zu zeigen.\n"
"\n"
"## Beispiele\n"
"\n"
"Folgendes Beispiel kann mit `right` und `assumption` gelöst werden.\n"
"```\n"
"Objekte:\n"
"  hB : B\n"
"Goal:\n"
"  A ∨ B\n"
"```\n"
"\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* `left` entscheidet sich für die linke Seite."
msgstr ""

#: Game.Doc.Tactic
msgid "Löst Gleichungen mit den Operationen `+, -, *, ^`.\n"
"\n"
"## Details\n"
"Insbesondere funktioniert `ring` in Ringen/Semiringen wie z.B. `ℕ, ℤ, ℚ, …`\n"
"(i.e. Typen `R` mit Instanzen `Ring R` oder `Semiring R`).\n"
"Die Taktik ist besonders auf kommutative Ringe (`CommRing R`) ausgelegt.\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* `ring` kann nicht wirklich mit Division (`/`) oder Inversen (`⁻¹`) umgehen. Dafür ist die\n"
"  Taktik `field_simp` gedacht, und die typische Sequenz ist\n"
"  ```\n"
"  field_simp\n"
"  ring\n"
"  ```"
msgstr ""

#: Game.Doc.Tactic
msgid "Wenn man eine Annahme `(h : X = Y)` hat, kann man mit\n"
"`rw [h]` alle `X` im Goal durch `Y` ersetzen.\n"
"\n"
"## Details\n"
"\n"
"* `rw [←h]` wendet `h` rückwärts an und ersetzt alle `Y` durch `X`.\n"
"* `rw [h, g, ←f]`: Man kann auch mehrere `rw` zusammenfassen.\n"
"* `rw [h] at h₂` ersetzt alle `X` in `h₂` zu `Y` (anstatt im Goal).\n"
"* `rw [my_theorem]` sucht nach dem ersten Ort, wo es umschreiben kann um die Impliziten\n"
"  Argumente von `my_theorem` zu füllen\n"
"* `nth_rw 2 [my_theorem]` ist eine Variante, die stattdessen am 2. Ort umschreibt.\n"
"\n"
"`rw` funktioniert gleichermaßen mit Annahmen `(h : X = Y)` also auch\n"
"mit Theoremen/Lemmas der Form `X = Y`\n"
"\n"
"## Beispiel\n"
"\n"
"```\n"
"Objekte:\n"
"  m n : ℕ\n"
"  f g : ℕ → ℕ\n"
"Annahmen:\n"
"  h₁ : m = n\n"
"  h₂ : f = g\n"
"Goal:\n"
"  f m = g n\n"
"```\n"
"\n"
"`rw [h₂]` schreibt das Goal zu `g n = g m` um, ein weiteres `rw [h₁]` dann zu `g m = g m`, was es\n"
"direkt auch schließt."
msgstr ""

#: Game.Doc.Tactic
msgid "(shouldn't be visible to the player!)"
msgstr ""

#: Game.Doc.Tactic
msgid "`simp` versucht alle Vereinfachungslemmas anzuwenden, die in der `mathlib` mit `@[simp]`\n"
"gekennzeichnet sind.\n"
"\n"
"## Details\n"
"\n"
"* `simp?` zeigt welche Lemmas verwendet wurden.\n"
"* `simp [my_lemma]` fügt zudem `my_lemma` temporär zur Menge der `simp`-Lemmas hinzu.\n"
"* ein `simp`, das nicht am Ende des Beweis steht sollte durch eine entsprechende\n"
"  `simp only [...]` Aussage ersetzt werden, um den Beweis stabiler zu machen."
msgstr ""

#: Game.Doc.Tactic
msgid "`simp_rw [h₁, h₂, h₃]` versucht wie `rw` jedes Lemma der Reihe nach zu Umschreiben zu verwenden,\n"
"verwendet aber jedes Lemma so oft es kann.\n"
"\n"
"## Details\n"
"\n"
"Es bestehen aber drei grosse Unterschiede zu `rw`:\n"
"\n"
"* `simp_rw` wendet jedes Lemma so oft an wie es nur kann.\n"
"* `simp_rw` kann besser unter Quantifiern umschreiben als `rw`.\n"
"* `simp_rw` führt nach jedem Schritt ein `simp only []` aus und vereinfacht dadurch grundlegenste\n"
"  Sachen."
msgstr ""

#: Game.Doc.Tactic
msgid "`suffices h : P` führt ein neues Zwischenresultat ein, aus dem das Goal direkt folgen soll.\n"
"\n"
"## Details\n"
"\n"
"Der einzige Unterschied zu `have h : P` ist, dass die beiden resultierenden Goals vertauscht sind.\n"
"\n"
"Mathematisch braucht man diese in ein bisschen unterschiedlichen Fällen:\n"
"\n"
"* `suffices h : P` : \\\"Es genügt zu zeigen, dass …\\\". Als erstes folgt die Erklärung wieso\n"
"  das genügt, danach muss man nur noch `P` beweisen.\n"
"* `have h : P` : Ein (kleines) Zwischenresultat. Als erstes folgt dann der Beweis dieses\n"
"Resultats, anschliessend setzt man den Beweis mit Hilfe des Zwischenresultats fort."
msgstr ""

#: Game.Doc.Tactic
msgid "`symm` (für \"symmetry\") kann Gleichheiten oder `↔` umdrehen. `symm at h` dreht eine Gleichheit\n"
"(oder `↔`) in der Annahme `h`.\n"
"\n"
"## Details\n"
"\n"
"Man kann auch `h.symm` für die gedrehte Annahme schreiben, wenn man diese irgendwo\n"
"verwendet. Das verwendet intern die Lemmata\n"
"`Eq.symm` oder `Iff.symm`.\n"
"\n"
"## Beispiel\n"
"\n"
"ist das Goal `x = y`, dann wandelt es `symm` in `y = x` um. Analog, wandelt `symm at h` die Annahme\n"
"`(h : z = w)` in `(h : w = z)` um."
msgstr ""

#: Game.Doc.Tactic
msgid "Wenn man `X = Z` zeigen möchte, kann man mit\n"
"`trans Y` einen Zwischenschritt `Y` einfügen.\n"
"Zu zeigen sind dann also `X = Y`  und `Y = Z`.\n"
"\n"
"## Details\n"
"`trans` ist besondern gut geeignet, um eine Gleichung `X = Z `\n"
"durch eine „Rechnung“ der Form `X = Y₁ = Y₂ = Y₃ … = Z` Schritt für Schritt nachzuweisen:\n"
"\n"
"* `trans Y₁`\n"
"* Beweis von `X = Y₁`\n"
"* `trans Y₂`\n"
"* Beweis von `Y₁ = Y₂`\n"
"* `trans Y₃`\n"
"* …\n"
"* Beweis von `… = Z`\n"
"\n"
"Genauso wie für Gleichungen `X = Z` funktioniert `trans` auch für Äquivalenzen `X ↔ Z` und gewisse\n"
"transitive Relationen im Beweisziel.\n"
"\n"
"## Beispiel\n"
"\n"
"```\n"
"Objekte:\n"
"  A B C : Prop\n"
"Annahmen:\n"
"  h₁ : A ↔ B\n"
"  h₂ : B ↔ C\n"
"Goal:\n"
"  A ↔ C\n"
"```\n"
"\n"
"Die Taktik `trans B` erstellt dann aus dem Goal zwei neue `A ↔ B` und `B ↔ C`."
msgstr ""

#: Game.Doc.Tactic
msgid "`trivial` versucht durch Kombination von wenigen simplen Taktiken das Goal zu schliessen.\n"
"\n"
"## Details\n"
"Die Taktiken, die verwendet werden sind unter anderem:\n"
"\n"
"* `assumption`\n"
"* `rfl`\n"
"* `contradiction`\n"
"* und noch 3 andere, die hier nicht behandelt werden\n"
"  (`decide`, `apply True.intro`, `apply And.intro`).\n"
"\n"
"## Beispiel\n"
"\n"
"Das folgende Goal ist `trivial`:\n"
"\n"
"```\n"
"Objekte:\n"
"  n m : ℕ\n"
"  h : n ≤ m\n"
"Goal:\n"
"  n ≤ m\n"
"```"
msgstr ""

#: Game.Doc.Tactic
msgid "`unfold myDef` öffnet eine Definition im Goal.\n"
"\n"
"## Details\n"
"Bis auf DefEq (definitinal equality) ändert `unfold` nichts, manche Taktiken\n"
"(z.B. `push_neg`, `rw`) brauchen aber manchmal die Hilfe.\n"
"\n"
"`unfold myDef at h` kann auch Definitionen in Annahmen öffnen\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* `change P` ist eine andere Taktik, die das aktuelle Goal in einen DefEq-Ausdruck umschreibt.\n"
"  Diese Taktik braucht man auch manchmal um zu hacken, wenn Lean Mühe hat etwas zu verstehen."
msgstr ""

#: Game.Doc.Tactic
msgid "Wenn das Goal von der Form `∃x, P x` ist, kann man mit `use n` ein konkretes Element angeben\n"
"mit dem man das Goal beweisen möchte.\n"
"\n"
"## Details\n"
"\n"
"`use n` versucht zudem anschliessend `rfl` aufzurufen, und kann das Goal damit manchmal direkt\n"
"schließen."
msgstr ""

#: Game.Doc.Tactic
msgid "`tauto` proves all logical tautologies.\n"
"\n"
"## Beispiel\n"
"\n"
"Folgendes Goal ist mit `tauto` lösbar\n"
"\n"
"```\n"
"Objekte:\n"
"  (A B C : Prop)\n"
"Goal:\n"
"  ¬((¬B ∨ ¬ C) ∨ (A → B)) → (¬A ∨ B) ∧ ¬ (B ∧ C)\n"
"```"
msgstr ""

#: Game.Doc.Theorem
msgid "Die Taktiken `tauto` oder `simp` können oft stattdessen verwendet werden."
msgstr ""

#: Game.Doc.Theorem
msgid "Oft kann `tauto` diese Art von logischen Ausdrücken lösen."
msgstr ""

#: Game.Levels.Logos.L01_Tauto
msgid "Automatisierung"
msgstr ""

#: Game.Levels.Logos.L01_Tauto
msgid "Gerade seid Ihr auf Königin *Logisindes* Planeten. Sie kommt ohne Umschweife zum Punkt:\n"
"\n"
"**Logisinde**: Werte Wesen aus fremden Welten, gestatten Sie eine Frage. Warum gilt …\n"
"\n"
"Und sie kritzelt etwas auf ein Stück Papier: oben ein paar Annahmen, unten eine Schlussfolgerung.\n"
"Dazwischen sollst du offenbar einen Beweis eintragen.\n"
"Du siehst Robo hilflos an."
msgstr ""

#: Game.Levels.Logos.L01_Tauto
msgid ""
msgstr ""

#: Game.Levels.Logos.L01_Tauto
msgid "**Robo**: Das ist ganz einfach. Mit `«{A}» «{B}» «{C}» : Prop` meint sie:\n"
"`«{A}»`, `«{B}»` und `«{C}»` sind irgendwelche Aussagen (*propositions*).\n"
"Und mit `→` meint sie ⇒, also “impliziert”. Die anderen Symbole kennst du, oder?\n"
"\n"
"**Du**: Ehhm, ja. Aber da muss ich jetzt trotzdem erst einmal überlegen.\n"
"\n"
"**Robo**: (flüsternd) Behaupte doch einfach, dass sei eine Tautologie.\n"
"\n"
"**Du**: Ernsthaft?\n"
"\n"
"**Robo**: Ja. Schreib einfach `tauto`.\n"
"\n"
"**Robo**: Mach schon …"
msgstr ""

#: Game.Levels.Logos.L01_Tauto
msgid "**Logisinde**: (etwas konsterniert) Ja, das ist streng genommen richtig.\n"
"Aber glaubt bloß nicht, dass Ihr damit auf *diesem* Planeten viel weiterkommt!\n"
"Meine Untertanen verstehen `tauto` nicht. Da müsst Ihr Euch schon etwas mehr anstrengen."
msgstr ""

#: Game.Levels.Logos.L02_Rfl
msgid "Aller Anfang ist... ein Einzeiler?"
msgstr ""

#: Game.Levels.Logos.L02_Rfl
msgid "In der Zwischenzeit hat bereits sich eine lange Schlange Untertanen gebildet, die gern ihren\n"
"Fragen stellen würden. Logisinde winkt den ersten nach vorn. Er räuspert sich.\n"
"\n"
"**Untertan**: Warum ist $42 = 42$?\n"
"\n"
"Du schaust ihn fassungslos an.\n"
"Er schreibt es dir wieder auf."
msgstr ""

#: Game.Levels.Logos.L02_Rfl
msgid "**Robo**: Ist doch klar. Du musst ihn einfach daran erinnern,\n"
"dass Gleichheit *reflexiv* ist. Probier mal `rfl`."
msgstr ""

#: Game.Levels.Logos.L02_Rfl
msgid "**Untertan**: Ah, richtig. Ja, Sie haben ja so recht. Das vergesse ich immer. Rfl, rfl, rfl …"
msgstr ""

#: Game.Levels.Logos.L03_Assumption
msgid "Annahmen"
msgstr ""

#: Game.Levels.Logos.L03_Assumption
msgid "Während der erste Untertan noch rfl, rfl, rfl murmelt, tritt schon der nächste nach vorne.\n"
"Es ist schüchtern und schreibt bloß."
msgstr ""

#: Game.Levels.Logos.L03_Assumption
msgid "**Robo**: `«{n}» : ℕ` bedeutet, `«{n}»` ist eine natürliche Zahl.\n"
"\n"
"**Du**: Warum schreibt er dann nicht `«{n}» ∈ ℕ`??\n"
"\n"
"**Robo**: Weil das hier alles komische Typen sind … Ich kann dir das später mal in Ruhe\n"
"erklären. Jetzt will ich erst einmal die Frage entschlüsseln.\n"
"\n"
"**Robo**: Also, `«{h₁}»`, `«{h₂}»`, `«{h₃}»` sind einfach nur Namen für verschiedene Annahmen,\n"
"und zwar für die Annahme `n < 10`, `1 < n` und `n ≠ 5`. Beweisen sollen wir: `1 < n`.\n"
"\n"
"**Du**: Aber das war doch gerade eine der Annahmen.\n"
"\n"
"**Robo**: Ja, stimmt.\n"
"\n"
"**Du**: ???\n"
"\n"
"**Robo**: Du musst ihm das halt explizit sagen. Probiers mal mit `assumption`."
msgstr ""

#: Game.Levels.Logos.L03_Assumption
msgid "**Untertan**: Ja richtig! Wenn Ihr nur wüsstet, was ich mir an dieser Frage schon den Kopf\n"
"zerbrochen habe!"
msgstr ""

#: Game.Levels.Logos.L04_Assumption
msgid "Logische Aussagen"
msgstr ""

#: Game.Levels.Logos.L04_Assumption
msgid "Ein dritter Untertan kommt mit folgendem Problem."
msgstr ""

#: Game.Levels.Logos.L04_Assumption
msgid "**Robo**: Hier bedeutet `«{A}» : Prop` wieder, dass `«{A}»` irgendeine Aussage ist.\n"
"Und `«{hA}»` ist eine Name für die Annahme, dass `«{A}»` wahr ist.\n"
"\n"
"**Du**: Und unter dieser Annahme sollen wir jetzt `«{A}»` beweisen?\n"
"\n"
"**Robo**: Ja. Da kommst du jetzt selbst drauf, wie das geht, oder?"
msgstr ""

#: Game.Levels.Logos.L04_Assumption
msgid "**Robo**: Ist doch genau wie eben:\n"
"die Aussage, die zu beweisen ist, gehört selbst zu den Annahmen.\n"
"Also wird `assumption` auch wieder funktionieren."
msgstr ""

#: Game.Levels.Logos.L04_Assumption
msgid "**Untertan**: Das ging ja schnell. Super! Vielen Dank."
msgstr ""

#: Game.Levels.Logos.L05_True
msgid "True or False"
msgstr ""

#: Game.Levels.Logos.L05_True
msgid "Der nächste Untertan in der Reihe ist ein Schelm."
msgstr ""

#: Game.Levels.Logos.L05_True
msgid "**Robo**: Dieses `True` ist eine spezielle Aussage, nämlich die Aussage, die immer und\n"
"bedingungslos wahr ist.\n"
"\n"
"**Du**: Und was genau ist dann zu beweisen?\n"
"\n"
"**Robo**: Ich glaube, nichts. Ich glaube, du kannst einfach `trivial` schreiben."
msgstr ""

#: Game.Levels.Logos.L05_True
msgid "**Schelm**: Wollte nur mal sehen, dass Ihr nicht auf den Kopf gefallen seid …\n"
"\n"
"**Du** *(zu Robo)*: Können wir nicht einfach immer dieses `trivial` verwenden?\n"
"Wie in einer Mathe-Vorlesung?\n"
"\n"
"**Robo**: Nein, das `trivial` hier hat eine ziemlich spezielle Bedeutung.\n"
"Das funktioniert nur in einer Handvoll Situationen."
msgstr ""

#: Game.Levels.Logos.L06_Not
msgid "Not"
msgstr ""

#: Game.Levels.Logos.L06_Not
msgid "Der Schelm hat noch eine Schwester dabei."
msgstr ""

#: Game.Levels.Logos.L06_Not
msgid "**Robo**: Dieses Zeichen `¬` bedeutet Negation. Also wenn eine Aussage `(A : Prop)`\n"
"wahr ist, dann ist `¬A` falsch, und umgekehrt.\n"
"\n"
"**Du**: Und `False` ist wahrscheinlich die Aussage, die immer falsch ist?\n"
"\n"
"**Robo**: Ja, richtig.\n"
"\n"
"**Du**: Ist das jetzt nicht doch wieder trivial?\n"
"\n"
"**Robo**: Probier mal!"
msgstr ""

#: Game.Levels.Logos.L06_Not
msgid "Die Schwester lacht und eilt ihrem Bruder hinterher."
msgstr ""

#: Game.Levels.Logos.L07_Contradiction
msgid "Aus Falschem folgt vieles."
msgstr ""

#: Game.Levels.Logos.L07_Contradiction
msgid "Als nächstes kommen drei Querulanten. Der erste hat folgendes Problem:"
msgstr ""

#: Game.Levels.Logos.L07_Contradiction
msgid "**Du** Wenn ich das jetzt richtig lese, ist `«{A}»` eine Aussage,\n"
"und wir haben außerdem eine Annahme names `«{h}»`, die besagt …\n"
"\n"
"**Robo**: … die besagt, dass `False` gilt.\n"
"\n"
"**Du**: Ich dachte, `False` gilt nie?\n"
"\n"
"**Robo**: Ja, genau. Die Annahme ist `False`, also falsch.\n"
"Und aus einer falschen Annahme kann man bekanntlich alles beweisen!\n"
"Insbesondere die gesuchte Aussage `«{A}»`.\n"
"\n"
"**Du**: Und wie erkläre ich das jetzt diesem Formalosophen?\n"
"\n"
"**Robo**: Ich glaube, du musst ihn darauf hinweisen, dass zwischen der allgemeingültigen\n"
"Annahme `True` und seiner Annahme `False` ein Widerspruch besteht. Probier mal `contradiction`."
msgstr ""

#: Game.Levels.Logos.L07_Contradiction
msgid "Der erste Querulant ist offenbar zufrieden.\n"
"\n"
"**Du**: War das jetzt ein Widerspruchsbeweis?\n"
"\n"
"**Robo**: Nein, nein, ein Widerspruchsbeweis sieht anders aus. Das Argument hier war:\n"
" wir haben eine `contradiction` in unserem Annahmen, also folgt jede beliebige Aussage."
msgstr ""

#: Game.Levels.Logos.L08_Contradiction
msgid "Aus Falschem folgt vieles."
msgstr ""

#: Game.Levels.Logos.L08_Contradiction
msgid "Auftritt zweiter Querulant."
msgstr ""

#: Game.Levels.Logos.L08_Contradiction
msgid ""
msgstr ""

#: Game.Levels.Logos.L08_Contradiction
msgid "**Du** Ist `«{n}» ≠ «{n}»` nicht auch ein Widerspruch?\n"
"\n"
"**Robo**: Probiers mal!"
msgstr ""

#: Game.Levels.Logos.L08_Contradiction
msgid "**Du**: Ja, scheint funktioniert zu haben.\n"
"\n"
"**Du**: Aber irgendwie kommt mir das immer noch ein wenig suspekt vor.\n"
"Jetzt habe ich bewiesen, dass eine beliebige natürliche Zahl gleich 37 ist?\n"
"\n"
"**Robo**: Nein, nicht doch. Nur eine beliebige Zahl, die ungleich sich selbst ist, ist gleich 37.\n"
"Und gleich 38, und gleich 39, …\n"
"\n"
"**Du**: Okay, okay, verstehe."
msgstr ""

#: Game.Levels.Logos.L09_Contradiction
msgid "Aus Falschem folgt vieles."
msgstr ""

#: Game.Levels.Logos.L09_Contradiction
msgid "Auftritt dritter Querulant."
msgstr ""

#: Game.Levels.Logos.L09_Contradiction
msgid ""
msgstr ""

#: Game.Levels.Logos.L09_Contradiction
msgid "**Du** Wieder ein Widerspruch in den Annahmen?\n"
"\n"
"**Robo**: Ich sehe, du hast langsam den Dreh raus."
msgstr ""

#: Game.Levels.Logos.L09_Contradiction
msgid "**Robo**: Gut gemacht. Bei dieser Frage ist auch ein bisschen offensichtlicher,\n"
"worin der Widerspruch besteht: Die Annahme `n ≠ 10` ist genau die Negation von `n = 10`.\n"
"Man muss `≠` immer als `¬(· = ·)` lesen."
msgstr ""

#: Game.Levels.Logos.L10_And
msgid "Und"
msgstr ""

#: Game.Levels.Logos.L10_And
msgid "Der nächste Formalosoph in der Reihe hat seine Frage bereits mitgebracht.\n"
"Er legt sie uns vor, setzt sich hin und häkelt."
msgstr ""

#: Game.Levels.Logos.L10_And
msgid ""
msgstr ""

#: Game.Levels.Logos.L10_And
msgid "**Du**: Also, wir haben zwei Annahmen: `«{A}»` gilt, und `«{B}»` gilt auch. Und beweisen sollen wir\n"
"dass `«{A}» und «{B}»` gilt. Ich glaube, diese Formalospinner treiben mich noch zur Verzweiflung.\n"
"Kann ich nicht wieder `trivial` sagen?\n"
"\n"
"**Robo**: Nee, diesmal wird das nicht funktionieren.\n"
"Du musst das Beweisziel einfach in zwei Teile zerlegen. Probier mal `constructor`.\n"
"\n"
"**Du**: Du meinst, `destructor`??\n"
"\n"
"**Robo**: Nein, `constructor`. Ich weiß, das ist verwirrend,\n"
"aber die nennen das hier so weil man die Aussage aus mehreren Teilen\n"
"konstruieren kann."
msgstr ""

#: Game.Levels.Logos.L10_And
msgid "**Robo**: Schau mal, das ist Zauberpapier.\n"
"Jetzt haben wir auf einmal zwei Beweisziele.\n"
"Hier ist dast Ziel `«{B}»`.\n"
"Ich glaube, du weißt schon, wie man die jeweils erreicht.\n"
"Die Ziele stehen ja jeweils in den *Annahmen*."
msgstr ""

#: Game.Levels.Logos.L10_And
msgid "**Robo**: Super!\n"
"\n"
"Ihm scheinen diese Fragen inzwischen Spaß zu machen.\n"
"\n"
"**Robo**: Meinst du, dieser Hebel, an dem \"Editor mode\" steht, ist echt?\n"
"Oder ist der nur gemalt? Probier mal!"
msgstr ""

#: Game.Levels.Logos.L11_And
msgid "Und"
msgstr ""

#: Game.Levels.Logos.L11_And
msgid "Langsam wird die Schlange kürzer. Die nächste Formalosophin, ebenfalls häkelnd, hat folgendes Anliegen."
msgstr ""

#: Game.Levels.Logos.L11_And
msgid "**Du**: Jetzt müssen wir wohl die Annahme de-konstruieren.\n"
"\n"
"**Robo**: Ja, genau. Das geht am einfachsten mit `obtain ⟨h₁, h₂⟩ := «{h}»`.\n"
"\n"
"**Du**: Moment, wie schreib ich *das* denn hier auf?\n"
"\n"
"**Robo**: Die bleiden Klammern schreibst du als `\\<` und `\\>`, oder gleichzeitig als `\\<>`.\n"
"Und h₁ schreibst du einfach als `h\\1`. Aber du kannst dir auch einfach andere Namen\n"
"für `h₁` und `h₂`, zum Beispiel `obtain ⟨hA, hBC⟩ := «{h}»`."
msgstr ""

#: Game.Levels.Logos.L11_And
msgid "**Robo**: Das sieht doch schon besser aus! Gleich nochmal!"
msgstr ""

#: Game.Levels.Logos.L11_And
msgid "**Robo**: Du hast einen Beweis dafür in den *Annahmen*."
msgstr ""

#: Game.Levels.Logos.L11_And
msgid "**Robo**: Du hättest das übrigens auch direkt verschachtelt schreiben können:\n"
"`obtain ⟨h₁, h₂ , h₃⟩ := {h}`."
msgstr ""

#: Game.Levels.Logos.L12_Or
msgid "Oder"
msgstr ""

#: Game.Levels.Logos.L12_Or
msgid "Der nächste bitte …"
msgstr ""

#: Game.Levels.Logos.L12_Or
msgid "**Du** Muss ich jetzt wieder das Beweisziel de-konstruieren?\n"
"\n"
"**Robo** Nein, viel einfacher. Wenn du eine Oder-Aussage beweisen sollst, musst du dich\n"
"einfach entscheiden, ob du die linke oder rechte Seite beweisen willst.\n"
"\n"
"**Du** Und wie erkläre ich meinem Formalosophen, welche Seite ich gern beweisen würde?\n"
"Ich will natürlich `«{A}»` beweisen!\n"
"\n"
"**Robo** Mit `left` bzw. `right`. Ist doch logisch, oder?"
msgstr ""

#: Game.Levels.Logos.L12_Or
msgid "**Robo** Wusste gar nicht, dass du eine Links-Rechts-Schwäche hast. Probier's nochmal."
msgstr ""

#: Game.Levels.Logos.L12_Or
msgid "Auch dieser Formalosoph zieht zufrieden von dannen."
msgstr ""

#: Game.Levels.Logos.L13_Or
msgid "Oder"
msgstr ""

#: Game.Levels.Logos.L13_Or
msgid "Der nächste bitte …"
msgstr ""

#: Game.Levels.Logos.L13_Or
msgid ""
msgstr ""

#: Game.Levels.Logos.L13_Or
msgid "**Robo** Schau mal, wenn du mit dem Finger eine Annahme berührst, zeigt es dir,\n"
"wie die Klammern gesetzt sind. Irre…\n"
"\n"
"**Du** Ah ich sehe, also `(«{A}» ∧ «{B}») ∨ «{A}»`!\n"
"\n"
"**Du** Ich glaube den ganzen Zircus hier langsam nicht mehr:\n"
"Zuerst ein \"Und\" im Ziel, dann \"Und\" in der Annahme, dann \"Oder\" im Ziel und jetzt\n"
"\"Oder\" in der Annahme, die haben sich doch abgesprochen!\n"
"\n"
"**Robo** Lass ihnen doch ihren Spaß.\n"
"Wir sind ja gleich hier fertig, und können zu einem interessanteren Planeten weiterfliegen.\n"
"\n"
"**Du** Also, wieder `obtain …`?\n"
"\n"
"**Robo** Ja, aber diesmal nicht `obtain ⟨h₁, h₂⟩ := «{h}»`, sondern `obtain h | h := «{h}»`."
msgstr ""

#: Game.Levels.Logos.L13_Or
msgid "**Robo**\n"
"Jetzt musst du dein Ziel zweimal beweisen:\n"
"Einmal unter Annahme der linken Seite `«{A}» ∧ «{B}»`,\n"
"und einmal unter Annahme der rechten Seite `«{A}»`.\n"
"Hier haben nehmen wir an, die linke Seite\n"
"sei wahr."
msgstr ""

#: Game.Levels.Logos.L13_Or
msgid "**Robo** Wie man mit einem Und in den Annahmen umgeht,\n"
"weißt du doch schon:\n"
"`obtain ⟨h₁, h₂⟩ := «{h}»`. Zur Erinnerung: Für die Klammern schreibst du `\\<>`."
msgstr ""

#: Game.Levels.Logos.L13_Or
msgid "**Robo** Jetzt musst du dein Ziel noch unter der rechten Annahme\n"
"von `(«{A}» ∧ «{B}») ∨ «{A}»` zeigen, also angenommen, `«{A}»` sei wahr."
msgstr ""

#: Game.Levels.Logos.L13_Or
msgid "**Du** Okay, das scheint ihn zufriedenzustellen. Nur noch eine Seele…\n"
"Kannst du mir vorher noch einmal kurz alles Leansch zusammenfassen,\n"
"das du mir bis hierher beigebracht hast?\n"
"\n"
"Robo strahlt überglücklich. Noch *nie* warst du so auf ihn angewiesen.\n"
"\n"
"**Robo** Na klar, schau her!\n"
"\n"
"## Notationen / Begriffe\n"
"\n"
"|               | Beschreibung                                                             |\n"
"|:--------------|:-------------------------------------------------------------------------|\n"
"| *Goal*        | Was aktuell zu beweisen ist.                                             |\n"
"| *Annahme*     | Objekte & Resultate, die man zur Verfügung hat.                          |\n"
"| *Taktik*      | Befehl im Beweis. Entspricht einem Beweisschritt.                        |\n"
"| `ℕ`           | Typ aller natürlichen Zahlen.                                            |\n"
"| `0, 1, 2, …`  | Explizite natürliche Zahlen.                                             |\n"
"| `=`           | Gleichheit.                                                              |\n"
"| `≠`           | Ungleichheit. Abkürzung für `¬(·=·)`.                                    |\n"
"| `Prop`        | Typ aller logischen Aussagen.                                            |\n"
"| `True`        | Die logische Aussage `(True : Prop)` ist bedingungslos wahr.             |\n"
"| `False`       | Die logische Aussage `(False : Prop)` ist bedingungslos falsch.          |\n"
"| `¬`           | Logische Negierung.                                                      |\n"
"| `∧`           | Logisch UND.                                                             |\n"
"| `∨`           | Logisch ODER.                                                            |\n"
"| `(n : ℕ)`     | Eine natürliche Zahl.                                                    |\n"
"| `(A : Prop)`  | Eine logische Aussage.                                                   |\n"
"| `(ha : A)`    | Ein Beweis, dass die logische Aussage `(A : Prop)` wahr ist.             |\n"
"| `(h : A ∧ B)` | Eine Annahme, die den Namen `h` bekommen hat.                            |\n"
"\n"
"\n"
"## Taktiken\n"
"\n"
"Die Worte, die du aktiv gebrauchen musst, heißen zusammengefasst `Taktiken`.\n"
"Hier sind alle Taktiken, die wir auf diesem Planeten gebraucht haben:\n"
"\n"
"|    | Taktik                    | Beispiel                                          |\n"
"|:---|:--------------------------|:--------------------------------------------------|\n"
"| 1  | `rfl`                     | Beweist `A = A`.                                  |\n"
"| 2  | `assumption`              | Sucht das Goal in den Annahmen.                   |\n"
"| 3  | `contradiction`           | Sucht einen Widerspruch.                          |\n"
"| 4  | `trivial`                 | Kombiniert die obigen drei Taktiken (und mehr).   |\n"
"| 5  | `constructor`             | Teilt ein UND im Goal auf.                        |\n"
"| 6  | `left`/`right`            | Beweist eine Seite eines ODER im Goal.            |\n"
"| 7ᵃ | `obtain ⟨h₁, h₂⟩ := h`    | Teilt ein UND in den Annahmen auf.                |\n"
"| 7ᵇ | `obtain h := h \\| h`     | Teilt ein ODER in den Annahmen in zwei Fälle auf. |\n"
"\n"
"**Du** Woher weißt du das eigentlich alles?\n"
"\n"
"**Robo** Keine Ahnung. War, glaube ich, vorinstalliert."
msgstr ""

#: Game.Levels.Logos.L14_Summary
msgid "Zusammenfassung"
msgstr ""

#: Game.Levels.Logos.L14_Summary
msgid "Der letzte Untertan tritt vor. Ihr Anliegen ist etwas komplizierter als die vorherigen.\n"
"\n"
"**Robo** Wirf einfach alles drauf, was du gelernt hast.\n"
"Hier, ich bin sogar so nett und zeig dir noch einmal die vier\n"
"wichtigsten Taktiken für diese Situation an.\n"
"\n"
"| (Übersicht) | Und (`∧`)                | Oder (`∨`)              |\n"
"|:------------|:-------------------------|:------------------------|\n"
"| Annahme     | `obtain ⟨h₁, h₂⟩ := h`   | `obtain h \\| h := h`   |\n"
"| Goal        | `constructor`            | `left`/`right`          |"
msgstr ""

#: Game.Levels.Logos.L14_Summary
msgid "**Robo**: Ich würd zuerst die Annahme «{h}» mit `obtain ⟨⟩ := «{h}» aufteilen."
msgstr ""

#: Game.Levels.Logos.L14_Summary
msgid "**Robo**: Jetzt kannst du das `∧` im Goal mit `constructor` angehen."
msgstr ""

#: Game.Levels.Logos.L14_Summary
msgid "**Robo**: Hier würde ich die Annahme «{h}» nochmals mit `obtain` aufteilen."
msgstr ""

#: Game.Levels.Logos.L14_Summary
msgid "**Robo**: Der Nachteil an der Reihenfolge ist, dass du jetzt in jedem Untergoal\n"
"`obtain ⟨⟩ := h` aufrufen musst."
msgstr ""

#: Game.Levels.Logos.L14_Summary
msgid "**Robo** Bravo! Jetzt aber nichts wie weg hier, bevor sich eine neue Schlange bildet!\n"
"\n"
"Königin *Logisinde* ist in der Zwischenzeit eingeschlafen, und ihr stehlt euch heimlich davon."
msgstr ""

#: Game.Levels.Logos
msgid "Logos"
msgstr ""

#: Game.Levels.Logos
msgid "Durch eine unvorhergesehene und nicht-kanonische Singularität in der Raumzeit\n"
"bist du aus Versehen in ein Paralleluniversum gestolpert. Wie es aussieht, gibt es kein zurück.\n"
"Richte dich besser darauf ein, hier bleiben und dich zurechtzufinden zu müssen.\n"
"\n"
"Wie es aussieht, gibt es hier viele nette kleine Planeten. Alle bewohnbar, und bis zu\n"
"sieben Sonnenuntergänge täglich inklusive. Nur werden sie allesamt von Formalosophen bewohnt,\n"
"seltsamen Wesen mit ausgefallenen mathematischen Obsessionen. Und dummerweise hat sich\n"
"herumgesprochen, dass du in deinem früheren Universum Mathematiker warst. du wirst hier\n"
"keine Ruhe finden, solange du nicht lernst, ihren unablässigen Wissensdurst zu stillen.\n"
"\n"
"Es gibt nur zwei Schwierigkeiten: Erstens haben die Formalosophen allem Anschein nach\n"
"überhaupt kein tieferes mathematisches Verständnis, und zweitens kommunizieren Sie über Mathematik\n"
"exklusiv in einem dir fremden Dialekt, den sie Leansch [liːnʃ] nennen.\n"
"\n"
"Zum Glück hat Robo mit dir das Universum gewechselt.\n"
"Robo, das ist dein kleiner SmartElf. Robo ist zwar auch nicht die mathematische Leuchte, die du Dir\n"
"in dieser Situation gewünscht hättest, aber es scheint, er hat irgendwo Leansch gelernt.\n"
"Und das ist Gold wert."
msgstr ""

#: Game.Levels.Implis.L01_Intro
msgid "Intro"
msgstr ""

#: Game.Levels.Implis.L01_Intro
msgid "**Operationsleiter**: Hier, zum Beispiel:"
msgstr ""

#: Game.Levels.Implis.L01_Intro
msgid "**Operationsleiter**: Die Arbeiten meinen, das wäre so richtig und wir würden das dringend\n"
"brauchen. Aber keiner kann es mir beweisen.\n"
"\n"
"**Du**: Einen Moment. Das ist ja gerade so eine Implikation (`\\to`). Wir nehmen an,\n"
"dass `«{B}»` gilt, und wollen zeigen, dass dann gilt `«{A}»` impliziert `«{A}» und «{B}»`. Ja,\n"
"klar! Natürlich stimmt das.\n"
"\n"
"Der Operationsleiter sieht dich erwartungsvoll an.\n"
"\n"
"**Du** *(leise zu Robo)*: Soll ich ihm `tauto` aufschreiben?\n"
"\n"
"**Robo** *(leise zurück)*: So wie der aussieht, fürchte ich, das wird er auch nicht verstehen.\n"
"Schreib den Beweis lieber aus.\n"
"\n"
"**Du**: Aber wie denn? Ich glaube, ich würde als erstes gern so etwas sagen wie 'Nehmen wir\n"
"also an, `«{A}»` gilt …'\n"
"\n"
"**Robo**: Ja, gute Idee. Wähle dazu für deine Annahme einfach einen Namen, zum Beispiel `h`,\n"
"und schreib `intro h`."
msgstr ""

#: Game.Levels.Implis.L01_Intro
msgid "**Du**: Okay. Jetzt habe ich also sowohl `«{A}»` als auch `«{B}»` in meinen Annahmen und\n"
"muss `«{A}» ∧ «{B}»` zeigen.\n"
"\n"
"**Robo**: Genau. Und wie das geht, weißt du ja schon."
msgstr ""

#: Game.Levels.Implis.L01_Intro
msgid "**Operationsleiter**: Perfekt! Danke schön!\n"
"\n"
"Er geht zu einer Schalttafel und ein paar Knöpfe. Irgendwo setzt sich lautstark ein\n"
"Förderband in Bewegung.\n"
"\n"
"**Operationsleiter**: Habt Ihr vielleicht noch ein paar Minuten?"
msgstr ""

#: Game.Levels.Implis.L02_Revert
msgid "Revert"
msgstr ""

#: Game.Levels.Implis.L02_Revert
msgid "Der Operationsleiter holt aus einem Container einen Stapel Papier hervor.\n"
"\n"
"**Operationsleiter**: Hier hat sich echt einiges angesammelt. Wäre echt super, wenn Ihr mir\n"
"noch ein bisschen helfen könntet.\n"
"\n"
"Er übergibt Euch das oberste Blatt."
msgstr ""

#: Game.Levels.Implis.L02_Revert
msgid "**Operationsleiter**: Das ist von einem Kollegen.\n"
"\n"
"**Robo**: Oh, das hab ich schon einmal irgendwo gelesen. Warte mal … Richtig! Das war\n"
"damals, als ich Wikipedia gecrawlt habe: `Der Modus ponens ist eine schon in der antiken\n"
"Logik geläufige Schlussfigur, die in vielen logischen …`\n"
"\n"
"**Du**: Robo! Gefragt ist ein Beweis und kein historischer Aufsatz! Oder komme ich hier\n"
"etwa mit `mopo` oder so etwas weiter?\n"
"\n"
"**Robo**: Okay, nein, sorry. `mopo` gibt es nicht. Probier lieber `revert «{hA}»`."
msgstr ""

#: Game.Levels.Implis.L02_Revert
msgid "**Du**: Aha. `revert` ist quasi `intro` rückwärts.\n"
"\n"
"**Robo**: Genau. `intro` nimmt die Prämisse aus einer Implikation `«{A}» \\to «{B}»` im\n"
"Beweisziel und macht daraus eine Annahme. `revert` nimmt umgekehrt eine Annahme und\n"
"setzt sie als Implikationsprämisse vor das Beweisziel. Aber nun mach schon fertig."
msgstr ""

#: Game.Levels.Implis.L02_Revert
msgid "Der Operationsleiter nimmt erfreut Eure Lösung entgegen, und greift zum Telefon."
msgstr ""

#: Game.Levels.Implis.L03_Apply
msgid "Apply"
msgstr ""

#: Game.Levels.Implis.L03_Apply
msgid "Leider läuft das Telefonat nicht so gut. Er legt wieder auf und schüttelt mit dem Kopf.\n"
"\n"
"**Operationsleiter**: Der Kollege auf der anderen Seite des Mondes versteht kein `revert`. Oder\n"
"er tut zumindest so. Habt Ihr noch eine andere Idee?\n"
"\n"
"Er zieht eine Linie unter Euren Beweis, ergänzt ein durchgestrichenes ~`revert`~, und legt Euch\n"
"das Blatt ein zweites Mal vor."
msgstr ""

#: Game.Levels.Implis.L03_Apply
msgid "**Robo**: Vielleicht wäre es ohnehin eleganter gewesen, die gegebene Implikation anzuwenden.\n"
"Probier doch mal `apply hAB at h`."
msgstr ""

#: Game.Levels.Implis.L03_Apply
msgid "**Robo**: Ich sagte `… at h`. Aber einfach nur `apply hAB` funktioniert offenbar auch.\n"
"Jetzt hast Du sozusagen `hAB` auf das Beweisziel `B` angewendet, und musst nur\n"
"noch `A` beweisen."
msgstr ""

#: Game.Levels.Implis.L03_Apply
msgid "**Du**: Ja, das kommt mir jetzt auch natürlich vor."
msgstr ""

#: Game.Levels.Implis.L03_Apply
msgid "Diesmal scheint das Telefonat erfolgreich zu verlaufen."
msgstr ""

#: Game.Levels.Implis.L04_Apply
msgid "Implikation"
msgstr ""

#: Game.Levels.Implis.L04_Apply
msgid "**Operationsleiter**: Das hier ist jetzt wieder ein lokales Problem."
msgstr ""

#: Game.Levels.Implis.L04_Apply
msgid "**Du**: Ich soll Implikationen $A \\Rightarrow B \\Rightarrow C$ zu $A \\Rightarrow C$\n"
"kombinieren?\n"
"\n"
"**Robo**: Vielleicht fängst du wieder mit `intro` an?"
msgstr ""

#: Game.Levels.Implis.L04_Apply
msgid "**Robo**: Das ist wieder eine Anwendung von `apply`."
msgstr ""

#: Game.Levels.Implis.L04_Apply
msgid "**Operationsleiter**: Ihr seid echt super!"
msgstr ""

#: Game.Levels.Implis.L05_Apply
msgid "Implikation"
msgstr ""

#: Game.Levels.Implis.L05_Apply
msgid "Die nächste Seite sieht ein bisschen komplizierter aus. Damit Ihr nicht die Übersicht verliert, fasst Robo sofort die verschiedenen Implikationen in einem Diagramm zusammen.\n"
"  $$\n"
"  \\begin{CD}\n"
"       A  @>{f}>> B @<{g}<< C    \\\\\n"
"    @V{h}VV    @V{i}VV   @V{j}VV \\\\\n"
"       D  @<{k}<< E @>{l}>> F    \\\\\n"
"    @A{m}AA    @A{n}AA   @V{p}VV \\\\\n"
"       G  @<{q}<< H @>{r}>> I\n"
"  \\end{CD}\n"
"  $$"
msgstr ""

#: Game.Levels.Implis.L05_Apply
msgid "**Du**: Also ich muss einen Pfad von Implikationen $A \\Rightarrow I$ finden.\n"
"\n"
"**Robo**: Lass mich mal raten, wie wir anfangen … Wieder `intro`?"
msgstr ""

#: Game.Levels.Implis.L05_Apply
msgid "**Robo**: Na wieder `apply`, was sonst."
msgstr ""

#: Game.Levels.Implis.L05_Apply
msgid "**Robo**: Das sieht nach einer Sackgasse aus …"
msgstr ""

#: Game.Levels.Implis.L05_Apply
msgid "**Robo**: Das sieht nicht gut aus."
msgstr ""

#: Game.Levels.Implis.L05_Apply
msgid "**Robo**: Nah, da stimmt doch was nicht …"
msgstr ""

#: Game.Levels.Implis.L05_Apply
msgid "**Robo**: Halt! Falsch abgebogen."
msgstr ""

#: Game.Levels.Implis.L05_Apply
msgid "**Robo**: Bist du dir sicher?"
msgstr ""

#: Game.Levels.Implis.L05_Apply
msgid "**Robo**: Ehm …"
msgstr ""

#: Game.Levels.Implis.L05_Apply
msgid "Der Operationsleiter bedankt sich wieder artig. Er drückt wieder auf ein paar Knöpfe,\n"
"und mit einem lauten Ratteln springen mehrere Förderbänder gleichzeitig wieder an."
msgstr ""

#: Game.Levels.Implis.L06_Iff
msgid "Genau dann, wenn"
msgstr ""

#: Game.Levels.Implis.L06_Iff
msgid "**Operationsleiter**: Wir hatten auch mal ein paar Förderbänder, die in beide Richtungen laufen\n"
"konnten. Die hatte ich vorsichtshalber alle abgestellt, weil in den neusten Handbüchern von\n"
"solchen Doppelbändern abgeraten wird. Aber vielleicht sind sie ja unter bestimmten\n"
"Voraussetzungen doch sicher? Was meint Ihr zu diesem Fall?"
msgstr ""

#: Game.Levels.Implis.L06_Iff
msgid "**Robo**: `A ↔ B` ist natürlich Leansch für $A \\iff B$, also genau-dann-wenn.\n"
"Die Aussage `A ↔ B` besteht also aus zwei Teilen; sie ist als `⟨A → B, B → A⟩` definiert.\n"
"\n"
"**Du**: Also ganz ähnlich wie das UND, `A ∧ B`?\n"
"\n"
"**Robo**: Genau. Entsprechend kannst du auch hier mit `constructor` anfangen."
msgstr ""

#: Game.Levels.Implis.L06_Iff
msgid "**Du**: Ah, und die beiden Teile habe ich schon in den Annahmen."
msgstr ""

#: Game.Levels.Implis.L06_Iff
msgid "**Operationsleiter**: Okay, das leuchtet mir ein.\n"
"\n"
"**Robo** *(zu dir)*: Übrigens, so wie bei `(h : A ∧ B)` die beiden\n"
"Teile `h.left` und `h.right` heißen,\n"
"heißen bei `(h : A ↔ B)` die beiden Teile `h.mp` und `h.mpr`.\n"
"\n"
"**Du**: Also `h.mp` ist `A → B`? Wieso `mp`?\n"
"\n"
"**Robo**: `mp` steht für Modus Ponens`. Der Modus ponens ist eine schon in der antiken\n"
"Logik geläufige Schlussfigur, die in vielen logischen Systemen … Ach nee, das wolltest\n"
"du ja nicht hören. Das \"r\" in `mpr` steht für \"reverse\", weil's die Rückrichtung ist."
msgstr ""

#: Game.Levels.Implis.L07_Symm
msgid "Genau dann, wenn"
msgstr ""

#: Game.Levels.Implis.L07_Symm
msgid "**Operationsleiter**: Hier ist noch so etwas."
msgstr ""

#: Game.Levels.Implis.L07_Symm
msgid "**Du**: Das ist ja nur verdreht.\n"
"\n"
"**Robo**: Ich kenne ein Werkzeug dafür. Mit `symm` oder `symm at «{h}»` kannst du eines\n"
"der beiden umdrehen."
msgstr ""

#: Game.Levels.Implis.L07_Symm
msgid "**Operationsleiter**: Das war ja symmpel. Das nächste Problem sieht aber schwieriger aus."
msgstr ""

#: Game.Levels.Implis.L08_Rw
msgid "Genau dann, wenn"
msgstr ""

#: Game.Levels.Implis.L08_Rw
msgid "**Operationsleiter**: Hier, könnt ihr dazu auch was sagen?"
msgstr ""

#: Game.Levels.Implis.L08_Rw
msgid "**Du**: $B \\iff A \\iff D \\iff C$, die sind doch alle äquivalent…\n"
"\n"
"**Robo**: Ja, aber du musst ihm helfen, die Äquivalenzen umzuschreiben. Mit `rw [h₁]` kannst\n"
"du `C` durch `D` ersetzen."
msgstr ""

#: Game.Levels.Implis.L08_Rw
msgid "**Du** Und wenn ich in die andere Richtung umschreiben möchte?\n"
"\n"
"**Robo**: Dann schreibst du ein `←` (`\\l`, also klein \"L\") vor den Namen, also `rw [← hₓ]`."
msgstr ""

#: Game.Levels.Implis.L08_Rw
msgid "**Du**: Ehm, das war verkehrt.\n"
"\n"
"**Robo**: Ja, anders herum wär's besser gewesen. Aber wenn du jetzt einfach weitermachst,\n"
"bis Du sowas wie `A ↔ A` erhältst, kann `rfl` das beweisen.\n"
"\n"
"**Robo: Da fällt mir ein, `rw` wendet ohnehin auch versuchsweise `rfl` an.\n"
"Das heißt, du musst `rfl` nicht einmal ausschreiben."
msgstr ""

#: Game.Levels.Implis.L08_Rw
msgid "**Operationsleiter**: Wenn Ihr so weitermacht, dann kommen wir ja durch den ganzen Packen durch!"
msgstr ""

#: Game.Levels.Implis.L09_Trans
msgid "Genau dann, wenn"
msgstr ""

#: Game.Levels.Implis.L09_Trans
msgid "**Du**: Irgendwie fühlen sich diese `rw` an, als würde man von hinten durch den Bauch argumentieren.  Geht das nicht auch irgendwie geradeaus, oder denken alle hier um die Ecke?\n"
"\n"
"**Robo**:  Vielleicht würde dir `trans' besser gefallen.  Damit könntest du deine Kette von Äquivalenzen  $B \\iff A \\iff D \\iff C$ Schritt für Schritt abarbeiten: als erstes führst Du mit `trans A` den Zwischenschritt `B \\iff A` ein, dann mit `trans D` den nächsten Zwischenschritt."
msgstr ""

#: Game.Levels.Implis.L09_Trans
msgid "**Robo**: Und, war das besser?\n"
"\n"
"**Du**:  Weiß nicht.  Wir können jedenfalls weitermachen."
msgstr ""

#: Game.Levels.Implis.L10_Iff
msgid "Genau dann wenn"
msgstr ""

#: Game.Levels.Implis.L10_Iff
msgid "**Operationsleiter**: Das hier ist wieder für meinen beschränkten Kollegen. Ich glaube,\n"
"`rw` mag der auch nicht. Geht das trotzdem?"
msgstr ""

#: Game.Levels.Implis.L10_Iff
msgid "**Du**: Naja ich kann wohl immerhin mal mit `intro` anfangen …\n"
"\n"
"**Robo**: … und dann schauen wir weiter!"
msgstr ""

#: Game.Levels.Implis.L10_Iff
msgid "**Robo**: Also eine Implikation wendet man mit `apply` an …\n"
"\n"
"**Du**: Weiß ich doch! Aber `«{h}»` ist keine Implikation, sondern eine Äquivalenz.\n"
"Da würde ich doch eigentlich `rw [← «{h}»]` sagen wollen.\n"
"\n"
"**Robo**: Die Richtung `«{A}» → «{B}»` von `«{h}»` heißt `«{h}».mp`. Du kannst sie\n"
"mit `apply («{h}».mp) at …` anwenden."
msgstr ""

#: Game.Levels.Implis.L10_Iff
msgid "**Robo**: So kannst Du natürlich auch anfangen."
msgstr ""

#: Game.Levels.Implis.L10_Iff
msgid "**Operationsleiter**: Okay, super. Das müsste passen.\n"
"\n"
"Er telefoniert wieder.\n"
"\n"
"**Operationsleiter**: Bingo!"
msgstr ""

#: Game.Levels.Implis.L11_Iff
msgid "Genau dann wenn"
msgstr ""

#: Game.Levels.Implis.L11_Iff
msgid "**Operationsleiter**: Ah, die nächste Seite ist auch von diesem Kollegen.\n"
"Aber da ist noch eine Notiz bei. Wir hatten hierfür schon einmal einen Beweis,\n"
"aber den mochte er nicht. Er wollte einen Beweis, der weder `rw` noch `apply` verwendet!!\n"
"\n"
"Er holt tief Luft und seuft.\n"
"\n"
"**Operationsleiter**: Ich glaube, der stellt sich immer viel dümmer, als er ist.\n"
"Aber meint Ihr, Ihr schafft das?"
msgstr ""

#: Game.Levels.Implis.L11_Iff
msgid "**Du**: Hmm, mindestens mit der Implikation kann ich anfangen."
msgstr ""

#: Game.Levels.Implis.L11_Iff
msgid "**Robo**: Genau, das war `intro`."
msgstr ""

#: Game.Levels.Implis.L11_Iff
msgid "**Du**: Also, ich kenne `rw [«{h}»]` und `apply («{h}».mp)`, aber das wollten wir ja\n"
"diesmal vermeiden.\n"
"\n"
"**Robo**: Was du machen könntest, ist, mit `obtain ⟨mp, mpr⟩ := «{h}»` die Annahme\n"
"in zwei Teile aufteilen."
msgstr ""

#: Game.Levels.Implis.L11_Iff
msgid "**Robo**: Hier müsstest du jetzt `rw [←«{h}»]` oder `apply «{h}».mp` benutzen.\n"
"Geh lieber einen Schritt zurück, sodass das Goal `A → B` ist."
msgstr ""

#: Game.Levels.Implis.L11_Iff
msgid "**Du**: Ah, und jetzt ist das Beweisziel in den Annahmen."
msgstr ""

#: Game.Levels.Implis.L11_Iff
msgid "**Operationsleiter**: Perfekt, das sollte reichen!"
msgstr ""

#: Game.Levels.Implis.L12_ByCases
msgid "by_cases"
msgstr ""

#: Game.Levels.Implis.L12_ByCases
msgid "Beim nächsten Problem stutzt der Operationsleiter.\n"
"\n"
"**Operationsleiter**: Ehrlich gesagt weiß ich gar nicht, wo dieses Blatt herkommt. Das ist\n"
"gar nicht von mir. Sieht aber irgendwie interessant aus."
msgstr ""

#: Game.Levels.Implis.L12_ByCases
msgid "**Du**: Naja, eine der beiden Aussagen `A` oder `¬A` wird schon wahr sein.\n"
"\n"
"**Robo**: Klarer Fall für eine Fallunterscheidung, würde ich sagen. Probier\n"
"mal `by_cases h : A`."
msgstr ""

#: Game.Levels.Implis.L12_ByCases
msgid "**Robo**: Siehst du, jetzt hat der Beweis zwei Teile. Im ersten Teil nimmst\n"
"du an, dass `A` wahr ist. Im zweiten nimmst du an, dass `A` falsch ist."
msgstr ""

#: Game.Levels.Implis.L12_ByCases
msgid "Der Operationsleiter nickt zustimmend."
msgstr ""

#: Game.Levels.Implis.L13_Rw
msgid "Lemmas"
msgstr ""

#: Game.Levels.Implis.L13_Rw
msgid "**Operationsleiter**: Wieder etwas für den Kollegen …. Und er wollte wieder einen\n"
"Beweise ohne `apply`. Ich sehe hier auch, dass ich mir schon einmal etwas\n"
"hierzu notiert hatte. Richtig, es gibt da dieses Lemma:\n"
"```\n"
"lemma not_not (A : Prop) : ¬¬A ↔ A\n"
"```\n"
"\n"
"**Operationsleiter**: Schafft Ihr das damit?"
msgstr ""

#: Game.Levels.Implis.L13_Rw
msgid "**Robo**: Ein Lemma, das wie `not_not` ein `↔` oder `=` im Statement hat, kann\n"
"auch mit `rw [not_not]` verwendet werden."
msgstr ""

#: Game.Levels.Implis.L13_Rw
msgid "**Du**: Häh, wieso hat das jetzt 2 von 3 der `¬¬` umgeschrieben?\n"
"\n"
"**Robo**: `rw` schreibt nur das erste um, das es findet, also `¬¬C`. Aber weil dieses\n"
"mehrmals vorkommt, werden die alle ersetzt …\n"
"\n"
"**Du**: Ah, und `¬¬B` ist etwas anderes, also brauche ich das Lemma nochmals."
msgstr ""

#: Game.Levels.Implis.L13_Rw
msgid "**Du**: Wir sind schon fertig …?\n"
"\n"
"**Robo**: Ja, `rw` versucht immer anschließend `rfl` aufzurufen, und das hat hier funktioniert."
msgstr ""

#: Game.Levels.Implis.L14_Summary
msgid "Zusammenfassung"
msgstr ""

#: Game.Levels.Implis.L14_Summary
msgid "**Operationsleiter**: Ihr habt mir wirklich so geholfen! Hier ist das letzte Problem.\n"
"Das habe ich von meinem Vorgänger geerbt. Er hat behauptet, wenn wir das lösen können,\n"
"dann läuft hier wieder alles. Aber es sah mir immer viel zu schwierig aus, um es überhaupt\n"
"zu versuchen. Wollt Ihr es einmal probieren?\n"
"\n"
"**Du**: Klar, zeig her! Robo, kannst du mir vielleicht auch noch einmal so eine nette\n"
"Zusammenfassung anzeigen, was ich theoretisch in den letzten fünf Minuten gelernt habe?\n"
"\n"
"**Robo**: Hier ist die Übersicht:\n"
"\n"
"## Notationen / Begriffe\n"
"\n"
"|               | Beschreibung                                             |\n"
"|:--------------|:---------------------------------------------------------|\n"
"| →             | Eine Implikation.                                        |\n"
"| ↔             | Genau-dann-wenn / Äquivalenz.                            |\n"
"\n"
"## Taktiken\n"
"\n"
"|     | Taktik                    | Beispiel                                                   |\n"
"|:----|:--------------------------|:-----------------------------------------------------------|\n"
"| 8   | `intro`                   | Für eine Implikation im Goal.                              |\n"
"| 9   | `revert`                  | Umkehrung von `intro`.                                     |\n"
"| 10  | `apply`                   | Wendet Implikation/Theorem (rückwärts) auf das Goal an.    |\n"
"| 10ᵇ | `apply at`                | Wendet Implikation/Theorem (forwärts) auf eine Annahme an. |\n"
"| 11  | `symm`                    | Tauscht `A ↔ B` zu `B ↔ A`.                                |\n"
"| 12  | `trans`                   | Ändert `A ↔ C` zu `A ↔ B` und `B ↔ C`                      |\n"
"| 13  | `rw`                      | Umschreiben zweier äquivalenter Aussagen.                  |\n"
"| 13ᵇ | `rw`                      | Benutzt ein Lemma, dessen Aussage eine Äquivalenz ist.     |\n"
"| 14  | `by_cases`                | Fallunterscheidung `P` und `¬P`                            |"
msgstr ""

#: Game.Levels.Implis.L14_Summary
msgid "**Du** *(flüsternd)*: Ist das nicht die Definition von `→`?\n"
"\n"
"**Robo** *(flüsternd)*: Könnte man so sehen. Aber auf Leansch ist das bloß eine Äquivalenz."
msgstr ""

#: Game.Levels.Implis.L14_Summary
msgid "**Robo**: Vielleicht kannst du wieder `by_cases` benutzen."
msgstr ""

#: Game.Levels.Implis.L14_Summary
msgid "**Robo**: Na Implikationen gehst du immer mit `intro` an."
msgstr ""

#: Game.Levels.Implis.L14_Summary
msgid "**Robo**: Ich würde mal die Annahme `h` mit `obtian` aufteilen."
msgstr ""

#: Game.Levels.Implis.L14_Summary
msgid "**Operationsleiter**: Das ist ja fantastisch! Tausend Dank! Dann will ich Euch auch gar\n"
"nicht länger aufhalten.\n"
"Ihr wollt bestimmt weiter zum Planeten Quantus, oder?\n"
"\n"
"**Du**: Ehm, vielleicht …\n"
"\n"
"**Operationsleiter**: Dann habe ich noch eine letzte Bitte. Ich habe hier noch ein Päckchen\n"
"für die Königin von Quantus! Auch schon von meinem Vorgänger geerbt. Die Post will es\n"
"nicht annehmen, weil ich die Adresse nicht weiß. Könntet Ihr es vielleicht zu ihr mitnehmen?\n"
"\n"
"**Du**: Klar! Robo, halt mal.\n"
"\n"
"Robo nimmt das Päckchen und lässt es irgendwo in seinem Innern verschwinden.\n"
"Der Operationsleiter sieht ihn entgeistert an.\n"
"\n"
"**Robo**: Keine Angst, ich verdaue nichts!"
msgstr ""

#: Game.Levels.Implis
msgid "Implis"
msgstr ""

#: Game.Levels.Implis
msgid "Zurück im Raumschiff macht ihr euch auf den Weg zu einem benachbarten Planeten, der ebenfalls\n"
"bewohnt zu sein scheinen.\n"
"\n"
"**Du**: Ich habe immer noch das Gefühl, dass ich die Aufgabe von Königin *Logisinde*\n"
"ohne `tauto` nicht hätte lösen können.\n"
"Kamen in der Aufgabe nicht auch Implikationen vor?\n"
"\n"
"**Robo**: Vielleicht haben wir ja auf dem Planeten *Implis*, den wir gerade ansteuern,\n"
"Gelegenheit, noch etwas dazuzulernen. Festhalten bitte …\n"
"\n"
"Und damit leitet Robo den Landeanflug ein.\n"
"\n"
"Implis scheint ein riesiger Tagebau zu sein.\n"
"Überall verlaufen Förderbänder, kreuz und quer, aber die meisten stehen still.\n"
"Ein schüchterner Operationsleiter erwartet Euch bereits.\n"
"\n"
"**Operationsleiter**: Ihr kommt mir gerade recht! Ich habe schon gehört. Echte Mathematiker!\n"
"Wisst Ihr, wir fördern hier Wahrheitswerte. Und dabei muss man höllisch aufpassen.\n"
"Ein Fehler, und alles bricht zusammen. Aber ich bin sehr vorsichtig. Ich sage immer:\n"
"Lieber Stillstand als Untergang!"
msgstr ""

#: Game
msgid "Robo"
msgstr ""

#: Game
msgid "# Game Over oder QED?\n"
"\n"
"Willkommen zu unserem Prototyp eines Lean4-Lernspiels. Hier lernst du computer-gestützte\n"
"Beweisführung. Das Interface ist etwas vereinfacht, aber wenn du den *Editor Mode* aktivierst, fühlt es sich\n"
"fast genauso an wie in VSCode, der Standard-IDE für Lean.\n"
"\n"
"Rechts siehst du eine Übersicht. Das Spiel besteht aus mehreren Planeten, und jeder Planet hat mehrere Levels,\n"
"die in Form von grauen Punkten dargestellt sind. Gelöste Levels werden grün.\n"
"\n"
"Klicke auf den ersten Planeten *Logo*, um deine Reise zu starten.\n"
"\n"
"\n"
"### More\n"
"Schau im Menü unter \"Game Info\" für mehr Informationen zum Spiel."
msgstr ""

#: Game
msgid "## Spielstand\n"
"\n"
"Dein Spielstand wird lokal in deinem Browser als *site data* gespeichert.\n"
"Solltest du diese löschen, verlierst du deinen Spielstand!\n"
"Viele Browser löschen *site data* und *cookies* zusammen.\n"
"Wenn du \"Game rules: lax\" auswählst kannst aber jederzeit jedes Level spielen,\n"
"auch wenn du vorhergende Levels noch nicht gelöst hast.\n"
"\n"
"## Funding\n"
"\n"
"Dieses Lernspiel wurde und wird im Rahmen des Projekts\n"
"[ADAM: Anticipating the Digital Age of Mathematics](https://hhu-adam.github.io/)\n"
"an der Heinrich-Heine-Universität Düsseldorf entwickelt.\n"
"Es wird finanziert durch das Programm *Freiraum 2022* der\n"
"*Stiftung Innovation in der Hochschullehre*.\n"
"\n"
"## Credits\n"
"\n"
"* **Creators:** Jon Eugster, Alexander Bentkamp, Marcus Zibrowius, Sina Hazratpour\n"
"* **Game Engine:** Alexander Bentkamp, Jon Eugster, Patrick Massot\n"
"* **Illustrationen:** Dušan Pavlić\n"
"\n"
"## Kontakt\n"
"\n"
"Das Spiel befindet sich noch in der Entwicklung.\n"
"Wenn du Anregungen hast oder Bugs findest, schreib doch ein Email oder erstelle einen\n"
"Issue auf Github:\n"
"\n"
"* zum Spielinhalt im [Robo repo](https://github.com/hhu-adam/Robo/issues).\n"
"* zum Spielserver im [lean4game repo](https://github.com/leanprover-community/lean4game/issues).\n"
"\n"
"Kontakt: [Jon Eugster](https://www.math.hhu.de/lehrstuehle-/-personen-/-ansprechpartner/innen/lehrstuehle-des-mathematischen-instituts/lehrstuhl-fuer-algebraische-geometrie/team/jon-eugster)"
msgstr ""

#: Game
msgid "Fertig!"
msgstr ""

#: Game
msgid "Erkunde das Leansche Universum mit deinem Robo, welcher dir bei der Verständigung mit den Formalosophen zur Seite steht."
msgstr ""

#: Game
msgid "Dieses Spiel führt die Grundlagen zur Beweisführung in Lean ein und schneidet danach verschiedene Bereiche des Bachelorstudiums an.\n"
"\n"
"(Das Spiel befindet sich noch in der Entstehungsphase.)"
msgstr ""
