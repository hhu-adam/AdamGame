msgid ""
msgstr "Project-Id-Version: Game v4.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: Mon Sep  9 15:24:55 2024\n"
"Last-Translator: \n"
"Language-Team: none\n"
"Language: de\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit"

#: GameServer.RpcHandlers
msgid "level completed! 🎉"
msgstr ""

#: GameServer.RpcHandlers
msgid "level completed with warnings… 🎭"
msgstr ""

#: GameServer.RpcHandlers
msgid "intermediate goal solved! 🎉"
msgstr ""

#: Game.Doc.Definition
msgid "Eine Funktion `f` is injektiv wenn:\n"
"\n"
"```\n"
"∀ a b, f a = f b → a = b\n"
"```"
msgstr ""

#: Game.Doc.Definition
msgid "Eine Funktion `f` is surjektiv wenn:\n"
"\n"
"```\n"
"∀ b, ∃ a, f a = b\n"
"```"
msgstr ""

#: Game.Doc.Definition
msgid "Eine Funktion `f` is bijectiv wenn sie injektiv und surjektiv ist."
msgstr ""

#: Game.Doc.Definition
msgid "`f` ist strikt monoton wenn\n"
"\n"
"```\n"
"∀ a b, a < b → f a < f b\n"
"```"
msgstr ""

#: Game.Doc.Definition
msgid "Anonyme Funktionen kann man mit `fun (x : ℤ) => 2 * x` definieren und\n"
"wie andere Objekte verwenden.\n"
"\n"
"Note: `=>` wird in mathlib oft auch `↦` (`\\\\maps`) geschrieben."
msgstr ""

#: Game.Doc.Definition
msgid "`A ∧ B` (\"und\") ist die Aussage dass sowohl `A` als auch `B` wahr ist."
msgstr ""

#: Game.Doc.Definition
msgid "* Für `A B : Prop` ist `A → B` eine Implikation \"`A` impliziert `B`\"\n"
"* Für andere `X Y : Type` ist `X → Y` eine Funktion, die Werte aus `X` nach `Y` abbildet,\n"
"  z.B. `f : ℕ → ℤ := n ↦ -n`."
msgstr ""

#: Game.Doc.Definition
msgid "Nützliche Taktiken für Gleicheit sind: `rfl`, `rw`, `trans`"
msgstr ""

#: Game.Doc.Definition
msgid "`Even n` ist die Aussage dass `n : ℕ` gerade ist."
msgstr ""

#: Game.Doc.Definition
msgid "Die Aussage `False : Prop` ist nie wahr.\n"
"\n"
"Lean benützt diese intern für Widersprüche, ein Widerspruch ist ein Beweis `(hF : False)` von\n"
"`False` und z.B. `¬ A` ist als `A → False` implementiert."
msgstr ""

#: Game.Doc.Definition
msgid "Genau-dann-wenn (if-and-only-if). Can meistens mit `constructor` oder `obtain ⟨fwd, bwd⟩ := h`\n"
"in Einzelteile zerlegt werden.\n"
"\n"
"Bei einer Annahme `h : A ↔ B`, heissen die Einzelteile zudem `h.mp : A → B` und `h.mpr : B → A`."
msgstr ""

#: Game.Doc.Definition
msgid "Ungleichheit `x ≠ y` ist definiert als `x = y → False`."
msgstr ""

#: Game.Doc.Definition
msgid "`Nonempty U` ist eine Instanz, die aussagt, dass `U` mindestens ein Element\n"
"enthält.\n"
"\n"
"Wenn `h : Nonempty U`, dann kriegt man mit `obtain ⟨d⟩ := h` eine solches Element `d : U`."
msgstr ""

#: Game.Doc.Definition
msgid "`¬ A` ist intern als `A → False` implementiert.\n"
"\n"
"Nütliche Tactiken sind: `push_neg`, `by_contra`, `contrapose`."
msgstr ""

#: Game.Doc.Definition
msgid "`Odd n` ist die Aussage dass `n : ℕ` ungerade ist."
msgstr ""

#: Game.Doc.Definition
msgid "`A ∨ B` (\"oder\") ist die Aussage mindestens eine der Aussagen `A`, `B` wahr ist."
msgstr ""

#: Game.Doc.Definition
msgid "`(A : Prop)` ist eine beliebige Aussage, ohne weitere Angabe, ob diese wahr, falsch oder\n"
"nicht beweisbar ist.\n"
"\n"
"Siehe auch `(True : Prop)` und `(False : Prop)` die uneingeschränkt wahre (rsp. falsche)\n"
"Aussage."
msgstr ""

#: Game.Doc.Definition
msgid "Die Aussage `True : Prop` ist immer wahr."
msgstr ""

#: Game.Doc.Tactic
msgid "Sind eine Annahme `h : A` und eine Implikation `hAB : A → B` gegeben, so\n"
"verwandelt `apply hAB at h` die gegebene Annahme in die Annahme `h : B`.\n"
"Ist `B` unser Beweisziel, können wir mit `apply hAB` auch rückwärts argumentieren und\n"
"erhalten `A` als neues Beweisziel.   In beiden Fällen kann die Implikation `hAB` wahlweise\n"
"als Annahme gegeben oder ein bereits bekanntes Lemma sein.\n"
"\n"
"\n"
"## Beispiel\n"
"\n"
"Gegeben sei für `n : ℕ` folgendes Lemma:\n"
"```\n"
"lemma lem (h : n ≤ 0) : n = 0\n"
"```\n"
"\n"
"Finden wir nun als Beweisziel\n"
"\n"
"```\n"
"Goal\n"
"  n = 0\n"
"```\n"
"\n"
"vor, so ändert `apply lem` das Beweisziel zu `n ≤ 0`.\n"
"\n"
"Anders herum, falls wir eine Annahme `g : m ≤ 0` in unseren Annahmen finden, können wir\n"
"diese mit `apply lem at g` zu `g : m = 0` umwandeln.\n"
"\n"
"(Das Lemma ist gemeinhin als `Nat.eq_zero_of_le_zero` bekannt.)"
msgstr ""

#: Game.Doc.Tactic
msgid "`assumption` sucht nach einer Annahme, die genau dem Goal entspricht.\n"
"\n"
"## Beispiel\n"
"\n"
"`assumption` sucht durch die Annahmen und merkt dass `h` genau mit dem Goal übereinstimmt.\n"
"\n"
"```\n"
"Objekte\n"
"  a b c d : ℕ\n"
"  h : a + b = c\n"
"  g : a * b = 16\n"
"  t : c = 12\n"
"Goal\n"
"  a + b = c\n"
"```"
msgstr ""

#: Game.Doc.Tactic
msgid "`by_cases h : P` macht eine Fallunterscheidung. Im ersten Goal wird eine Annahme\n"
"`(h : P)` hinzugefügt, im zweiten `(h : ¬P)`.\n"
"\n"
"## Details\n"
"\n"
"`P` kann eine beliegige Aussage sein, die als entweder wahr oder falsch angenommen wird.\n"
"\n"
"## Beispiel\n"
"\n"
"```\n"
"example (A : Prop) : A ∨ ¬ A := by\n"
"  by_cases h : A\n"
"  · left\n"
"    assumption\n"
"  · right\n"
"    assumption\n"
"```"
msgstr ""

#: Game.Doc.Tactic
msgid "`by_contra h` startet einen Widerspruchsbeweis.\n"
"\n"
"## Details\n"
"Sei `P` das aktuelle Goal. `by_contra h` fügt eine neue Annahme `(h : ¬P)` hinzu\n"
"und setzt das Goal auf `False`.\n"
"\n"
"Oft will man `by_contra` nutzen wenn das Goal von der Form `¬ P` ist.\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* `contradiction` schliesst den Widerspruchsbeweis wenn sich (zwei) Annahmen\n"
"widersprechen.\n"
"* `contrapose` führt einen Beweis durch Kontraposition und ist entsprechend\n"
"in ähnlichen Situationen nutzbar wie `by_contra`"
msgstr ""

#: Game.Doc.Tactic
msgid "`change t` ändert das Goal zu `t`. Voraussetzung ist, dass `t` und das alte Goal defEq sind.\n"
"\n"
"## Details\n"
"\n"
"Dies ist insbesonder hilfreich wenn eine Taktik nicht merkt, dass das Goal defEq ist zu einem\n"
"Term, der eigentlich gebraucht würde.\n"
"\n"
"## Beispiel\n"
"\n"
"Aktuelles Goal:\n"
"\n"
"```\n"
"b: ℝ\n"
"⊢ 1 • b = b\n"
"```\n"
"Wobei die Skalarmultiplikation als `fun (a : ℚ) (r : ℝ) => ↑a * r` definiert war. Dann\n"
"kann man mit `change (1 : ℚ) * b = b` das Goal umschreiben und anschliessend mit Lemmas\n"
"über die Multiplikation beweisen."
msgstr ""

#: Game.Doc.Tactic
msgid "`constructor` teilt ein Beweisziel, das eine Struktur ist, in seine Bestandteile auf.\n"
"\n"
"## Detail\n"
"\n"
"Übliche Anwendungsfälle sind Beweisziele der Form `A ∧ B` sowie Äquivalenzen, also Beweisziele der Form `A ↔ B`.\n"
"Im ersten Fall ersetzt `constructor` das Ziel `A ∧ B` durch die zwei Ziel `A` and `B`, im zweiten Fall ersetzt `constructor` die Äquivalenz durch die beiden Beweisziele `A → B` and `B → A`.\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* Das Gegenteil von `constructor` ist `⟨_, _⟩` (`\\\\<>`), der *anonyme Konstruktor*.\n"
"Dieser enspricht ungefähr der Tupel-Notation in\n"
"\\\"eine Gruppe ist ein Tupel $(G, 0, +)$, sodass …\\\".\n"
"\n"
"## Beispiel\n"
"\n"
"```\n"
"example {A B : Prop} (h : A) (g : B) : A ∧ B := by\n"
"  constructor\n"
"  · assumption\n"
"  · assumption\n"
"```"
msgstr ""

#: Game.Doc.Tactic
msgid "`contradiction` schliesst den Beweis wenn es einen Widerspruch in den Annahmen findet.\n"
"\n"
"## Details\n"
"\n"
"Ein Widerspruch in den Annahmen kann unter anderem folgendermaßen aussehen:\n"
"\n"
"* `(h : n ≠ n)`\n"
"* `(h : A)` und `(h' : ¬A)`\n"
"* `(h : False)` (i.e. ein Beweis von `False`)\n"
"\n"
"## Beispiel\n"
"\n"
"Folgenes Goal wird von `contradiction` bewiesen\n"
"\n"
"```\n"
"Objekte:\n"
"  (n m : ℕ)\n"
"  (h : n = m)\n"
"  (g : n ≠ m)\n"
"Goal\n"
"  37 = 60\n"
"```\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* Normalerweise wird `contradiction` gebraucht um einen Widerspruchsbeweis zu\n"
"  schliessen, der mit `by_contra` eröffnet wurde.\n"
"* Ein Beweis von `False` representiert in Lean einen Widerspruch.\n"
"  nach dem Motto \\\"ein Widerspruch beweist alles.\\\""
msgstr ""

#: Game.Doc.Tactic
msgid "`contrapose` ändert ein Goal der Form `A → B` zu `¬B → ¬A` und führt damit\n"
"eine Beweis durch Kontraposition.\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* `revert h` kann nützlich sein um eine Annahme als Implikationsprämisse zu schreiben bevor man\n"
"  `contrapose` verwendet."
msgstr ""

#: Game.Doc.Tactic
msgid "`exact h` schliesst das Goal wenn der Term `h` mit dem Goal übereinstimmt."
msgstr ""

#: Game.Doc.Tactic
msgid "`fin_cases i` führt eine Fallunterscheidung wenn `i` ein endlicher Typ ist.\n"
"\n"
"## Details\n"
"`fin_cases i` ist insbesondere nützlich für `(i : Fin n)`, zum Beispiel als Index in\n"
"endlich dimensionalen Vektorräumen.\n"
"\n"
"In diesem Fall bewirkt `fin_cases i` dass man Komponentenweise arbeitet."
msgstr ""

#: Game.Doc.Tactic
msgid "`funext x` wird bei Gleichungen von Funktionen `f = g` gebraucht. Das Goal wird zu\n"
"`f x = g x`.\n"
"\n"
"## Details\n"
"Nach dem Motto `f = g ↔ ∀ x, f x = g x` sind zwei Funktionen dann identisch, wenn sie\n"
"angewendet auf jedes Element identisch sind. `funext x` benutzt dieses Argument."
msgstr ""

#: Game.Doc.Tactic
msgid "`have h : P` führt ein Zwischenresultat ein.\n"
"\n"
"## Details\n"
"Anschliessend muss man zuerst dieses Zwischenresultat beweisen bevor man mit dem Beweis\n"
"weitermachen und das Zwischenresultat verwenden kann.\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* `suffices h : P` funktioniert genau gleich, außer dass die beiden entstehenden Beweise\n"
"  vertauscht sind.\n"
"* `let h : Prop := A ∧ B` ist verwandt mit `have`, mit Unterschied, dass man mit `let`\n"
"  eine temporäre Definition einführt."
msgstr ""

#: Game.Doc.Tactic
msgid "`induction n` führt einen Induktionsbeweis über `n`.\n"
"\n"
"## Detail\n"
"\n"
"Diese Taktik erstellt zwei Goals:\n"
"* Induktionsanfang, wo `n = 0` ersetzt wird.\n"
"* Induktionsschritt, in dem man die Induktionshypothese `n_ih` zur Verfügung hat.\n"
"\n"
"## Modifikationen in diesem Spiel\n"
"\n"
"* `induction n with d hd` benennt Induktionsvariable und -hypothese. (das ist Lean3-Syntax)\n"
"und funktioniert außerhalb vom Spiel nicht genau so.\n"
"* Außerhalb des Spiels kriegst du `Nat.zero` und `Nat.succ n` anstatt `0` und `n + 1`\n"
"als Fälle. Diese\n"
"Terme sind DefEq, aber manchmal benötigt man die lemmas `zero_eq` und `Nat.succ_eq_add_one`\n"
"um zwischen den schreibweisen zu wechseln\n"
"\n"
"Der richtige Lean4-Syntax für `with` streckt sich über mehrere Zeilen und ist:\n"
"\n"
"```\n"
"induction n with\n"
"| zero =>\n"
"  sorry\n"
"| succ m m_ih =>\n"
"  sorry\n"
"```\n"
"\n"
"da dieser sich über mehrere Zeilen erstreckt wird er im Spiel nicht eingeführt.\n"
"\n"
"## Hifreiche Resultate\n"
"\n"
"* `Nat.succ_eq_add_one`: schreibt `n.succ = n + 1` um.\n"
"* `Nat.zero_eq`: schreibt `Nat.zero = 0` um.\n"
"\n"
"Beide sind DefEq, aber manche Taktiken können nicht damit umgehen\n"
"\n"
"* Siehe Definition `∑` für Hilfe mit Induktion über Summen.\n"
"* `obtain ⟨⟩ := n` ist sehr ähnlich zu `induction n`. Der Unterschied ist, dass bei\n"
"`obtain` keine Induktionshypothese im Fall `n + 1` zur Verfügung steht.\n"
"\n"
"## Beispiel\n"
"\n"
"```\n"
"example (n : ℕ) : 4 ∣ 5^n + 7 := by\n"
"  induction n\n"
"  sorry      -- Fall `n = 0`\n"
"  sorry      -- Fall `n + 1`\n"
"```"
msgstr ""

#: Game.Doc.Tactic
msgid "`intro x` wird für Goals der Form `A → B` oder `∀ x, P x` verwendet.\n"
"Dadurch wird die Implikationsprämisse (oder das Objekt `x`) den Annahmen hinzugefügt.\n"
"\n"
"## Beispiele\n"
"\n"
"```\n"
"Goal:\n"
"  ∀ (m n : ℕ), n ≤ m ∨ m ≤ n\n"
"```\n"
"\n"
"die Taktik `intro a n` führt 2 Variablen ein und gibt diesen die Namen `a` und `n`:\n"
"\n"
"```\n"
"Objekte:\n"
"  a n : ℕ\n"
"Goal:\n"
"  n ≤ a ∨ a ≤ n\n"
"```\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* `revert h` macht das Gegenteil von `intro`."
msgstr ""

#: Game.Doc.Tactic
msgid "Wenn das Goal von der Form `A ∨ B` ist, enscheidet man mit `left` die linke Seite zu zeigen.\n"
"\n"
"## Beispiele\n"
"\n"
"Folgendes Beispiel kann mit `left` und `assumption` gelöst werden.\n"
"```\n"
"Objekte:\n"
"  ha : A\n"
"Goal:\n"
"  A ∨ B\n"
"```\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* `right` entscheidet sich für die right Seite."
msgstr ""

#: Game.Doc.Tactic
msgid "`let x : ℕ := 5 ^ 2` führt eine neue temporäre Definition ein.\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* `have x : ℕ := 5 ^ 2` führt ebenfalls eine neue natürliche Zahle `x` ein, aber\n"
"  Lean vergisst sofort, wie die Zahl definiert war. D.h. `x = 25` wäre dann nicht\n"
"  beweisbar. Mit `let x : ℕ := 5 ^ 2` ist `x = 25` durch `rfl` beweisbar.\n"
"* `set x : ℕ := 5 ^ 2` macht das Gleiche wie `let` aber versucht auch `x` im Goal überall einzusetzen wo `5 ^ 2` steht."
msgstr ""

#: Game.Doc.Tactic
msgid "`set f := _` funktioniert wie `let` aber versucht auch `f` im Goal überall einzusetzen."
msgstr ""

#: Game.Doc.Tactic
msgid "`linarith` löst Systeme linearer (Un-)Gleichungen.\n"
"\n"
"## Detail\n"
"`linarith` kann lineare Gleichungen und Ungleichungen beweisen indem\n"
"es das Gegenteil vom Goal annimmt und versucht einen Widerspruch in den\n"
"Annahmen zu erzeugen (Widerspruchsbeweis). Es braucht ein `≤` definiert um\n"
"zu funktionieren.\n"
"\n"
"## Beispiel\n"
"\n"
"Folgendes kann `linarith` beweisen.\n"
"```\n"
"Objekte\n"
"  x y : ℤ\n"
"  h₁ : 5 * y ≤ 35 - 2 * x\n"
"  h₂ : 2 * y ≤ x + 3\n"
"Goal\n"
"  y ≤ 5\n"
"```"
msgstr ""

#: Game.Doc.Tactic
msgid "`push_neg` schreibt `¬∀ x, _` zu `∃ x, ¬ _` und `¬∃ x, _` zu `∀x, ¬ _` um.\n"
"\n"
"## Details\n"
"\n"
"`push_neg` schiebt das `¬` soweit nach innen wie möglich.\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* Die beiden Lemmas heissen `not_forall` und `not_exists` und können mit `rw` einzeln angewendet\n"
"  werden.\n"
"\n"
"## Beispiel\n"
"\n"
"```\n"
"Objekte:\n"
"  x : ℝ\n"
"  f : ℝ → ℝ\n"
"Goal:\n"
"  ¬ ∀ ε, ∃ δ, ∀ y, | x - y | < δ → | f x - f y | < ε\n"
"```\n"
"\n"
"`push_neg` wandelt dies in folgendes Goal um:\n"
"\n"
"```\n"
"Objekte:\n"
"  x : ℝ\n"
"  f : ℝ → ℝ\n"
"Goal:\n"
"  ∃ ε, ∀ δ, ∃ y, ¬ (| x - y | < δ → | f x - f y | < ε)\n"
"```"
msgstr ""

#: Game.Doc.Tactic
msgid "`obtain ⟨⟩ := h` teilt eine Annahme `h` in ihre Einzelteile auf.\n"
"\n"
"## Details\n"
"Für Annahmen die Strukturen sind, wie z.B. `h : A ∧ B` (oder `∃x, P x`) kann man die\n"
"Einzelteile mit  `obtain ⟨a, b⟩ := h` benennen.\n"
"\n"
"Für eine Annahme der Form `h : A ∨ B` kann man mit `obtain ha | hb := h` zwei Goals\n"
"erzeugen, einmal unter Annahme der linken Seite, einmal unter Annahme der Rechten.\n"
"\n"
"Die Wildcard `obtain ⟨⟩ := h` entscheidet selbständig, welcher Fall vorliegt und\n"
"benennt die entehenden Annahmen.\n"
"\n"
"## Beispiele\n"
"\n"
"```\n"
"Annahmen:\n"
"  h : A ∧ B\n"
"  g : A → C ∨ B → C\n"
"Goal:\n"
"  C\n"
"```\n"
"\n"
"wenn man hier `obtain ⟨h₁, h₂⟩ := h` und danach `obtain g₁ | g₂ := g` benützt, kriegt man\n"
"zwei Goals:\n"
"\n"
"```\n"
"Annahmen:\n"
"  h₁ : A\n"
"  h₂ : B\n"
"  g₁ : A → C\n"
"Goal:\n"
"  C\n"
"```\n"
"\n"
"```\n"
"Annahmen:\n"
"  h₁ : A\n"
"  h₂ : B\n"
"  g₂ : B → C\n"
"Goal:\n"
"  C\n"
"```\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* Für `n : ℕ` hat `obtain ⟨⟩ := n` einen ähnlichen Effekt wie `induction n` mit dem Unterschied,\n"
"  dass im Fall `n + 1` keine Induktionshypothese zur Verfügung steht."
msgstr ""

#: Game.Doc.Tactic
msgid "`refine' { .. }` wird benötigt um eine Struktur (z.B. ein $R$-Modul) im Taktikmodus in einzelne\n"
"Goals aufzuteilen. Danach hat man ein Goal pro Strukturfeld.\n"
"\n"
"(*Bemerkung*: Es gibt in Lean verschiedenste bessere Varianten dies zu erreichen,\n"
"z.B. \\\"Term Modus\\\" oder \\\"anonyme Konstruktoren\\\", aber für den Zweck des Spieles bleiben wir\n"
"bei diesem Syntax.)"
msgstr ""

#: Game.Doc.Tactic
msgid "`revert h` fügt die Annahme `h` als Implikationsprämisse vorne ans Goal an.\n"
"\n"
"## Beispiel\n"
"\n"
"```\n"
"Objekte:\n"
"  A B : Prop\n"
"Annahmen:\n"
"  h : A\n"
"  g : A → B\n"
"Goal:\n"
"  B\n"
"```\n"
"\n"
"In diesem Fall bewirkt `revert h`, dass `h` aus den Annahmen vorne als `A →` ans Goal angefügt wird:\n"
"\n"
"```\n"
"Objekte:\n"
"  A B : Prop\n"
"Annahmen:\n"
"  g : A → B\n"
"Goal:\n"
"  a → B\n"
"```\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* `revert` ist das Gegenteil von `intro`.\n"
"* `revert` kann insbesondere nützlich sein, um anschliessend `contrapose` zu verwenden.\n"
"\n"
"## Beispiel\n"
"\n"
"```\n"
"Objekte\n"
"  A P : Prop\n"
"  h : P\n"
"Goal\n"
"  A\n"
"```\n"
"\n"
"hier ändert `revert h` das Goal zu\n"
"\n"
"```\n"
"Objekte\n"
"  A P : Prop\n"
"Goal\n"
"  P → A\n"
"```"
msgstr ""

#: Game.Doc.Tactic
msgid "`rfl` beweist ein Goal der Form `X = X`.\n"
"\n"
"## Detail\n"
"\n"
"`rfl` beweist jedes Goal `A = B` wenn `A` und `B` per Definition das gleiche sind (DefEq).\n"
"Andere Taktiken rufen `rfl` oft am Ende versteckt\n"
"automatisch auf um zu versuchen, den Beweis zu schliessen.\n"
"\n"
"\n"
"## Beispiel\n"
"`rfl` kann folgende Goals beweisen:\n"
"\n"
"```\n"
"Objekte\n"
"  a b c : ℕ\n"
"Goal:\n"
"  (a + b) * c = (a + b) * c\n"
"```\n"
"\n"
"```\n"
"Objekte\n"
"  n : ℕ\n"
"Goal\n"
"  1 + 1 = 2\n"
"```\n"
"denn Lean liest dies intern als `0.succ.succ = 0.succ.succ`."
msgstr ""

#: Game.Doc.Tactic
msgid "Wenn das Goal von der Form `A ∨ B` ist, enscheidet man mit `right` die rechte Seite zu zeigen.\n"
"\n"
"## Beispiele\n"
"\n"
"Folgendes Beispiel kann mit `right` und `assumption` gelöst werden.\n"
"```\n"
"Objekte:\n"
"  hB : B\n"
"Goal:\n"
"  A ∨ B\n"
"```\n"
"\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* `left` entscheidet sich für die linke Seite."
msgstr ""

#: Game.Doc.Tactic
msgid "Löst Gleichungen mit den Operationen `+, -, *, ^`.\n"
"\n"
"## Details\n"
"Insbesondere funktioniert `ring` in Ringen/Semiringen wie z.B. `ℕ, ℤ, ℚ, …`\n"
"(i.e. Typen `R` mit Instanzen `Ring R` oder `Semiring R`).\n"
"Die Taktik ist besonders auf kommutative Ringe (`CommRing R`) ausgelegt.\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* `ring` kann nicht wirklich mit Division (`/`) oder Inversen (`⁻¹`) umgehen. Dafür ist die\n"
"  Taktik `field_simp` gedacht, und die typische Sequenz ist\n"
"  ```\n"
"  field_simp\n"
"  ring\n"
"  ```\n"
"\n"
"### Beispiel\n"
"\n"
"\n"
"Dieses Goal kann mit der Taktik `ring` gelöst werden:\n"
"\n"
"```\n"
"Goal:\n"
"  1 + n * 2 + n + 12 = 3 * n + 13\n"
"```"
msgstr ""

#: Game.Doc.Tactic
msgid "Wenn man eine Annahme `(h : X = Y)` hat, kann man mit\n"
"`rw [h]` alle `X` im Goal durch `Y` ersetzen.\n"
"\n"
"## Details\n"
"\n"
"* `rw [←h]` wendet `h` rückwärts an und ersetzt alle `Y` durch `X`.\n"
"* `rw [h, g, ←f]`: Man kann auch mehrere `rw` zusammenfassen.\n"
"* `rw [h] at h₂` ersetzt alle `X` in `h₂` zu `Y` (anstatt im Goal).\n"
"* `rw [my_theorem]` sucht nach dem ersten Ort, wo es umschreiben kann um die Impliziten\n"
"  Argumente von `my_theorem` zu füllen\n"
"* `nth_rw 2 [my_theorem]` ist eine Variante, die stattdessen am 2. Ort umschreibt.\n"
"\n"
"`rw` funktioniert gleichermaßen mit Annahmen `(h : X = Y)` also auch\n"
"mit Theoremen/Lemmas der Form `X = Y`\n"
"\n"
"## Beispiel\n"
"\n"
"```\n"
"Objekte:\n"
"  m n : ℕ\n"
"  f g : ℕ → ℕ\n"
"Annahmen:\n"
"  h₁ : m = n\n"
"  h₂ : f = g\n"
"Goal:\n"
"  f m = g n\n"
"```\n"
"\n"
"`rw [h₂]` schreibt das Goal zu `g n = g m` um, ein weiteres `rw [h₁]` dann zu `g m = g m`, was es\n"
"direkt auch schließt."
msgstr ""

#: Game.Doc.Tactic
msgid "(shouldn't be visible to the player!)"
msgstr ""

#: Game.Doc.Tactic
msgid "`simp` versucht alle Vereinfachungslemmas anzuwenden, die in der `mathlib` mit `@[simp]`\n"
"gekennzeichnet sind.\n"
"\n"
"## Details\n"
"\n"
"* `simp?` zeigt welche Lemmas verwendet wurden.\n"
"* `simp [my_lemma]` fügt zudem `my_lemma` temporär zur Menge der `simp`-Lemmas hinzu.\n"
"* ein `simp`, das nicht am Ende des Beweis steht sollte durch eine entsprechende\n"
"  `simp only [...]` Aussage ersetzt werden, um den Beweis stabiler zu machen."
msgstr ""

#: Game.Doc.Tactic
msgid "`simp_rw [h₁, h₂, h₃]` versucht wie `rw` jedes Lemma der Reihe nach zu Umschreiben zu verwenden,\n"
"verwendet aber jedes Lemma so oft es kann.\n"
"\n"
"## Details\n"
"\n"
"Es bestehen aber drei grosse Unterschiede zu `rw`:\n"
"\n"
"* `simp_rw` wendet jedes Lemma so oft an wie es nur kann.\n"
"* `simp_rw` kann besser unter Quantifiern umschreiben als `rw`.\n"
"* `simp_rw` führt nach jedem Schritt ein `simp only []` aus und vereinfacht dadurch grundlegenste\n"
"  Sachen."
msgstr ""

#: Game.Doc.Tactic
msgid "`suffices h : P` führt ein neues Zwischenresultat ein, aus dem das Goal direkt folgen soll.\n"
"\n"
"## Details\n"
"\n"
"Der einzige Unterschied zu `have h : P` ist, dass die beiden resultierenden Goals vertauscht sind.\n"
"\n"
"Mathematisch braucht man diese in ein bisschen unterschiedlichen Fällen:\n"
"\n"
"* `suffices h : P` : \\\"Es genügt zu zeigen, dass …\\\". Als erstes folgt die Erklärung wieso\n"
"  das genügt, danach muss man nur noch `P` beweisen.\n"
"* `have h : P` : Ein (kleines) Zwischenresultat. Als erstes folgt dann der Beweis dieses\n"
"Resultats, anschliessend setzt man den Beweis mit Hilfe des Zwischenresultats fort."
msgstr ""

#: Game.Doc.Tactic
msgid "`symm` (für \"symmetry\") kann Gleichheiten oder `↔` umdrehen. `symm at h` dreht eine Gleichheit\n"
"(oder `↔`) in der Annahme `h`.\n"
"\n"
"## Details\n"
"\n"
"Man kann auch `h.symm` für die gedrehte Annahme schreiben, wenn man diese irgendwo\n"
"verwendet. Das verwendet intern die Lemmata\n"
"`Eq.symm` oder `Iff.symm`.\n"
"\n"
"## Beispiel\n"
"\n"
"ist das Goal `x = y`, dann wandelt es `symm` in `y = x` um. Analog, wandelt `symm at h` die Annahme\n"
"`(h : z = w)` in `(h : w = z)` um."
msgstr ""

#: Game.Doc.Tactic
msgid "Wenn man `X = Z` zeigen möchte, kann man mit\n"
"`trans Y` einen Zwischenschritt `Y` einfügen.\n"
"Zu zeigen sind dann also `X = Y`  und `Y = Z`.\n"
"\n"
"## Details\n"
"`trans` ist besondern gut geeignet, um eine Gleichung `X = Z `\n"
"durch eine „Rechnung“ der Form `X = Y₁ = Y₂ = Y₃ … = Z` Schritt für Schritt nachzuweisen:\n"
"\n"
"* `trans Y₁`\n"
"* Beweis von `X = Y₁`\n"
"* `trans Y₂`\n"
"* Beweis von `Y₁ = Y₂`\n"
"* `trans Y₃`\n"
"* …\n"
"* Beweis von `… = Z`\n"
"\n"
"Genauso wie für Gleichungen `X = Z` funktioniert `trans` auch für Äquivalenzen `X ↔ Z` und gewisse\n"
"transitive Relationen im Beweisziel.\n"
"\n"
"## Beispiel\n"
"\n"
"```\n"
"Objekte:\n"
"  A B C : Prop\n"
"Annahmen:\n"
"  h₁ : A ↔ B\n"
"  h₂ : B ↔ C\n"
"Goal:\n"
"  A ↔ C\n"
"```\n"
"\n"
"Die Taktik `trans B` erstellt dann aus dem Goal zwei neue `A ↔ B` und `B ↔ C`."
msgstr ""

#: Game.Doc.Tactic
msgid "`decide` kann Aussagen beweisen, für die es einen einfachen Algorithmus\n"
"gibt, der die Wahr- oder Falschheit der Aussage bestimmt.\n"
"\n"
"Wichtige Beispiele sind:\n"
"\n"
"* `True`\n"
"* Aussagen zu konkreten Zahlen, wie `Even 4`, `2 ≤ 5`, `4 ≠ 6`, …\n"
"\n"
"\n"
"## Details\n"
"\n"
"Konkret sucht `decide` für eine Aussage `P`  nach einer Instanz `Decidable P`\n"
"welche dann evaluiert entweder wahr oder falsch rausgibt.\n"
"\n"
"## Beispiel\n"
"\n"
"Folgendes kann mit `decide` gelöst werden:\n"
"\n"
"```\n"
"Goal:\n"
"  ¬ Odd 40\n"
"```"
msgstr ""

#: Game.Doc.Tactic
msgid "`unfold myDef` öffnet eine Definition im Goal.\n"
"\n"
"## Details\n"
"Bis auf DefEq (definitinal equality) ändert `unfold` nichts, manche Taktiken\n"
"(z.B. `push_neg`, `rw`) brauchen aber manchmal die Hilfe.\n"
"\n"
"`unfold myDef at h` kann auch Definitionen in Annahmen öffnen\n"
"\n"
"## Hilfreiche Resultate\n"
"\n"
"* `unfold f` kann insbesondere nötig sein, wenn man danach `rw` benützt,\n"
"  da `rw` nicht durch Definitionen hindurch sieht.\n"
"* `unfold f` oder `simp only [f]` machen praktisch das Gleiche.\n"
"* Im Moment kennt Mathlib auch noch `unfold_let`: `unfold` ist für Definitionen, `unfold_let`\n"
"  für `let`-Statements.\n"
"* `change _` ist eine andere Taktik (nicht im Spiel), die das aktuelle Goal in einen DefEq-Ausdruck\n"
"  umschreibt. Diese Taktik braucht man auch manchmal um zu hacken, wenn Lean Mühe hat etwas zu verstehen.\n"
"\n"
"## Beispiel\n"
"\n"
"```\n"
"Goal:\n"
"  Even 0\n"
"```\n"
"\n"
"Auch wenn `rfl` dieses Goal lösen kann, kann es nützlich sein `unfold Even` zu benützen um die\n"
"Definition hinter `Even` zu sehen."
msgstr ""

#: Game.Doc.Tactic
msgid "Wenn das Goal von der Form `∃x, P x` ist, kann man mit `use n` ein konkretes Element angeben\n"
"mit dem man das Goal beweisen möchte.\n"
"\n"
"## Details\n"
"\n"
"`use n` versucht zudem anschliessend `rfl` aufzurufen, und kann das Goal damit manchmal direkt\n"
"schließen.\n"
"\n"
"## Beispiel\n"
"\n"
"```\n"
"Goal:\n"
"  ∃ x, x + 3 = 4\n"
"```\n"
"\n"
"hier würde man `use 1` benützen."
msgstr ""

#: Game.Doc.Tactic
msgid "`tauto` proves all logical tautologies.\n"
"\n"
"## Beispiel\n"
"\n"
"Folgendes Goal ist mit `tauto` lösbar\n"
"\n"
"```\n"
"Objekte:\n"
"  (A B C : Prop)\n"
"Goal:\n"
"  ¬((¬B ∨ ¬ C) ∨ (A → B)) → (¬A ∨ B) ∧ ¬ (B ∧ C)\n"
"```"
msgstr ""

#: Game.Doc.Theorem
msgid "Die Taktiken `tauto` oder `simp` können oft stattdessen verwendet werden."
msgstr ""

#: Game.Doc.Theorem
msgid "Oft kann `tauto` diese Art von logischen Ausdrücken lösen."
msgstr ""

#: Game.Levels.Logos.L01_Tauto
msgid "Automatisierung"
msgstr ""

#: Game.Levels.Logos.L01_Tauto
msgid "Gerade seid Ihr auf Königin *Logisindes* Planeten. Sie kommt ohne Umschweife zum Punkt:\n"
"\n"
"**Logisinde**: Werte Wesen aus fremden Welten, gestatten Sie eine Frage. Warum gilt …\n"
"\n"
"Und sie kritzelt etwas auf ein Stück Papier: oben ein paar Annahmen, unten eine Schlussfolgerung.\n"
"Dazwischen sollst du offenbar einen Beweis eintragen.\n"
"Du siehst Robo hilflos an."
msgstr ""

#: Game.Levels.Logos.L01_Tauto
msgid ""
msgstr ""

#: Game.Levels.Logos.L01_Tauto
msgid "**Robo**: Das ist ganz einfach. Mit `«{A}» «{B}» «{C}» : Prop` meint sie:\n"
"`«{A}»`, `«{B}»` und `«{C}»` sind irgendwelche Aussagen (*propositions*).\n"
"Und mit `→` meint sie ⇒, also “impliziert”. Die anderen Symbole kennst du, oder?\n"
"\n"
"**Du**: Ehhm, ja. Aber da muss ich jetzt trotzdem erst einmal überlegen.\n"
"\n"
"**Robo**: (flüsternd) Behaupte doch einfach, dass sei eine Tautologie.\n"
"\n"
"**Du**: Ernsthaft?\n"
"\n"
"**Robo**: Ja. Schreib einfach `tauto`.\n"
"\n"
"**Robo**: Mach schon …"
msgstr ""

#: Game.Levels.Logos.L01_Tauto
msgid "**Logisinde**: (etwas konsterniert) Ja, das ist streng genommen richtig.\n"
"Aber glaubt bloß nicht, dass Ihr damit auf *diesem* Planeten viel weiterkommt!\n"
"Meine Untertanen verstehen `tauto` nicht. Da müsst Ihr Euch schon etwas mehr anstrengen."
msgstr ""

#: Game.Levels.Logos.L02_Rfl
msgid "Aller Anfang ist... ein Einzeiler?"
msgstr ""

#: Game.Levels.Logos.L02_Rfl
msgid "In der Zwischenzeit hat bereits sich eine lange Schlange Untertanen gebildet, die gern ihren\n"
"Fragen stellen würden. Logisinde winkt den ersten nach vorn. Er räuspert sich.\n"
"\n"
"**Untertan**: Warum ist $42 = 42$?\n"
"\n"
"Du schaust ihn fassungslos an.\n"
"Er schreibt es dir wieder auf."
msgstr ""

#: Game.Levels.Logos.L02_Rfl
msgid "**Robo**: Ist doch klar. Du musst ihn einfach daran erinnern,\n"
"dass Gleichheit *reflexiv* ist. Probier mal `rfl`."
msgstr ""

#: Game.Levels.Logos.L02_Rfl
msgid "**Untertan**: Ah, richtig. Ja, Sie haben ja so recht. Das vergesse ich immer. Rfl, rfl, rfl …"
msgstr ""

#: Game.Levels.Logos.L03_Assumption
msgid "Annahmen"
msgstr ""

#: Game.Levels.Logos.L03_Assumption
msgid "Während der erste Untertan noch rfl, rfl, rfl murmelt, tritt schon der nächste nach vorne.\n"
"Es ist schüchtern und schreibt bloß."
msgstr ""

#: Game.Levels.Logos.L03_Assumption
msgid "**Robo**: `«{n}» : ℕ` bedeutet, `«{n}»` ist eine natürliche Zahl.\n"
"\n"
"**Du**: Warum schreibt er dann nicht `«{n}» ∈ ℕ`??\n"
"\n"
"**Robo**: Weil das hier alles komische Typen sind … Ich kann dir das später mal in Ruhe\n"
"erklären. Jetzt will ich erst einmal die Frage entschlüsseln.\n"
"\n"
"**Robo**: Also, `«{h₁}»`, `«{h₂}»`, `«{h₃}»` sind einfach nur Namen für verschiedene Annahmen,\n"
"und zwar für die Annahme `n < 10`, `1 < n` und `n ≠ 5`. Beweisen sollen wir: `1 < n`.\n"
"\n"
"**Du**: Aber das war doch gerade eine der Annahmen.\n"
"\n"
"**Robo**: Ja, stimmt.\n"
"\n"
"**Du**: ???\n"
"\n"
"**Robo**: Du musst ihm das halt explizit sagen. Probiers mal mit `assumption`."
msgstr ""

#: Game.Levels.Logos.L03_Assumption
msgid "**Untertan**: Ja richtig! Wenn Ihr nur wüsstet, was ich mir an dieser Frage schon den Kopf\n"
"zerbrochen habe!"
msgstr ""

#: Game.Levels.Logos.L04_Assumption
msgid "Logische Aussagen"
msgstr ""

#: Game.Levels.Logos.L04_Assumption
msgid "Ein dritter Untertan kommt mit folgendem Problem."
msgstr ""

#: Game.Levels.Logos.L04_Assumption
msgid "**Robo**: Hier bedeutet `«{A}» : Prop` wieder, dass `«{A}»` irgendeine Aussage ist.\n"
"Und `«{hA}»` ist eine Name für die Annahme, dass `«{A}»` wahr ist.\n"
"\n"
"**Du**: Und unter dieser Annahme sollen wir jetzt `«{A}»` beweisen?\n"
"\n"
"**Robo**: Ja. Da kommst du jetzt selbst drauf, wie das geht, oder?"
msgstr ""

#: Game.Levels.Logos.L04_Assumption
msgid "**Robo**: Ist doch genau wie eben:\n"
"die Aussage, die zu beweisen ist, gehört selbst zu den Annahmen.\n"
"Also wird `assumption` auch wieder funktionieren."
msgstr ""

#: Game.Levels.Logos.L04_Assumption
msgid "**Untertan**: Das ging ja schnell. Super! Vielen Dank."
msgstr ""

#: Game.Levels.Logos.L05_True
msgid "True or False"
msgstr ""

#: Game.Levels.Logos.L05_True
msgid "Der nächste Untertan in der Reihe ist ein Schelm."
msgstr ""

#: Game.Levels.Logos.L05_True
msgid "**Robo**: Dieses `True` ist eine spezielle Aussage, nämlich die Aussage, die immer und\n"
"bedingungslos wahr ist.\n"
"\n"
"**Du**: Und was genau ist dann zu beweisen?\n"
"\n"
"**Robo**: Ich glaube, nichts. Probier mal `decide`."
msgstr ""

#: Game.Levels.Logos.L05_True
msgid "**Schelm**: Wollte nur mal sehen, dass Ihr nicht auf den Kopf gefallen seid …\n"
"\n"
"**Du** *(zu Robo)*: Können wir nicht einfach immer dieses `decide` verwenden?\n"
"\n"
"**Robo**: Nein, `decide` funktioniert nur in speziellen Situationen, in denen es einen\n"
"einfachen Algorithmus gibt, der entscheidet, ob die Aussage wahr ist."
msgstr ""

#: Game.Levels.Logos.L06_Not
msgid "Not"
msgstr ""

#: Game.Levels.Logos.L06_Not
msgid "Der Schelm hat noch eine Schwester dabei."
msgstr ""

#: Game.Levels.Logos.L06_Not
msgid "**Robo**: Dieses Zeichen `¬` bedeutet Negation. Also wenn eine Aussage `(A : Prop)`\n"
"wahr ist, dann ist `¬A` falsch, und umgekehrt.\n"
"\n"
"**Du**: Und `False` ist wahrscheinlich die Aussage, die immer falsch ist?\n"
"\n"
"**Robo**: Ja, richtig.\n"
"\n"
"**Du**: Ist das jetzt nicht doch wieder `decide`?\n"
"\n"
"**Robo**: Probier mal!"
msgstr ""

#: Game.Levels.Logos.L06_Not
msgid "Die Schwester lacht und eilt ihrem Bruder hinterher."
msgstr ""

#: Game.Levels.Logos.L07_Contradiction
msgid "Aus Falschem folgt vieles."
msgstr ""

#: Game.Levels.Logos.L07_Contradiction
msgid "Als nächstes kommen drei Querulanten. Der erste hat folgendes Problem:"
msgstr ""

#: Game.Levels.Logos.L07_Contradiction
msgid "**Du** Wenn ich das jetzt richtig lese, ist `«{A}»` eine Aussage,\n"
"und wir haben außerdem eine Annahme names `«{h}»`, die besagt …\n"
"\n"
"**Robo**: … die besagt, dass `False` gilt.\n"
"\n"
"**Du**: Ich dachte, `False` gilt nie?\n"
"\n"
"**Robo**: Ja, genau. Die Annahme ist `False`, also falsch.\n"
"Und aus einer falschen Annahme kann man bekanntlich alles beweisen!\n"
"Insbesondere die gesuchte Aussage `«{A}»`.\n"
"\n"
"**Du**: Und wie erkläre ich das jetzt diesem Formalosophen?\n"
"\n"
"**Robo**: Ich glaube, du musst ihn darauf hinweisen, dass zwischen der allgemeingültigen\n"
"Annahme `True` und seiner Annahme `False` ein Widerspruch besteht. Probier mal `contradiction`."
msgstr ""

#: Game.Levels.Logos.L07_Contradiction
msgid "Der erste Querulant ist offenbar zufrieden.\n"
"\n"
"**Du**: War das jetzt ein Widerspruchsbeweis?\n"
"\n"
"**Robo**: Nein, nein, ein Widerspruchsbeweis sieht anders aus. Das Argument hier war:\n"
" wir haben eine `contradiction` in unserem Annahmen, also folgt jede beliebige Aussage."
msgstr ""

#: Game.Levels.Logos.L08_Contradiction
msgid "Aus Falschem folgt vieles."
msgstr ""

#: Game.Levels.Logos.L08_Contradiction
msgid "Auftritt zweiter Querulant."
msgstr ""

#: Game.Levels.Logos.L08_Contradiction
msgid ""
msgstr ""

#: Game.Levels.Logos.L08_Contradiction
msgid "**Du** Ist `«{n}» ≠ «{n}»` nicht auch ein Widerspruch?\n"
"\n"
"**Robo**: Probiers mal!"
msgstr ""

#: Game.Levels.Logos.L08_Contradiction
msgid "**Du**: Ja, scheint funktioniert zu haben.\n"
"\n"
"**Du**: Aber irgendwie kommt mir das immer noch ein wenig suspekt vor.\n"
"Jetzt habe ich bewiesen, dass eine beliebige natürliche Zahl gleich 37 ist?\n"
"\n"
"**Robo**: Nein, nicht doch. Nur eine beliebige Zahl, die ungleich sich selbst ist, ist gleich 37.\n"
"Und gleich 38, und gleich 39, …\n"
"\n"
"**Du**: Okay, okay, verstehe."
msgstr ""

#: Game.Levels.Logos.L09_Contradiction
msgid "Aus Falschem folgt vieles."
msgstr ""

#: Game.Levels.Logos.L09_Contradiction
msgid "Auftritt dritter Querulant."
msgstr ""

#: Game.Levels.Logos.L09_Contradiction
msgid ""
msgstr ""

#: Game.Levels.Logos.L09_Contradiction
msgid "**Du** Wieder ein Widerspruch in den Annahmen?\n"
"\n"
"**Robo**: Ich sehe, du hast langsam den Dreh raus."
msgstr ""

#: Game.Levels.Logos.L09_Contradiction
msgid "**Robo**: Gut gemacht. Bei dieser Frage ist auch ein bisschen offensichtlicher,\n"
"worin der Widerspruch besteht: Die Annahme `n ≠ 10` ist genau die Negation von `n = 10`.\n"
"Man muss `≠` immer als `¬(· = ·)` lesen."
msgstr ""

#: Game.Levels.Logos.L10_And
msgid "Und"
msgstr ""

#: Game.Levels.Logos.L10_And
msgid "Der nächste Formalosoph in der Reihe hat seine Frage bereits mitgebracht.\n"
"Er legt sie uns vor, setzt sich hin und häkelt."
msgstr ""

#: Game.Levels.Logos.L10_And
msgid ""
msgstr ""

#: Game.Levels.Logos.L10_And
msgid "**Du**: Also, wir haben zwei Annahmen: `«{A}»` gilt, und `«{B}»` gilt auch. Und beweisen sollen wir\n"
"dass `«{A}» und «{B}»` gilt. Ich glaube, diese Formalospinner treiben mich noch zur Verzweiflung.\n"
"Kann ich nicht wieder `trivial` sagen?\n"
"\n"
"**Robo**: Nee, diesmal wird das nicht funktionieren.\n"
"Du musst das Beweisziel einfach in zwei Teile zerlegen. Probier mal `constructor`.\n"
"\n"
"**Du**: Du meinst, `destructor`??\n"
"\n"
"**Robo**: Nein, `constructor`. Ich weiß, das ist verwirrend,\n"
"aber die nennen das hier so weil man die Aussage aus mehreren Teilen\n"
"konstruieren kann."
msgstr ""

#: Game.Levels.Logos.L10_And
msgid "**Robo**: Schau mal, das ist Zauberpapier.\n"
"Jetzt haben wir auf einmal zwei Beweisziele.\n"
"Hier ist dast Ziel `«{B}»`.\n"
"Ich glaube, du weißt schon, wie man die jeweils erreicht.\n"
"Die Ziele stehen ja jeweils in den *Annahmen*."
msgstr ""

#: Game.Levels.Logos.L10_And
msgid "**Robo**: Super!\n"
"\n"
"Ihm scheinen diese Fragen inzwischen Spaß zu machen.\n"
"\n"
"**Robo**: Meinst du, dieser Hebel, an dem \"Editor mode\" steht, ist echt?\n"
"Oder ist der nur gemalt? Probier mal!"
msgstr ""

#: Game.Levels.Logos.L11_And
msgid "Und"
msgstr ""

#: Game.Levels.Logos.L11_And
msgid "Langsam wird die Schlange kürzer. Die nächste Formalosophin, ebenfalls häkelnd, hat folgendes Anliegen."
msgstr ""

#: Game.Levels.Logos.L11_And
msgid "**Du**: Jetzt müssen wir wohl die Annahme de-konstruieren.\n"
"\n"
"**Robo**: Ja, genau. Das geht am einfachsten mit `obtain ⟨h₁, h₂⟩ := «{h}»`.\n"
"\n"
"**Du**: Moment, wie schreib ich *das* denn hier auf?\n"
"\n"
"**Robo**: Die bleiden Klammern schreibst du als `\\<` und `\\>`, oder gleichzeitig als `\\<>`.\n"
"Und h₁ schreibst du einfach als `h\\1`. Aber du kannst dir auch einfach andere Namen\n"
"für `h₁` und `h₂`, zum Beispiel `obtain ⟨hA, hBC⟩ := «{h}»`."
msgstr ""

#: Game.Levels.Logos.L11_And
msgid "**Robo**: Das sieht doch schon besser aus! Gleich nochmal!"
msgstr ""

#: Game.Levels.Logos.L11_And
msgid "**Robo**: Du hast einen Beweis dafür in den *Annahmen*."
msgstr ""

#: Game.Levels.Logos.L11_And
msgid "**Robo**: Du hättest das übrigens auch direkt verschachtelt schreiben können:\n"
"`obtain ⟨h₁, h₂ , h₃⟩ := {h}`."
msgstr ""

#: Game.Levels.Logos.L12_Or
msgid "Oder"
msgstr ""

#: Game.Levels.Logos.L12_Or
msgid "Der nächste bitte …"
msgstr ""

#: Game.Levels.Logos.L12_Or
msgid "**Du** Muss ich jetzt wieder das Beweisziel de-konstruieren?\n"
"\n"
"**Robo** Nein, viel einfacher. Wenn du eine Oder-Aussage beweisen sollst, musst du dich\n"
"einfach entscheiden, ob du die linke oder rechte Seite beweisen willst.\n"
"\n"
"**Du** Und wie erkläre ich meinem Formalosophen, welche Seite ich gern beweisen würde?\n"
"Ich will natürlich `«{A}»` beweisen!\n"
"\n"
"**Robo** Mit `left` bzw. `right`. Ist doch logisch, oder?"
msgstr ""

#: Game.Levels.Logos.L12_Or
msgid "**Robo** Wusste gar nicht, dass du eine Links-Rechts-Schwäche hast. Probier's nochmal."
msgstr ""

#: Game.Levels.Logos.L12_Or
msgid "Auch dieser Formalosoph zieht zufrieden von dannen."
msgstr ""

#: Game.Levels.Logos.L13_Or
msgid "Oder"
msgstr ""

#: Game.Levels.Logos.L13_Or
msgid "Der nächste bitte …"
msgstr ""

#: Game.Levels.Logos.L13_Or
msgid ""
msgstr ""

#: Game.Levels.Logos.L13_Or
msgid "**Robo** Schau mal, wenn du mit dem Finger eine Annahme berührst, zeigt es dir,\n"
"wie die Klammern gesetzt sind. Irre…\n"
"\n"
"**Du** Ah ich sehe, also `(«{A}» ∧ «{B}») ∨ «{A}»`!\n"
"\n"
"**Du** Ich glaube den ganzen Zircus hier langsam nicht mehr:\n"
"Zuerst ein \"Und\" im Ziel, dann \"Und\" in der Annahme, dann \"Oder\" im Ziel und jetzt\n"
"\"Oder\" in der Annahme, die haben sich doch abgesprochen!\n"
"\n"
"**Robo** Lass ihnen doch ihren Spaß.\n"
"Wir sind ja gleich hier fertig, und können zu einem interessanteren Planeten weiterfliegen.\n"
"\n"
"**Du** Also, wieder `obtain …`?\n"
"\n"
"**Robo** Ja, aber diesmal nicht `obtain ⟨h₁, h₂⟩ := «{h}»`, sondern `obtain h | h := «{h}»`."
msgstr ""

#: Game.Levels.Logos.L13_Or
msgid "**Robo**\n"
"Jetzt musst du dein Ziel zweimal beweisen:\n"
"Einmal unter Annahme der linken Seite `«{A}» ∧ «{B}»`,\n"
"und einmal unter Annahme der rechten Seite `«{A}»`.\n"
"Hier haben nehmen wir an, die linke Seite\n"
"sei wahr."
msgstr ""

#: Game.Levels.Logos.L13_Or
msgid "**Robo** Wie man mit einem Und in den Annahmen umgeht,\n"
"weißt du doch schon:\n"
"`obtain ⟨h₁, h₂⟩ := «{h}»`. Zur Erinnerung: Für die Klammern schreibst du `\\<>`."
msgstr ""

#: Game.Levels.Logos.L13_Or
msgid "**Robo** Jetzt musst du dein Ziel noch unter der rechten Annahme\n"
"von `(«{A}» ∧ «{B}») ∨ «{A}»` zeigen, also angenommen, `«{A}»` sei wahr."
msgstr ""

#: Game.Levels.Logos.L13_Or
msgid "**Du** Okay, das scheint ihn zufriedenzustellen. Nur noch eine Seele…\n"
"Kannst du mir vorher noch einmal kurz alles Leansch zusammenfassen,\n"
"das du mir bis hierher beigebracht hast?\n"
"\n"
"Robo strahlt überglücklich. Noch *nie* warst du so auf ihn angewiesen.\n"
"\n"
"**Robo** Na klar, schau her!\n"
"\n"
"## Notationen / Begriffe\n"
"\n"
"|               | Beschreibung                                                             |\n"
"|:--------------|:-------------------------------------------------------------------------|\n"
"| *Goal*        | Was aktuell zu beweisen ist.                                             |\n"
"| *Annahme*     | Objekte & Resultate, die man zur Verfügung hat.                          |\n"
"| *Taktik*      | Befehl im Beweis. Entspricht einem Beweisschritt.                        |\n"
"| `ℕ`           | Typ aller natürlichen Zahlen.                                            |\n"
"| `0, 1, 2, …`  | Explizite natürliche Zahlen.                                             |\n"
"| `=`           | Gleichheit.                                                              |\n"
"| `≠`           | Ungleichheit. Abkürzung für `¬(·=·)`.                                    |\n"
"| `Prop`        | Typ aller logischen Aussagen.                                            |\n"
"| `True`        | Die logische Aussage `(True : Prop)` ist bedingungslos wahr.             |\n"
"| `False`       | Die logische Aussage `(False : Prop)` ist bedingungslos falsch.          |\n"
"| `¬`           | Logische Negierung.                                                      |\n"
"| `∧`           | Logisch UND.                                                             |\n"
"| `∨`           | Logisch ODER.                                                            |\n"
"| `(n : ℕ)`     | Eine natürliche Zahl.                                                    |\n"
"| `(A : Prop)`  | Eine logische Aussage.                                                   |\n"
"| `(ha : A)`    | Ein Beweis, dass die logische Aussage `(A : Prop)` wahr ist.             |\n"
"| `(h : A ∧ B)` | Eine Annahme, die den Namen `h` bekommen hat.                            |\n"
"\n"
"\n"
"## Taktiken\n"
"\n"
"Die Worte, die du aktiv gebrauchen musst, heißen zusammengefasst `Taktiken`.\n"
"Hier sind alle Taktiken, die wir auf diesem Planeten gebraucht haben:\n"
"\n"
"|    | Taktik                    | Beispiel                                           |\n"
"|:---|:--------------------------|:---------------------------------------------------|\n"
"| 1  | `rfl`                     | Beweist `A = A`.                                   |\n"
"| 2  | `assumption`              | Sucht das Goal in den Annahmen.                    |\n"
"| 3  | `contradiction`           | Sucht einen Widerspruch.                           |\n"
"| 4  | `decide`                  | Versucht zu entscheiden, ob eine Aussage wahr ist. |\n"
"| 5  | `constructor`             | Teilt ein UND im Goal auf.                         |\n"
"| 6  | `left`/`right`            | Beweist eine Seite eines ODER im Goal.             |\n"
"| 7ᵃ | `obtain ⟨h₁, h₂⟩ := h`    | Teilt ein UND in den Annahmen auf.                 |\n"
"| 7ᵇ | `obtain h := h \\| h`     | Teilt ein ODER in den Annahmen in zwei Fälle auf.  |\n"
"\n"
"**Du** Woher weißt du das eigentlich alles?\n"
"\n"
"**Robo** Keine Ahnung. War, glaube ich, vorinstalliert."
msgstr ""

#: Game.Levels.Logos.L14_Summary
msgid "Zusammenfassung"
msgstr ""

#: Game.Levels.Logos.L14_Summary
msgid "Der letzte Untertan tritt vor. Ihr Anliegen ist etwas komplizierter als die vorherigen.\n"
"\n"
"**Robo** Wirf einfach alles drauf, was du gelernt hast.\n"
"Hier, ich bin sogar so nett und zeig dir noch einmal die vier\n"
"wichtigsten Taktiken für diese Situation an.\n"
"\n"
"| (Übersicht) | Und (`∧`)                | Oder (`∨`)              |\n"
"|:------------|:-------------------------|:------------------------|\n"
"| Annahme     | `obtain ⟨h₁, h₂⟩ := h`   | `obtain h \\| h := h`   |\n"
"| Goal        | `constructor`            | `left`/`right`          |"
msgstr ""

#: Game.Levels.Logos.L14_Summary
msgid "**Robo**: Ich würd zuerst die Annahme «{h}» mit `obtain ⟨⟩ := «{h}» aufteilen."
msgstr ""

#: Game.Levels.Logos.L14_Summary
msgid "**Robo**: Jetzt kannst du das `∧` im Goal mit `constructor` angehen."
msgstr ""

#: Game.Levels.Logos.L14_Summary
msgid "**Robo**: Hier würde ich die Annahme «{h}» nochmals mit `obtain` aufteilen."
msgstr ""

#: Game.Levels.Logos.L14_Summary
msgid "**Robo**: Der Nachteil an der Reihenfolge ist, dass du jetzt in jedem Untergoal\n"
"`obtain ⟨⟩ := h` aufrufen musst."
msgstr ""

#: Game.Levels.Logos.L14_Summary
msgid "**Robo** Bravo! Jetzt aber nichts wie weg hier, bevor sich eine neue Schlange bildet!\n"
"\n"
"Königin *Logisinde* ist in der Zwischenzeit eingeschlafen, und ihr stehlt euch heimlich davon."
msgstr ""

#: Game.Levels.Logos
msgid "Logos"
msgstr ""

#: Game.Levels.Logos
msgid "Durch eine unvorhergesehene und nicht-kanonische Singularität in der Raumzeit\n"
"bist du aus Versehen in ein Paralleluniversum gestolpert. Wie es aussieht, gibt es kein zurück.\n"
"Richte dich besser darauf ein, hier bleiben und dich zurechtzufinden zu müssen.\n"
"\n"
"Wie es aussieht, gibt es hier viele nette kleine Planeten. Alle bewohnbar, und bis zu\n"
"sieben Sonnenuntergänge täglich inklusive. Nur werden sie allesamt von Formalosophen bewohnt,\n"
"seltsamen Wesen mit ausgefallenen mathematischen Obsessionen. Und dummerweise hat sich\n"
"herumgesprochen, dass du in deinem früheren Universum Mathematiker warst. du wirst hier\n"
"keine Ruhe finden, solange du nicht lernst, ihren unablässigen Wissensdurst zu stillen.\n"
"\n"
"Es gibt nur zwei Schwierigkeiten: Erstens haben die Formalosophen allem Anschein nach\n"
"überhaupt kein tieferes mathematisches Verständnis, und zweitens kommunizieren Sie über Mathematik\n"
"exklusiv in einem dir fremden Dialekt, den sie Leansch [liːnʃ] nennen.\n"
"\n"
"Zum Glück hat Robo mit dir das Universum gewechselt.\n"
"Robo, das ist dein kleiner SmartElf. Robo ist zwar auch nicht die mathematische Leuchte, die du Dir\n"
"in dieser Situation gewünscht hättest, aber es scheint, er hat irgendwo Leansch gelernt.\n"
"Und das ist Gold wert."
msgstr ""

#: Game.Levels.Implis.L01_Intro
msgid "Intro"
msgstr ""

#: Game.Levels.Implis.L01_Intro
msgid "**Operationsleiter**: Hier, zum Beispiel:"
msgstr ""

#: Game.Levels.Implis.L01_Intro
msgid "**Operationsleiter**: Die Arbeiten meinen, das wäre so richtig und wir würden das dringend\n"
"brauchen. Aber keiner kann es mir beweisen.\n"
"\n"
"**Du**: Einen Moment. Das ist ja gerade so eine Implikation (`\\to`). Wir nehmen an,\n"
"dass `«{B}»` gilt, und wollen zeigen, dass dann gilt `«{A}»` impliziert `«{A}» und «{B}»`. Ja,\n"
"klar! Natürlich stimmt das.\n"
"\n"
"Der Operationsleiter sieht dich erwartungsvoll an.\n"
"\n"
"**Du** *(leise zu Robo)*: Soll ich ihm `tauto` aufschreiben?\n"
"\n"
"**Robo** *(leise zurück)*: So wie der aussieht, fürchte ich, das wird er auch nicht verstehen.\n"
"Schreib den Beweis lieber aus.\n"
"\n"
"**Du**: Aber wie denn? Ich glaube, ich würde als erstes gern so etwas sagen wie 'Nehmen wir\n"
"also an, `«{A}»` gilt …'\n"
"\n"
"**Robo**: Ja, gute Idee. Wähle dazu für deine Annahme einfach einen Namen, zum Beispiel `h`,\n"
"und schreib `intro h`."
msgstr ""

#: Game.Levels.Implis.L01_Intro
msgid "**Du**: Okay. Jetzt habe ich also sowohl `«{A}»` als auch `«{B}»` in meinen Annahmen und\n"
"muss `«{A}» ∧ «{B}»` zeigen.\n"
"\n"
"**Robo**: Genau. Und wie das geht, weißt du ja schon."
msgstr ""

#: Game.Levels.Implis.L01_Intro
msgid "**Operationsleiter**: Perfekt! Danke schön!\n"
"\n"
"Er geht zu einer Schalttafel und ein paar Knöpfe. Irgendwo setzt sich lautstark ein\n"
"Förderband in Bewegung.\n"
"\n"
"**Operationsleiter**: Habt Ihr vielleicht noch ein paar Minuten?"
msgstr ""

#: Game.Levels.Implis.L02_Revert
msgid "Revert"
msgstr ""

#: Game.Levels.Implis.L02_Revert
msgid "Der Operationsleiter holt aus einem Container einen Stapel Papier hervor.\n"
"\n"
"**Operationsleiter**: Hier hat sich echt einiges angesammelt. Wäre echt super, wenn Ihr mir\n"
"noch ein bisschen helfen könntet.\n"
"\n"
"Er übergibt Euch das oberste Blatt."
msgstr ""

#: Game.Levels.Implis.L02_Revert
msgid "**Operationsleiter**: Das ist von einem Kollegen.\n"
"\n"
"**Robo**: Oh, das hab ich schon einmal irgendwo gelesen. Warte mal … Richtig! Das war\n"
"damals, als ich Wikipedia gecrawlt habe: `Der Modus ponens ist eine schon in der antiken\n"
"Logik geläufige Schlussfigur, die in vielen logischen …`\n"
"\n"
"**Du**: Robo! Gefragt ist ein Beweis und kein historischer Aufsatz! Oder komme ich hier\n"
"etwa mit `mopo` oder so etwas weiter?\n"
"\n"
"**Robo**: Okay, nein, sorry. `mopo` gibt es nicht. Probier lieber `revert «{hA}»`."
msgstr ""

#: Game.Levels.Implis.L02_Revert
msgid "**Du**: Aha. `revert` ist quasi `intro` rückwärts.\n"
"\n"
"**Robo**: Genau. `intro` nimmt die Prämisse aus einer Implikation `«{A}» \\to «{B}»` im\n"
"Beweisziel und macht daraus eine Annahme. `revert` nimmt umgekehrt eine Annahme und\n"
"setzt sie als Implikationsprämisse vor das Beweisziel. Aber nun mach schon fertig."
msgstr ""

#: Game.Levels.Implis.L02_Revert
msgid "Der Operationsleiter nimmt erfreut Eure Lösung entgegen, und greift zum Telefon."
msgstr ""

#: Game.Levels.Implis.L03_Apply
msgid "Apply"
msgstr ""

#: Game.Levels.Implis.L03_Apply
msgid "Leider läuft das Telefonat nicht so gut. Er legt wieder auf und schüttelt mit dem Kopf.\n"
"\n"
"**Operationsleiter**: Der Kollege auf der anderen Seite des Mondes versteht kein `revert`. Oder\n"
"er tut zumindest so. Habt Ihr noch eine andere Idee?\n"
"\n"
"Er zieht eine Linie unter Euren Beweis, ergänzt ein durchgestrichenes ~`revert`~, und legt Euch\n"
"das Blatt ein zweites Mal vor."
msgstr ""

#: Game.Levels.Implis.L03_Apply
msgid "**Robo**: Vielleicht wäre es ohnehin eleganter gewesen, die gegebene Implikation anzuwenden.\n"
"Probier doch mal `apply hAB at h`."
msgstr ""

#: Game.Levels.Implis.L03_Apply
msgid "**Robo**: Ich sagte `… at h`. Aber einfach nur `apply hAB` funktioniert offenbar auch.\n"
"Jetzt hast Du sozusagen `hAB` auf das Beweisziel `B` angewendet, und musst nur\n"
"noch `A` beweisen."
msgstr ""

#: Game.Levels.Implis.L03_Apply
msgid "**Du**: Ja, das kommt mir jetzt auch natürlich vor."
msgstr ""

#: Game.Levels.Implis.L03_Apply
msgid "Diesmal scheint das Telefonat erfolgreich zu verlaufen."
msgstr ""

#: Game.Levels.Implis.L04_Apply
msgid "Implikation"
msgstr ""

#: Game.Levels.Implis.L04_Apply
msgid "**Operationsleiter**: Das hier ist jetzt wieder ein lokales Problem."
msgstr ""

#: Game.Levels.Implis.L04_Apply
msgid "**Du**: Ich soll Implikationen $A \\Rightarrow B \\Rightarrow C$ zu $A \\Rightarrow C$\n"
"kombinieren?\n"
"\n"
"**Robo**: Vielleicht fängst du wieder mit `intro` an?"
msgstr ""

#: Game.Levels.Implis.L04_Apply
msgid "**Robo**: Das ist wieder eine Anwendung von `apply`."
msgstr ""

#: Game.Levels.Implis.L04_Apply
msgid "**Operationsleiter**: Ihr seid echt super!"
msgstr ""

#: Game.Levels.Implis.L05_Apply
msgid "Implikation"
msgstr ""

#: Game.Levels.Implis.L05_Apply
msgid "Die nächste Seite sieht ein bisschen komplizierter aus. Damit Ihr nicht die Übersicht verliert, fasst Robo sofort die verschiedenen Implikationen in einem Diagramm zusammen.\n"
"  $$\n"
"  \\begin{CD}\n"
"       A  @>{f}>> B @<{g}<< C    \\\\\n"
"    @V{h}VV    @V{i}VV   @V{j}VV \\\\\n"
"       D  @<{k}<< E @>{l}>> F    \\\\\n"
"    @A{m}AA    @A{n}AA   @V{p}VV \\\\\n"
"       G  @<{q}<< H @>{r}>> I\n"
"  \\end{CD}\n"
"  $$"
msgstr ""

#: Game.Levels.Implis.L05_Apply
msgid "**Du**: Also ich muss einen Pfad von Implikationen $A \\Rightarrow I$ finden.\n"
"\n"
"**Robo**: Lass mich mal raten, wie wir anfangen … Wieder `intro`?"
msgstr ""

#: Game.Levels.Implis.L05_Apply
msgid "**Robo**: Na wieder `apply`, was sonst."
msgstr ""

#: Game.Levels.Implis.L05_Apply
msgid "**Robo**: Das sieht nach einer Sackgasse aus …"
msgstr ""

#: Game.Levels.Implis.L05_Apply
msgid "**Robo**: Das sieht nicht gut aus."
msgstr ""

#: Game.Levels.Implis.L05_Apply
msgid "**Robo**: Nah, da stimmt doch was nicht …"
msgstr ""

#: Game.Levels.Implis.L05_Apply
msgid "**Robo**: Halt! Falsch abgebogen."
msgstr ""

#: Game.Levels.Implis.L05_Apply
msgid "**Robo**: Bist du dir sicher?"
msgstr ""

#: Game.Levels.Implis.L05_Apply
msgid "**Robo**: Ehm …"
msgstr ""

#: Game.Levels.Implis.L05_Apply
msgid "Der Operationsleiter bedankt sich wieder artig. Er drückt wieder auf ein paar Knöpfe,\n"
"und mit einem lauten Ratteln springen mehrere Förderbänder gleichzeitig wieder an."
msgstr ""

#: Game.Levels.Implis.L06_Iff
msgid "Genau dann, wenn"
msgstr ""

#: Game.Levels.Implis.L06_Iff
msgid "**Operationsleiter**: Wir hatten auch mal ein paar Förderbänder, die in beide Richtungen laufen\n"
"konnten. Die hatte ich vorsichtshalber alle abgestellt, weil in den neusten Handbüchern von\n"
"solchen Doppelbändern abgeraten wird. Aber vielleicht sind sie ja unter bestimmten\n"
"Voraussetzungen doch sicher? Was meint Ihr zu diesem Fall?"
msgstr ""

#: Game.Levels.Implis.L06_Iff
msgid "**Robo**: `A ↔ B` ist natürlich Leansch für $A \\iff B$, also genau-dann-wenn.\n"
"Die Aussage `A ↔ B` besteht also aus zwei Teilen; sie ist als `⟨A → B, B → A⟩` definiert.\n"
"\n"
"**Du**: Also ganz ähnlich wie das UND, `A ∧ B`?\n"
"\n"
"**Robo**: Genau. Entsprechend kannst du auch hier mit `constructor` anfangen."
msgstr ""

#: Game.Levels.Implis.L06_Iff
msgid "**Du**: Ah, und die beiden Teile habe ich schon in den Annahmen."
msgstr ""

#: Game.Levels.Implis.L06_Iff
msgid "**Operationsleiter**: Okay, das leuchtet mir ein.\n"
"\n"
"**Robo** *(zu dir)*: Übrigens, so wie bei `(h : A ∧ B)` die beiden\n"
"Teile `h.left` und `h.right` heißen,\n"
"heißen bei `(h : A ↔ B)` die beiden Teile `h.mp` und `h.mpr`.\n"
"\n"
"**Du**: Also `h.mp` ist `A → B`? Wieso `mp`?\n"
"\n"
"**Robo**: `mp` steht für Modus Ponens`. Der Modus ponens ist eine schon in der antiken\n"
"Logik geläufige Schlussfigur, die in vielen logischen Systemen … Ach nee, das wolltest\n"
"du ja nicht hören. Das \"r\" in `mpr` steht für \"reverse\", weil's die Rückrichtung ist."
msgstr ""

#: Game.Levels.Implis.L07_Symm
msgid "Genau dann, wenn"
msgstr ""

#: Game.Levels.Implis.L07_Symm
msgid "**Operationsleiter**: Hier ist noch so etwas."
msgstr ""

#: Game.Levels.Implis.L07_Symm
msgid "**Du**: Das ist ja nur verdreht.\n"
"\n"
"**Robo**: Ich kenne ein Werkzeug dafür. Mit `symm` oder `symm at «{h}»` kannst du eines\n"
"der beiden umdrehen."
msgstr ""

#: Game.Levels.Implis.L07_Symm
msgid "**Operationsleiter**: Das war ja symmpel. Das nächste Problem sieht aber schwieriger aus."
msgstr ""

#: Game.Levels.Implis.L08_Rw
msgid "Genau dann, wenn"
msgstr ""

#: Game.Levels.Implis.L08_Rw
msgid "**Operationsleiter**: Hier, könnt ihr dazu auch was sagen?"
msgstr ""

#: Game.Levels.Implis.L08_Rw
msgid "**Du**: $B \\iff A \\iff D \\iff C$, die sind doch alle äquivalent…\n"
"\n"
"**Robo**: Ja, aber du musst ihm helfen, die Äquivalenzen umzuschreiben. Mit `rw [h₁]` kannst\n"
"du `C` durch `D` ersetzen."
msgstr ""

#: Game.Levels.Implis.L08_Rw
msgid "**Du** Und wenn ich in die andere Richtung umschreiben möchte?\n"
"\n"
"**Robo**: Dann schreibst du ein `←` (`\\l`, also klein \"L\") vor den Namen, also `rw [← hₓ]`."
msgstr ""

#: Game.Levels.Implis.L08_Rw
msgid "**Du**: Ehm, das war verkehrt.\n"
"\n"
"**Robo**: Ja, anders herum wär's besser gewesen. Aber wenn du jetzt einfach weitermachst,\n"
"bis Du sowas wie `A ↔ A` erhältst, kann `rfl` das beweisen.\n"
"\n"
"**Robo: Da fällt mir ein, `rw` wendet ohnehin auch versuchsweise `rfl` an.\n"
"Das heißt, du musst `rfl` nicht einmal ausschreiben."
msgstr ""

#: Game.Levels.Implis.L08_Rw
msgid "**Operationsleiter**: Wenn Ihr so weitermacht, dann kommen wir ja durch den ganzen Packen durch!"
msgstr ""

#: Game.Levels.Implis.L09_Trans
msgid "Genau dann, wenn"
msgstr ""

#: Game.Levels.Implis.L09_Trans
msgid "**Du**: Irgendwie fühlen sich diese `rw` an, als würde man von hinten durch den Bauch argumentieren.  Geht das nicht auch irgendwie geradeaus, oder denken alle hier um die Ecke?\n"
"\n"
"**Robo**:  Vielleicht würde dir `trans' besser gefallen.  Damit könntest du deine Kette von Äquivalenzen  $B \\iff A \\iff D \\iff C$ Schritt für Schritt abarbeiten: als erstes führst Du mit `trans A` den Zwischenschritt `B \\iff A` ein, dann mit `trans D` den nächsten Zwischenschritt."
msgstr ""

#: Game.Levels.Implis.L09_Trans
msgid "**Robo**: Und, war das besser?\n"
"\n"
"**Du**:  Weiß nicht.  Wir können jedenfalls weitermachen."
msgstr ""

#: Game.Levels.Implis.L10_Iff
msgid "Genau dann wenn"
msgstr ""

#: Game.Levels.Implis.L10_Iff
msgid "**Operationsleiter**: Das hier ist wieder für meinen beschränkten Kollegen. Ich glaube,\n"
"`rw` mag der auch nicht. Geht das trotzdem?"
msgstr ""

#: Game.Levels.Implis.L10_Iff
msgid "**Du**: Naja ich kann wohl immerhin mal mit `intro` anfangen …\n"
"\n"
"**Robo**: … und dann schauen wir weiter!"
msgstr ""

#: Game.Levels.Implis.L10_Iff
msgid "**Robo**: Also eine Implikation wendet man mit `apply` an …\n"
"\n"
"**Du**: Weiß ich doch! Aber `«{h}»` ist keine Implikation, sondern eine Äquivalenz.\n"
"Da würde ich doch eigentlich `rw [← «{h}»]` sagen wollen.\n"
"\n"
"**Robo**: Die Richtung `«{A}» → «{B}»` von `«{h}»` heißt `«{h}».mp`. Du kannst sie\n"
"mit `apply («{h}».mp) at …` anwenden."
msgstr ""

#: Game.Levels.Implis.L10_Iff
msgid "**Robo**: So kannst Du natürlich auch anfangen."
msgstr ""

#: Game.Levels.Implis.L10_Iff
msgid "**Operationsleiter**: Okay, super. Das müsste passen.\n"
"\n"
"Er telefoniert wieder.\n"
"\n"
"**Operationsleiter**: Bingo!"
msgstr ""

#: Game.Levels.Implis.L11_Iff
msgid "Genau dann wenn"
msgstr ""

#: Game.Levels.Implis.L11_Iff
msgid "**Operationsleiter**: Ah, die nächste Seite ist auch von diesem Kollegen.\n"
"Aber da ist noch eine Notiz bei. Wir hatten hierfür schon einmal einen Beweis,\n"
"aber den mochte er nicht. Er wollte einen Beweis, der weder `rw` noch `apply` verwendet!!\n"
"\n"
"Er holt tief Luft und seuft.\n"
"\n"
"**Operationsleiter**: Ich glaube, der stellt sich immer viel dümmer, als er ist.\n"
"Aber meint Ihr, Ihr schafft das?"
msgstr ""

#: Game.Levels.Implis.L11_Iff
msgid "**Du**: Hmm, mindestens mit der Implikation kann ich anfangen."
msgstr ""

#: Game.Levels.Implis.L11_Iff
msgid "**Robo**: Genau, das war `intro`."
msgstr ""

#: Game.Levels.Implis.L11_Iff
msgid "**Du**: Also, ich kenne `rw [«{h}»]` und `apply («{h}».mp)`, aber das wollten wir ja\n"
"diesmal vermeiden.\n"
"\n"
"**Robo**: Was du machen könntest, ist, mit `obtain ⟨mp, mpr⟩ := «{h}»` die Annahme\n"
"in zwei Teile aufteilen."
msgstr ""

#: Game.Levels.Implis.L11_Iff
msgid "**Robo**: Hier müsstest du jetzt `rw [←«{h}»]` oder `apply «{h}».mp` benutzen.\n"
"Geh lieber einen Schritt zurück, sodass das Goal `A → B` ist."
msgstr ""

#: Game.Levels.Implis.L11_Iff
msgid "**Du**: Ah, und jetzt ist das Beweisziel in den Annahmen."
msgstr ""

#: Game.Levels.Implis.L11_Iff
msgid "**Operationsleiter**: Perfekt, das sollte reichen!"
msgstr ""

#: Game.Levels.Implis.L12_ByCases
msgid "by_cases"
msgstr ""

#: Game.Levels.Implis.L12_ByCases
msgid "Beim nächsten Problem stutzt der Operationsleiter.\n"
"\n"
"**Operationsleiter**: Ehrlich gesagt weiß ich gar nicht, wo dieses Blatt herkommt. Das ist\n"
"gar nicht von mir. Sieht aber irgendwie interessant aus."
msgstr ""

#: Game.Levels.Implis.L12_ByCases
msgid "**Du**: Naja, eine der beiden Aussagen `A` oder `¬A` wird schon wahr sein.\n"
"\n"
"**Robo**: Klarer Fall für eine Fallunterscheidung, würde ich sagen. Probier\n"
"mal `by_cases h : A`."
msgstr ""

#: Game.Levels.Implis.L12_ByCases
msgid "**Robo**: Siehst du, jetzt hat der Beweis zwei Teile. Im ersten Teil nimmst\n"
"du an, dass `A` wahr ist. Im zweiten nimmst du an, dass `A` falsch ist."
msgstr ""

#: Game.Levels.Implis.L12_ByCases
msgid "Der Operationsleiter nickt zustimmend."
msgstr ""

#: Game.Levels.Implis.L13_Rw
msgid "Lemmas"
msgstr ""

#: Game.Levels.Implis.L13_Rw
msgid "**Operationsleiter**: Wieder etwas für den Kollegen …. Und er wollte wieder einen\n"
"Beweise ohne `apply`. Ich sehe hier auch, dass ich mir schon einmal etwas\n"
"hierzu notiert hatte. Richtig, es gibt da dieses Lemma:\n"
"```\n"
"lemma not_not (A : Prop) : ¬¬A ↔ A\n"
"```\n"
"\n"
"**Operationsleiter**: Schafft Ihr das damit?"
msgstr ""

#: Game.Levels.Implis.L13_Rw
msgid "**Robo**: Ein Lemma, das wie `not_not` ein `↔` oder `=` im Statement hat, kann\n"
"auch mit `rw [not_not]` verwendet werden."
msgstr ""

#: Game.Levels.Implis.L13_Rw
msgid "**Du**: Häh, wieso hat das jetzt 2 von 3 der `¬¬` umgeschrieben?\n"
"\n"
"**Robo**: `rw` schreibt nur das erste um, das es findet, also `¬¬C`. Aber weil dieses\n"
"mehrmals vorkommt, werden die alle ersetzt …\n"
"\n"
"**Du**: Ah, und `¬¬B` ist etwas anderes, also brauche ich das Lemma nochmals."
msgstr ""

#: Game.Levels.Implis.L13_Rw
msgid "**Du**: Wir sind schon fertig …?\n"
"\n"
"**Robo**: Ja, `rw` versucht immer anschließend `rfl` aufzurufen, und das hat hier funktioniert."
msgstr ""

#: Game.Levels.Implis.L14_Summary
msgid "Zusammenfassung"
msgstr ""

#: Game.Levels.Implis.L14_Summary
msgid "**Operationsleiter**: Ihr habt mir wirklich so geholfen! Hier ist das letzte Problem.\n"
"Das habe ich von meinem Vorgänger geerbt. Er hat behauptet, wenn wir das lösen können,\n"
"dann läuft hier wieder alles. Aber es sah mir immer viel zu schwierig aus, um es überhaupt\n"
"zu versuchen. Wollt Ihr es einmal probieren?\n"
"\n"
"**Du**: Klar, zeig her! Robo, kannst du mir vielleicht auch noch einmal so eine nette\n"
"Zusammenfassung anzeigen, was ich theoretisch in den letzten fünf Minuten gelernt habe?\n"
"\n"
"**Robo**: Hier ist die Übersicht:\n"
"\n"
"## Notationen / Begriffe\n"
"\n"
"|               | Beschreibung                                             |\n"
"|:--------------|:---------------------------------------------------------|\n"
"| →             | Eine Implikation.                                        |\n"
"| ↔             | Genau-dann-wenn / Äquivalenz.                            |\n"
"\n"
"## Taktiken\n"
"\n"
"|     | Taktik                    | Beispiel                                                   |\n"
"|:----|:--------------------------|:-----------------------------------------------------------|\n"
"| 8   | `intro`                   | Für eine Implikation im Goal.                              |\n"
"| 9   | `revert`                  | Umkehrung von `intro`.                                     |\n"
"| 10  | `apply`                   | Wendet Implikation/Theorem (rückwärts) auf das Goal an.    |\n"
"| 10ᵇ | `apply at`                | Wendet Implikation/Theorem (forwärts) auf eine Annahme an. |\n"
"| 11  | `symm`                    | Tauscht `A ↔ B` zu `B ↔ A`.                                |\n"
"| 12  | `trans`                   | Ändert `A ↔ C` zu `A ↔ B` und `B ↔ C`                      |\n"
"| 13  | `rw`                      | Umschreiben zweier äquivalenter Aussagen.                  |\n"
"| 13ᵇ | `rw`                      | Benutzt ein Lemma, dessen Aussage eine Äquivalenz ist.     |\n"
"| 14  | `by_cases`                | Fallunterscheidung `P` und `¬P`                            |"
msgstr ""

#: Game.Levels.Implis.L14_Summary
msgid "**Du** *(flüsternd)*: Ist das nicht die Definition von `→`?\n"
"\n"
"**Robo** *(flüsternd)*: Könnte man so sehen. Aber auf Leansch ist das bloß eine Äquivalenz."
msgstr ""

#: Game.Levels.Implis.L14_Summary
msgid "**Robo**: Vielleicht kannst du wieder `by_cases` benutzen."
msgstr ""

#: Game.Levels.Implis.L14_Summary
msgid "**Robo**: Na Implikationen gehst du immer mit `intro` an."
msgstr ""

#: Game.Levels.Implis.L14_Summary
msgid "**Robo**: Ich würde mal die Annahme `h` mit `obtian` aufteilen."
msgstr ""

#: Game.Levels.Implis.L14_Summary
msgid "**Operationsleiter**: Das ist ja fantastisch! Tausend Dank! Dann will ich Euch auch gar\n"
"nicht länger aufhalten.\n"
"Ihr wollt bestimmt weiter zum Planeten Quantus, oder?\n"
"\n"
"**Du**: Ehm, vielleicht …\n"
"\n"
"**Operationsleiter**: Dann habe ich noch eine letzte Bitte. Ich habe hier noch ein Päckchen\n"
"für die Königin von Quantus! Auch schon von meinem Vorgänger geerbt. Die Post will es\n"
"nicht annehmen, weil ich die Adresse nicht weiß. Könntet Ihr es vielleicht zu ihr mitnehmen?\n"
"\n"
"**Du**: Klar! Robo, halt mal.\n"
"\n"
"Robo nimmt das Päckchen und lässt es irgendwo in seinem Innern verschwinden.\n"
"Der Operationsleiter sieht ihn entgeistert an.\n"
"\n"
"**Robo**: Keine Angst, ich verdaue nichts!"
msgstr ""

#: Game.Levels.Implis
msgid "Implis"
msgstr ""

#: Game.Levels.Implis
msgid "Zurück im Raumschiff macht ihr euch auf den Weg zu einem benachbarten Planeten, der ebenfalls\n"
"bewohnt zu sein scheinen.\n"
"\n"
"**Du**: Ich habe immer noch das Gefühl, dass ich die Aufgabe von Königin *Logisinde*\n"
"ohne `tauto` nicht hätte lösen können.\n"
"Kamen in der Aufgabe nicht auch Implikationen vor?\n"
"\n"
"**Robo**: Vielleicht haben wir ja auf dem Planeten *Implis*, den wir gerade ansteuern,\n"
"Gelegenheit, noch etwas dazuzulernen. Festhalten bitte …\n"
"\n"
"Und damit leitet Robo den Landeanflug ein.\n"
"\n"
"Implis scheint ein riesiger Tagebau zu sein.\n"
"Überall verlaufen Förderbänder, kreuz und quer, aber die meisten stehen still.\n"
"Ein schüchterner Operationsleiter erwartet Euch bereits.\n"
"\n"
"**Operationsleiter**: Ihr kommt mir gerade recht! Ich habe schon gehört. Echte Mathematiker!\n"
"Wisst Ihr, wir fördern hier Wahrheitswerte. Und dabei muss man höllisch aufpassen.\n"
"Ein Fehler, und alles bricht zusammen. Aber ich bin sehr vorsichtig. Ich sage immer:\n"
"Lieber Stillstand als Untergang!"
msgstr ""

#: Game.Levels.Quantus.L01_Ring
msgid "Natürliche Zahlen"
msgstr ""

#: Game.Levels.Quantus.L01_Ring
msgid "Du schaust dir die erste Seite an."
msgstr ""

#: Game.Levels.Quantus.L01_Ring
msgid "**Du**: Das ist doch Schulmathematik! Man rechnet das einfach aus,\n"
"indem man die Terme umsortiert.\n"
"\n"
"**Robo**: Wenn die Gleichung stimmt, kannst du auf Leansch sogar einfach\n"
"mit `ring` beweisen, dass das so ist.\n"
"\n"
"**Du**: Aber `ℕ` ist doch gar kein Ring?\n"
"\n"
"**Robo**: `ring` funktioniert sogar für sogenannte Halbringe. Ich glaube,\n"
"man sagt `ring`, weil es in (kommutativen) Ringen am besten funktioniert."
msgstr ""

#: Game.Levels.Quantus.L01_Ring
msgid ""
msgstr ""

#: Game.Levels.Quantus.L02_Rewrite
msgid "Rewrite"
msgstr ""

#: Game.Levels.Quantus.L02_Rewrite
msgid ""
msgstr ""

#: Game.Levels.Quantus.L02_Rewrite
msgid "**Du**: Schau mal, dieses Problem sieht so ähnlich aus wie eines, das wir auf *Implis*\n"
"schon gelöst hatten.\n"
"Nur, das hier jetzt Gleichheiten von Zahlen statt Genau-Dann-Wenn-Aussagen stehen!\n"
"\n"
"**Robo**: Richtig. Und im Grunde macht das gar keinen Unterschied.\n"
"Du kannst `=` und `↔` mit `rw` praktisch gleich behandeln."
msgstr ""

#: Game.Levels.Quantus.L02_Rewrite
msgid "**Du**: Also auch `rw [hₓ]` und `rw [← hₓ]`?\n"
"\n"
"**Robo**: Probiers doch einfach."
msgstr ""

#: Game.Levels.Quantus.L02_Rewrite
msgid "**Du**: Wie war das nochmals mit rückwärts umschreiben?\n"
"\n"
"**Robo**: `←` ist `\\l`. Und dann `rw [← hₓ]`"
msgstr ""

#: Game.Levels.Quantus.L02_Rewrite
msgid ""
msgstr ""

#: Game.Levels.Quantus.L03_Rewrite
msgid "Rewrite"
msgstr ""

#: Game.Levels.Quantus.L03_Rewrite
msgid ""
msgstr ""

#: Game.Levels.Quantus.L03_Rewrite
msgid "$$\n"
"\\begin{aligned}\n"
"  a &= b \\\\\n"
"  a + a ^ 2 &= b + 1 \\\\\n"
"  \\vdash b + b ^ 2 &= b + 1\n"
"\\end{aligned}\n"
"$$"
msgstr ""

#: Game.Levels.Quantus.L03_Rewrite
msgid "**Du**: Hier muss man, glaube ich, einfach in Annahme `«{g}»` die\n"
"Variable `«{a}»` durch `«{b}»` ersetzen.\n"
"\n"
"**Robo**: Genau! Das machst du mit `rw [«{h}»] at «{g}»`."
msgstr ""

#: Game.Levels.Quantus.L03_Rewrite
msgid "**Robo**: Schau mal durch die Annahmen."
msgstr ""

#: Game.Levels.Quantus.L03_Rewrite
msgid "**Robo**: Noch ein Trick: Mit `rw [h] at *` kann man gleichzeitig mittels `h` **alle**\n"
"Annahmen und das Goal umschreiben."
msgstr ""

#: Game.Levels.Quantus.L04_Ring
msgid "Natürliche Zahlen"
msgstr ""

#: Game.Levels.Quantus.L04_Ring
msgid ""
msgstr ""

#: Game.Levels.Quantus.L04_Ring
msgid "**Du**: Ich vermute, wenn ich zuerst alles so umschreibe, dass\n"
"das Beweisziel nur noch rechnen und umsortieren zu beweisen ist, erledigt `ring` den Rest!\n"
"\n"
"**Robo**: Genau. Und noch ein Trick: Zwei Schritte `rw [h₁]` und `rw [h₂]` kann man zu\n"
"einem einzigen Schritt zusammenfassen: `rw [h₁, h₂]`."
msgstr ""

#: Game.Levels.Quantus.L04_Ring
msgid ""
msgstr ""

#: Game.Levels.Quantus.L05_Decide
msgid ""
msgstr ""

#: Game.Levels.Quantus.L05_Decide
msgid "Ihr habt nun alle Fragen aus dem königlichen Päckchen beantwortet, und die Formalosophinnen\n"
"applaudieren. Dann wollen Sie aber auch noch ein paar Fragen stellen, aber sie können sich\n"
"nicht einigen, welche.\n"
"Ihr hört abwechselnd die Rufe „Even“ und „Odd“ aus der Menge heraus. Deshalb zeigt dir Robo\n"
"vorsichtshalber schon einmal die entsprechende Definition:\n"
"\n"
"```\n"
"def Even (n : ℕ) : Prop := ∃ r, n = r + r\n"
"```\n"
"\n"
"Bevor er zu `Odd` weitergehen kann,\n"
"taucht von irgendwo aus der Menge folgendes Papier auf:"
msgstr ""

#: Game.Levels.Quantus.L05_Decide
msgid "**Robo**: Moment! Dafür brauchst du die Definition gar nicht!\n"
"\n"
"**Du**: Das ist ja irgendwie trivial…\n"
"\n"
"**Robo**: Erinnerst du dich? `decide` kann alle Aufgaben lösen, bei denen es einen\n"
"einfachen Algorithmus gibt um die Wahrheit zu bestimmen.\n"
"Aussagen zu konkreten Zahlen fallen meistens in diese Kategorie!"
msgstr ""

#: Game.Levels.Quantus.L05_Decide
msgid "**Du**: Was kann denn `decide` noch alles?\n"
"\n"
"**Robo**: Konkret hat hier jemand einen ausführbaren\n"
"Algorithmus angegeben, wie entschieden werden\n"
"soll, ob `Even 42` wahr oder falsch ist. Wenn `decide` also so einen Algorithmus kennt,\n"
"dann kann es die Aufgabe lösen."
msgstr ""

#: Game.Levels.Quantus.L06_Exists
msgid "Gerade/Ungerade"
msgstr ""

#: Game.Levels.Quantus.L06_Exists
msgid "Die Rufe „Even“ und „Odd“ aus der Menge sind noch lange nicht verstummt, deshalb\n"
"zeigt dir Robo nochmals die Definitionen:\n"
"\n"
"```\n"
"def Even (n : ℕ) : Prop := ∃ r, n = r + r\n"
"```\n"
"\n"
"und\n"
"\n"
"```\n"
"def Odd (n : ℕ) : Prop := ∃ r, n = 2 * r + 1\n"
"```\n"
"\n"
"Damit erhaltet ihr auch ein weiteres Blatt:"
msgstr ""

#: Game.Levels.Quantus.L06_Exists
msgid "Das Quadrat einer geraden Zahl ist gerade."
msgstr ""

#: Game.Levels.Quantus.L06_Exists
msgid "**Robo**: Wie du oben siehst, ist `Even «{n}»` dadurch definiert,\n"
"dass ein `r` existiert so dass `r + r = «{n}»` ist. Am besten\n"
"öffnest du diese Definition mit `unfold Even at *` einmal.\n"
"Dann siehst du besser, was los ist.\n"
"\n"
"**Du**: Was ist mit `decide`?\n"
"\n"
"**Robo**: `decide` wird nicht funktionieren, da `«{n}»` keine konkrete sondern\n"
"eine beliebige Zahl ist. Da musst du schon etwas Arbeit leisten!"
msgstr ""

#: Game.Levels.Quantus.L06_Exists
msgid "Robo**: Am besten machst du auch noch `unfold Even at h`, damit du verstehst, was los ist."
msgstr ""

#: Game.Levels.Quantus.L06_Exists
msgid "Ein verwirrtes murmeln geht durch die Menge.\n"
"\n"
"**Du**: Warte mal, wieso ist `«{n}» ^ 2 / 2` überhaupt wieder eine natürliche Zahl?\n"
"\n"
"**Robo**: Division auf `ℕ` wird in Lean immer abgerundet. Für `«{n}» = 1` steht da also\n"
"\n"
"```\n"
"1 ^ 2 = (1 ^ 2) / 2 + (1 ^ 2) / 2\n"
"```\n"
"\n"
"was ausgerechnet `1 = 1 / 2 + 1 / 2 = 0 + 0` ist, du bist also auf dem Holzweg!"
msgstr ""

#: Game.Levels.Quantus.L06_Exists
msgid "**Du**: Also von `«{h}»` weiß ich jetzt, dass ein `s` existiert, so dass `s + s = «{n}»` …\n"
"\n"
"**Robo**: Mit `choose s hs using «{h}»` kannst du dieses `s` tatsächlich einführen."
msgstr ""

#: Game.Levels.Quantus.L06_Exists
msgid "**Du**: Und jetzt muss ich eine passende Zahl finden, so dass `x + x = «{n}» ^ 2`?\n"
"\n"
"**Robo**: Genau. Und mit `use _` gibst du diese Zahl an."
msgstr ""

#: Game.Levels.Quantus.L06_Exists
msgid "**Robo**: Also sowas ähnliches wie `use 4 * «{s}» ^ 3`, aber ich kann\n"
"dir leider nicht sagen, welche Zahl passt."
msgstr ""

#: Game.Levels.Quantus.L06_Exists
msgid "**Robo**: Das geht auch, jetzt musst du aber wirklich `use` verwenden."
msgstr ""

#: Game.Levels.Quantus.L06_Exists
msgid "**Du**: Ah, und jetzt `ring`!"
msgstr ""

#: Game.Levels.Quantus.L06_Exists
msgid "**Du**: Ah, und jetzt `ring`!\n"
"\n"
"**Robo**: Aber zuerst musst du noch mit\n"
"`rw` `n` durch `«{s}» + «{s}»` ersetzen, da `ring` das sonst nicht weiß."
msgstr ""

#: Game.Levels.Quantus.L06_Exists
msgid "Applaus!"
msgstr ""

#: Game.Levels.Quantus.L07_Exists
msgid "Gerade/Ungerade"
msgstr ""

#: Game.Levels.Quantus.L07_Exists
msgid "Sofort taucht das nächste Blatt auf. Anscheinend hatten sie sich auf einen Kompromiss geeinigt."
msgstr ""

#: Game.Levels.Quantus.L07_Exists
msgid "**Robo**: mit `choose r hr using h` kannst du wieder\n"
"das `r` nehmen, das laut Annahme existieren muss.\n"
"\n"
"**Robo**: Oder aber, du fängst mit `unfold Odd at *` an."
msgstr ""

#: Game.Levels.Quantus.L07_Exists
msgid "**Robo**: Mit `unfold Odd at *` öffnest du alle Definitionen von `Odd`."
msgstr ""

#: Game.Levels.Quantus.L07_Exists
msgid "**Robo**: mit `choose r hr⟩ using h` kannst du wieder\n"
"das `r` nehmen, das laut Annahme existieren muss."
msgstr ""

#: Game.Levels.Quantus.L07_Exists
msgid "**Robo**: Ich hab noch einen Trick auf Lager:\n"
"Wenn du jetzt noch nicht weißt, welche Zahl du einsetzen musst, könntest\n"
"du schon jetzt mit `rw [«{hr}»]` weitermachen …"
msgstr ""

#: Game.Levels.Quantus.L07_Exists
msgid "**Robo**: Wenn du jetzt `ring` brauchst, dann schreibt es einfach alles in\n"
"Normalform um, das hilft beim Vergleichen."
msgstr ""

#: Game.Levels.Quantus.L07_Exists
msgid "**Robo**: Ich hab noch einen Trick auf Lager:\n"
"Wenn du jetzt noch nicht weißt, welche Zahl du einsetzen musst, könntest\n"
"Du schon jetzt mit `rw [«{hr}»]` weitermachen…"
msgstr ""

#: Game.Levels.Quantus.L07_Exists
msgid "**Robo**: Wenn du jetzt `ring` brauchst, dann schreibt es einfach alles in\n"
"Normalform um, das hilft beim Vergleichen."
msgstr ""

#: Game.Levels.Quantus.L07_Exists
msgid "Applaus!"
msgstr ""

#: Game.Levels.Quantus.L08_Forall
msgid "Für alle"
msgstr ""

#: Game.Levels.Quantus.L08_Forall
msgid "Nach längerem Durcheinander findet ein weiteres Blatt aus der Menge zu Euch."
msgstr ""

#: Game.Levels.Quantus.L08_Forall
msgid "**Du**: Das `∀` heisst sicher \"für alle\".\n"
"\n"
"**Robo**: Und man schreibt `\\forall`. Ein `∀ x, …` im Beweisziel kannst du wie eine\n"
"Implikation mit `intro x` angehen."
msgstr ""

#: Game.Levels.Quantus.L08_Forall
msgid "Wieder werdet Ihr mit einem Applaus belohnt, und die Formalosophinnen\n"
"beratschlagen sich, was sie Euch noch vorlegen wollen."
msgstr ""

#: Game.Levels.Quantus.L09_PushNeg
msgid "PushNeg"
msgstr ""

#: Game.Levels.Quantus.L09_PushNeg
msgid "**Robo**: Während wir warten, zeig ich dir vielleicht kurz, wie sich Negation mit Quantoren verträgt. Ich habe so ein Gefühl, dass wir das gleich brauchen werden."
msgstr ""

#: Game.Levels.Quantus.L09_PushNeg
msgid "**Du**: Was ist denn jetzt dieses `«{P}»`?\n"
"\n"
"**Robo**: `«{P}»` ist wieder irgendeine Aussage; eine Aussage über Objekte vom Typ `«{X}»`.\n"
"Zum Beispiel könnte `«{X}»` wieder der Typ der natürlichen Zahlen sein.\n"
"Und `«{P}» x` könnte die Aussage sein:\n"
"Die natürliche Zahl `x` ist gerade. Oder: `x` hat sieben Primfaktoren. Oder: `x`\n"
"ist Robo's Lieblingszahl. Oder …\n"
"\n"
"**Du**: Schon gut, ich glaub ich habs verstanden. `«{P}»` ist sozusagen eine Abbildung, die\n"
"ein Element `x : «{X}»` nimmt und auf eine Aussage wirft.\n"
"\n"
"**Robo**: Ja, sozusagen.\n"
"\n"
"**Du**: Gut. Dann ist auch ziemlich klar, was hier die Aussage ist.\n"
"Und du wolltest mir jetzt verraten, wie ich das auf Leansch zeige?\n"
"\n"
"**Robo**: Genau. Was du brauchst, ist `push_neg`."
msgstr ""

#: Game.Levels.Quantus.L09_PushNeg
msgid "**Robo**: `push_neg` schiebt von links nach rechts. Du kannst es hier also nicht auf\n"
"das Beweisziel anwenden, wohl aber auf `«{h}»`."
msgstr ""

#: Game.Levels.Quantus.L09_PushNeg
msgid "**Robo**: Gut gemacht. Intern benutzt `push_neg` übrigens zwei Lemmas:\n"
"\n"
" - `not_exists (P : X → Prop) : ¬ (∃ x, P x) ↔ ∀ x, (¬ P x)`\n"
" - `not_forall (P : X → Prop) : ¬ (∀ x, P x) ↔ ∃ x, (¬ P x)`\n"
"\n"
"Das erste Lemma ist die Aussage, die du gerade gezeigt hast.\n"
"\n"
"**Du**: Na toll. Ich habe die Aussage also gezeigt, indem ich sie benutzt habe …\n"
"\n"
"**Robo**: :-) Hauptsache, Du merkst dir `push_neg`."
msgstr ""

#: Game.Levels.Quantus.L10_PushNeg
msgid "PushNeg"
msgstr ""

#: Game.Levels.Quantus.L10_PushNeg
msgid "Nach langem Hin und Her haben sich die Formalosophinnen endlich auf folgende Frage geeignet."
msgstr ""

#: Game.Levels.Quantus.L10_PushNeg
msgid "**Du**: Oha. Ganz links ein `¬`. Was du nicht sagst …"
msgstr ""

#: Game.Levels.Quantus.L10_PushNeg
msgid "**Robo**: Dieser Lösungsweg scheint mir etwas zu schwierig.\n"
"Ich würde nochmal zurückgehen und `Odd` behalten,\n"
"damit man schlussendlich `even_iff_not_odd` brauchen kann!"
msgstr ""

#: Game.Levels.Quantus.L10_PushNeg
msgid "**Robo**: Dieser Lösungsweg scheint mir etwas zu schwierig.\n"
"Ich würde nochmal zurückgehen und `Odd` behalten,\n"
"damit man schlussendlich `even_iff_not_odd` brauchen kann!"
msgstr ""

#: Game.Levels.Quantus.L10_PushNeg
msgid "**Robo**: Jetzt brauchst du eine Zahl mit `use`, und danach vermutlich das\n"
"Lemma `even_iff_not_odd` brauchen.\n"
"\n"
"**Du**: Könnte ich jetzt schon `even_iff_not_odd` anwenden?\n"
"\n"
"**Robo**: Nein, `rw` kann nicht innerhalb von Quantoren umschreiben.\n"
"\n"
"**Du**: Aber wie würde ich das machen?\n"
"\n"
"**Robo**: Zeig ich dir später, nicht hier vor großem Publikum.\n"
"Ich würde jetzt lieber mit `use` eine richtige Zahl angeben, und danach umschreiben."
msgstr ""

#: Game.Levels.Quantus.L10_PushNeg
msgid "**Robo**: Gute Wahl! Jetzt kannst du `even_iff_not_odd` verwenden."
msgstr ""

#: Game.Levels.Quantus.L10_PushNeg
msgid "**Robo**: Gute Wahl! Jetzt kannst du `even_iff_not_odd` verwenden."
msgstr ""

#: Game.Levels.Quantus.L10_PushNeg
msgid "**Robo**: Gute Wahl! Jetzt kannst du `even_iff_not_odd` verwenden."
msgstr ""

#: Game.Levels.Quantus.L10_PushNeg
msgid "Eine Zahl ist gerade wenn sie nicht ungerade ist."
msgstr ""

#: Game.Levels.Quantus.L10_PushNeg
msgid "Eine Zahl ist ungerade wenn sie nicht gerade ist."
msgstr ""

#: Game.Levels.Quantus.L10_PushNeg
msgid "Statt diesem Theorem kannst du `push_neg` verwenden."
msgstr ""

#: Game.Levels.Quantus.L10_PushNeg
msgid "Statt diesem Theorem kannst du `push_neg` verwenden."
msgstr ""

#: Game.Levels.Quantus.L10_PushNeg
msgid "Die Formalosophinnen sind ganz begeistert.\n"
"Nachdem sich der Beifall gelegt hat, hast du auch einmal eine Frage.\n"
"\n"
"**Du**: Kann uns hier irgendjemand vielleicht ein bisschen Orientierung im Formaloversum geben?\n"
"\n"
"**Alle**: Ja, ja.\n"
"\n"
"**Du**: Wer denn?\n"
"\n"
"Die Frage war wieder zu konkret. Betretenes Schweigen."
msgstr ""

#: Game.Levels.Quantus.L11_DrinkersParadox
msgid "Drinker's Paradox"
msgstr ""

#: Game.Levels.Quantus.L11_DrinkersParadox
msgid "**Du**: Könnt ihr eigentlich immer nur im Chor oder durcheinander reden?\n"
"\n"
"Wieder herrscht längeres Schweigen. Dann auf einmal:\n"
"\n"
"**Alle**: Es gibt unter uns eine Person, wenn die redet, dann reden alle!\n"
"\n"
"Du kratzt Dich am Kopf.\n"
"\n"
"**Robo**: Ist doch klar. Das ist auf jedem bewohnten Planeten so!\n"
"\n"
"**Du**: Was??\n"
"\n"
"**Robo**: Das ist eine Version vom Drinker's Paradox! Kennst du das nicht? Dann lies\n"
"das am besten Mal in deiner Handbibliothek nach! *In jeder Bar gibt es eine Person mit\n"
"der Eigenschaft, dass alle trinken, wenn sie trinkt.* Genauer gesagt: in jeder nicht-leeren Bar.\n"
"\n"
"**Du**: Glaube ich nicht.\n"
"\n"
"**Robo**: Glaube ich schon. Ich glaube sogar, du kannst das beweisen. Hier, probier mal!"
msgstr ""

#: Game.Levels.Quantus.L11_DrinkersParadox
msgid "**Du**: Also, `«{isDrinking}»` ist wieder so ein Prädikat …\n"
"Wenn `p` eine Person ist, ist `«{isDrinking}» p` eine Aussage,\n"
"die wahr oder falsch ist. Soweit so gut.\n"
"Und was bedeutet `Nonempty «{People}»`?\n"
"\n"
"**Robo**: Das ist Leansch für nicht-leer. Das heißt einfach, es gibt mindestens eine Person.\n"
"Mit `use Classical.arbitrary «{People}»` kannst du dir eine `pers : «{People}»` aussuchen und verwenden,\n"
"die es per Annahme gibt.\n"
"\n"
"**Du**: Und wie fang ich jetzt an?\n"
"\n"
"**Robo**: Ich sagte doch, schau am besten Mal in deine Handbibliothek.\n"
"Wenn ich mich richtige erinnere, hilft eine Fallunterscheidung, ob die Aussage\n"
"`∀ (y : «{People}»), «{isDrinking}» y` wahr oder falsch ist."
msgstr ""

#: Game.Levels.Quantus.L11_DrinkersParadox
msgid "**Robo**: Schau mal `by_cases` an."
msgstr ""

#: Game.Levels.Quantus.L11_DrinkersParadox
msgid "**Du**: Und wen nehm ich jetzt?\n"
"\n"
"**Robo**: Wie gesagt, mit `use Classical.arbitrary «{People}»` kannst du eine beliebige\n"
"Person auswählen und verwenden."
msgstr ""

#: Game.Levels.Quantus.L11_DrinkersParadox
msgid "**Robo**: Du könntest hier mit `push_neg at «{h}»` weitermachen."
msgstr ""

#: Game.Levels.Quantus.L11_DrinkersParadox
msgid "**Du**: Also nach `«{h}»` existiert ja eine Person, die nicht trinkt. Könnte ich diese brauchen damit die Aussage trivialerweise wahr wird?\n"
"\n"
"**Robo**: Schau dir mal an wie man `obtain` auf die Annahme `«{h}»` anwenden könnte."
msgstr ""

#: Game.Levels.Quantus.L11_DrinkersParadox
msgid "**Robo**: Was siehst du, wenn du `«{hp}»` und `«{hp'}»` anschaust?"
msgstr ""

#: Game.Levels.Quantus.L11_DrinkersParadox
msgid "TODO"
msgstr ""

#: Game.Levels.Quantus.L11_DrinkersParadox
msgid "**Du**: Verstehe. Aber jetzt habe ich auch wirklich genug von dieser Prädikatenlogik!\n"
"\n"
"**Robo**: Dann fliegen wir am besten weiter! Aber bevor du fragst – hier ist wieder ein Überblick, was du auf diesem Planeten gelernt hast.\n"
"\n"
"\n"
"|               | Beschreibung                |\n"
"|:--------------|:----------------------------|\n"
"| `∃`           | Existential-Quantifier      |\n"
"| `∀`           | Forall-Quantifier           |\n"
"| `Even n`      | `n` ist gerade              |\n"
"| `Odd n`       | `n` ist ungerade            |\n"
"\n"
"|       | Taktik                    | Beispiel                                               |\n"
"|:------|:--------------------------|:-------------------------------------------------------|\n"
"| *13ᶜ* | `rw`                      | Umschreiben mit Gleichungen.                           |\n"
"| 15    | `ring`                    | Löst Gleichungen mit `+, -, *, ^`.                     |\n"
"| *4ᵇ*  | `decide`                  | Kann auch Aussagen zu konkreten Zahlen beantworten.    |\n"
"| 16    | `unfold`                  | Setzt visuell die Bedeutung einer Definition ein.      |\n"
"| 17    | `use`                     | Um ein `∃` im Goal anzugehen.                          |\n"
"| 18    | `choose x hx using h`     | Um ein `∃` in den Annahmen zu zerlegen.                |\n"
"| *8ᵇ*  | `intro`                   | Um ein `∀` im Goal anzugehen.                          |\n"
"| 19    | `push_neg`                | Für `¬∃` und `¬∀` im Goal.                             |"
msgstr ""

#: Game.Levels.Quantus
msgid "Quantus"
msgstr ""

#: Game.Levels.Quantus
msgid "Auf Quantus erwartet Euch bereits eine große Ansammlung von Formalosopheninnen.\n"
"Sie reden alle wild durcheinander und Ihr habt Probleme, Euch überhaupt Gehör zu verschaffen.\n"
"Robo produziert schließlich ein lautes Gong-Geräusch, das sie kurzzeitig zur Ruhe bringt.\n"
"\n"
"**Du**: Wir haben einen Brief für Eure Königin. Könntet Ihr uns zu Eurer Königin führen?\n"
"\n"
"**Alle** *(im Chor)*: Wir sind schon alle hier!\n"
"\n"
"**Du**: Okay. Und wer von Euch ist die Königin?\n"
"\n"
"Nun herrscht betretenes Schweigen. Alle zucken mit den Schultern.\n"
"\n"
"**Du**: Habt Ihr überhaupt eine Königin?\n"
"\n"
"**Alle** *(im Chor)*: Ja, ja. Wir haben eine Königin, wir haben eine Königin.\n"
"\n"
"**Robo** *(zu dir)*: Ich fasse mal zusammen. Es existiert eine Königin, aber keiner weiß, wer\n"
"sie ist …\n"
"\n"
"**Du**: Ist das nicht ein Widerspruch?\n"
"\n"
"**Robo**: Fragst du, du als Mathematiker? Nein, das ist kein Widerspruch. Das ist einfach eine\n"
"„reine Existenzaussage“.\n"
"\n"
"Du bist dir nicht ganz sicher, wie ernst er das meint.\n"
"\n"
"**Du**: Dann schlage ich vor, wir übergeben das Päckchen einfach an *alle* Bewohner. Dann haben\n"
"wir es ja insbesondere der Königin übergeben.\n"
"\n"
"**Du** *(in die Menge)*: Wir haben Euch ein Päckchen von Implis gebracht. Hier, das ist für Euch.\n"
"\n"
"Robo spuckt es aus, wirft es in die Menge, und die Formalosophinnen reißen es auf. Darin befinden\n"
"sich ein paar lose Seiten, die sie sofort eingehend studieren.\n"
"\n"
"Zwei Minuten später liegen die Seiten wieder bei euch. Es sind wieder mathematische Probleme.\n"
"Und die Formalosophinnen wollen sehen, wie Ihr sie löst."
msgstr ""

#: Game.Levels.Spinoza.L01_Have
msgid "Was wir haben, haben wir."
msgstr ""

#: Game.Levels.Spinoza.L01_Have
msgid "**Benedictus**: Hier, schaut mal. Das habe ich für Euch vorbereitet."
msgstr ""

#: Game.Levels.Spinoza.L01_Have
msgid "**Du**: Also als erstes teile ich wohl mal das Und (`∧`) auf."
msgstr ""

#: Game.Levels.Spinoza.L01_Have
msgid "**Du**: Und jetzt …\n"
"\n"
"**Benedictus**: … solltest du dir ein passendes Zwischenresultat zurechtlegen.\n"
"\n"
"**Robo**: Ja! Probier mal `have g : ¬ B`!"
msgstr ""

#: Game.Levels.Spinoza.L01_Have
msgid "**Du**: Was? Jetzt hab ich einfach angenommen, dass sei richtig?\n"
"\n"
"**Robo**: Nee, jetzt musst du das erst noch beweisen, bevor du es dann benutzen kannst."
msgstr ""

#: Game.Levels.Spinoza.L01_Have
msgid "**Robo**: `apply` sollte helfen"
msgstr ""

#: Game.Levels.Spinoza.L01_Have
msgid "**Du**: Und wie war das nochmals wenn zwei Annahmen sich widersprechen?\n"
"\n"
"**Robo**: `contradiction`."
msgstr ""

#: Game.Levels.Spinoza.L01_Have
msgid "**Benedictus**: Das sieht gut aus!"
msgstr ""

#: Game.Levels.Spinoza.L02_Suffices
msgid "Es reicht!"
msgstr ""

#: Game.Levels.Spinoza.L02_Suffices
msgid "**Benedictus**: Ihr hättet natürlich auch erst das Hauptresultat und dann das\n"
"Zwischenresultat beweisen können. Das könnt Ihr ja mal an dieser Aufgabe probieren, die ist\n"
"ganz ähnlich."
msgstr ""

#: Game.Levels.Spinoza.L02_Suffices
msgid "**Robo**: Ich weiß was er meint! Anstatt `have` kannst du auch `suffices`\n"
"verwenden. Das funktioniert genau gleich, außer, dass dann die beiden Beweisziele vertauscht sind.\n"
"\n"
"**Du**: Also nach `suffices g : ¬B` muss ich dann zuerst zeigen, wie man mit `g` den Beweis\n"
"abschliesst, bevor ich `g` beweise?\n"
"\n"
"**Robo**: Genau!"
msgstr ""

#: Game.Levels.Spinoza.L02_Suffices
msgid "**Robo**: Also hier beendest du den Beweis unter der Annahme `«{g}»` sei wahr."
msgstr ""

#: Game.Levels.Spinoza.L02_Suffices
msgid "**Robo**: Und hier beweist du das Zwischenresultat."
msgstr ""

#: Game.Levels.Spinoza.L02_Suffices
msgid "**Benedictus**: Genau so meinte ich das. Ob Ihr nun in Zukunft `have` und\n"
"`suffices` verwendet, ist reine Geschmacksfrage. Hauptsache, Ihr wisst, wie Ihr\n"
"entfernte Ziele in kleinen Schritte erreicht."
msgstr ""

#: Game.Levels.Spinoza.L03_ByContra
msgid "Widerspruch"
msgstr ""

#: Game.Levels.Spinoza.L03_ByContra
msgid "**Benedictus**: Hier ist noch eine Variante."
msgstr ""

#: Game.Levels.Spinoza.L03_ByContra
msgid "**Robo**: Ein `¬` im Goal heißt häufig, dass du einen Widerspruchsbeweis führen\n"
"möchtest.\n"
"\n"
"**Du**: Und wie mache ich das? Mit `contradiction`?\n"
"\n"
"**Robo**: Mit `by_contra h` fängst du einen Widerspruchsbeweis an. Und mit `contradiction`\n"
"schließt du ihn ab."
msgstr ""

#: Game.Levels.Spinoza.L03_ByContra
msgid "**Robo**: Jetzt hast du also eine Annahme `«{h}» : «{A}»`, und damit musst du einen\n"
"Widerspruch herleiten.\n"
"\n"
"Du könntest zum Beispiel jetzt mit `suffices` sagten, welchen Widerspruch du gern herleiten\n"
"möchtest, etwa `suffices k : B`"
msgstr ""

#: Game.Levels.Spinoza.L03_ByContra
msgid "**Du**: Ah, und jetzt kann ich einfach sagen dass sich die Annahmen `«{B}»` und `¬«{B}»` sich\n"
"widersprechen."
msgstr ""

#: Game.Levels.Spinoza.L03_ByContra
msgid "**Robo**: Und jetzt musst du nur noch das Zwischenresultat herleiten, dass zu diesem\n"
"Widerspruch geführt hat."
msgstr ""

#: Game.Levels.Spinoza.L03_ByContra
msgid "**Benedictus**: Ich sehe schon, Ihr lernt schnell!"
msgstr ""

#: Game.Levels.Spinoza.L04_ByContra
msgid "Kontraposition"
msgstr ""

#: Game.Levels.Spinoza.L04_ByContra
msgid "**Benedictus**: Ich habe noch eine schöne Frage zu ungeraden Quadraten für Euch.\n"
"Aber vorher beweist Ihr besser noch diese Äquivalenz hier. Ich glaube, die hat sogar\n"
"bei Euch einen Namen: *Kontrapositionsäquivalenz*, oder so etwas. Auf Leansch nennen wir\n"
"die Äquivalenz einfach `not_imp_not`. Ist doch viel einleuchtender, oder?"
msgstr ""

#: Game.Levels.Spinoza.L04_ByContra
msgid "**Du**: Ja, das habe ich tatsächlich schon einmal gesehen.\n"
"\n"
"**Robo**: Ja, klar hast du das schon einmal gesehen. Das benutzen Mathematiker doch ständig.\n"
"Wenn ihnen zu $A ⇒ B$ nichts einfällt, zeigen sie stattdessen $¬B ⇒ ¬A$. Ich würde das ja\n"
"statt *Kontraposition* oder `not_imp_not` eher *von_hinten_durch_die_Brust_ins_Auge* nennen.\n"
"Aber gut, ich will mich nicht einmischen."
msgstr ""

#: Game.Levels.Spinoza.L04_ByContra
msgid "**Robo**: Fang doch mal mit `constructor` an."
msgstr ""

#: Game.Levels.Spinoza.L04_ByContra
msgid "**Robo**: Ich würde wieder mit `suffices g : B` einen Widerspruch herbeiführen."
msgstr ""

#: Game.Levels.Spinoza.L04_ByContra
msgid "**Robo**: Hier würde ich ebenfalls einen Widerspruchsbeweis anfangen."
msgstr ""

#: Game.Levels.Spinoza.L04_ByContra
msgid "**Robo**: `suffices g : ¬ A` sieht nach einer guten Option aus."
msgstr ""

#: Game.Levels.Spinoza.L04_ByContra
msgid ""
msgstr ""

#: Game.Levels.Spinoza.L05_Contrapose
msgid "Kontraposition"
msgstr ""

#: Game.Levels.Spinoza.L05_Contrapose
msgid "**Benedictus**: Gut, hier ist die angekündigte Frage. Versucht mal einen *direkten*\n"
"Beweis, ohne `by_contra`."
msgstr ""

#: Game.Levels.Spinoza.L05_Contrapose
msgid "**Robo**: Ich schlage vor, wir führen das auf das Lemma `even_square` zurück, das wir auf\n"
"Quantus schon gezeigt hatten. Hier steht ja im Grunde `Odd (n^2) → Odd n`. Und unter\n"
"Kontraposition ist das äquivalent zu `Even n → Even (n^2)`.\n"
"\n"
"**Du**: Richtig. Von hinten durch die Brust … Aber warte, im Moment steht da doch gar kein `→`.\n"
"\n"
"**Robo**: Erinner dich an `revert`. Mit `revert «{h}»` kannst du die Annahme `«{h}»` als\n"
"Implikationsannahme ins Beweissziel schieben."
msgstr ""

#: Game.Levels.Spinoza.L05_Contrapose
msgid "**Du**: Und jetzt kann ich dieses Kontrapositionslemma anwenden? Wie hieß das noch einmal?\n"
"\n"
"**Robo**: Tatsächlich kannst auch einfach `contrapose` schreiben."
msgstr ""

#: Game.Levels.Spinoza.L05_Contrapose
msgid "**Robo**: Vielleicht hilft jetzt `even_iff_not_odd` weiter?"
msgstr ""

#: Game.Levels.Spinoza.L05_Contrapose
msgid "**Du**: Das sieht schon ganz gut aus. Jetzt kann ich tatsächlich das alte Lemma\n"
"`even_square` anwenden!"
msgstr ""

#: Game.Levels.Spinoza.L05_Contrapose
msgid "**Benedictus**: Hervorragend! Ich glaube, damit seid Ihr jetzt ganz gut gewappnet."
msgstr ""

#: Game.Levels.Spinoza.L06_Summary
msgid "Contradiction"
msgstr ""

#: Game.Levels.Spinoza.L06_Summary
msgid "**Du**: Aber hätten wir die letzte Aufgabe nicht genauso gut per Widerspruch beweisen können?\n"
"\n"
"**Benedictus**: Klar. Ich dachte nur, ein zweiter Widerspruchsbeweis wäre langweilig. Aber Ihr könnt die Aufgabe gern noch einmal probieren. Hier, ich gebe Sie Euch mit auf die Reise. Aber nun seht zu, dass Ihr weiterkommt!"
msgstr ""

#: Game.Levels.Spinoza.L06_Summary
msgid "Sobald Ihr Euch sicher vom Gravitationsfeld des Asteroiden befreit habt, beugt Ihr\n"
"Euch wieder über die Aufgabe.\n"
"\n"
"**Robo**: Okay, also diesmal fangen wir mit `by_contra g` an!"
msgstr ""

#: Game.Levels.Spinoza.L06_Summary
msgid "**Robo**: Jetzt würde ich einen Widerspruch zu `Odd (n ^ 2)` führen."
msgstr ""

#: Game.Levels.Spinoza.L06_Summary
msgid "**Robo**: Also `suffices d : ¬ Odd (n ^ 2)`."
msgstr ""

#: Game.Levels.Spinoza.L06_Summary
msgid "**Robo**: Bravo! Hier ein Überblick, was uns Benediktus gezeigt hat.\n"
"\n"
"\n"
"|       | Taktik          | Beispiel                                               |\n"
"|:------|:----------------|:-------------------------------------------------------|\n"
"| 17    | `have`          | Zwischenresultat annehmen                              |\n"
"| 18    | `suffices`      | Zwischenresultat annehmen                              |\n"
"| 19    | `by_contra`     | Widerspruch *(startet einen Widerspruchsbeweis)*       |\n"
"| *3*   | `contradiction` | *(schliesst einen Widerspruchsbeweis)*                 |\n"
"| 20    | `contrapose`    | Kontraposition                                         |\n"
"| *9*   | `revert`        | nützlich, um danach `contrapose` anzuwenden            |"
msgstr ""

#: Game.Levels.Spinoza
msgid "Spinoza"
msgstr ""

#: Game.Levels.Spinoza
msgid "**Robo**: Ich glaube, das ist Spinoza, einer der ganz wenigen Asteroiden vom Type QED. Schnell. Wir müssen uns ein bisschen beeilen, sonst verpassen wir ihn.\n"
"\n"
"Eine halbe Stunde später seid ihr gelandet. Sehr einladend wirkt Spinoza nicht. Seine gesamte Oberfläche ist von feinem, rötlichen Sand bedeckt.\n"
"Ein einziger, einsamer Formalosoph, der sich als Benedictus vorstellt, erwartet euch.\n"
"\n"
"**Benedictus**: Schön, dass Ihr gekommen seid! Ich habe schon auf Euch gewartet!\n"
"\n"
"**Du**: Hast du auch ein paar dringende Fragen … ?\n"
"\n"
"**Benedictus**: Ach nein, aus dem Alter bin ich heraus. Aber ich kann mir denken, wie es Euch auf Implis und Quantus ergangen ist. Und glaubt, mir auf den anderen Planeten wird es nicht viel besser. Aber ich kann Euch vielleicht ein bisschen vorbereiten.\n"
"\n"
"**Du**: Können wir nicht einfach hier bleiben und uns ein wenig ausruhen?\n"
"\n"
"Benedictus schüttelt den Kopf.\n"
"\n"
"**Benedictus**: Nein. Spinoza verträgt keine drei Bewohner. Und Ihr müsst bald wieder weiter, sonst wird der Weg zu weit. Wir kommen nur alle 400 Jahre bei den Planeten vorbei."
msgstr ""

#: Game.Levels.Luna.L01_LE
msgid "Kleinergleich"
msgstr ""

#: Game.Levels.Luna.L01_LE
msgid "Du fühlst dich ein wenig überfahren, aber versuchst trotzdem, ein Gespräch zu beginnen.\n"
"\n"
"**Du**: Ist gut, wir bemühen uns, nichts durcheinander zu bringen. Ist es sehr schwer,\n"
"hier Ordnung zu halten.\n"
"\n"
"**Lina**: Nun, man muss schon das ein oder andere wissen … Zum Glück hilft mir Ritha.\n"
"Wenn Du mal probieren willst … hier ist mir gestern etwas verrutscht."
msgstr ""

#: Game.Levels.Luna.L01_LE
msgid "**Robo**: Denk lieber nicht zu lange darüber nach. Das ist eine Kuriosität,\n"
"dass `m < n` auf `ℕ` per Definition als `m + 1 ≤ n` definiert ist!\n"
"\n"
"**Lina**: Du verdirbst den Witz! Ich wollte ihn doch nur testen."
msgstr ""

#: Game.Levels.Luna.L01_LE
msgid "**Du**: Ha, ha … Und was muss man noch wissen?"
msgstr ""

#: Game.Levels.Luna.L02_Pos
msgid "Kleinergleich"
msgstr ""

#: Game.Levels.Luna.L02_Pos
msgid "**Lina**: Man muss zum Beispiel wissen, dass `n ≠ 0` für natürliche Zahlen nichts anderes\n"
"bedeutet als `0 < n`.\n"
"\n"
"**Robo**: Und da gibts leider keinen Standard zu …\n"
"\n"
"**Ritha**: Man kann das einfach mit `Nat.pos_iff_ne_zero` umschreiben. Aber wenn man neu hier\n"
"ist, sollte man das vielleicht noch einmal selbst beweisen?"
msgstr ""

#: Game.Levels.Luna.L02_Pos
msgid "**Robo** (*flüsternd*): Wenn du ein bisschen schwere Maschinerie auffahren willst,\n"
"um sie zu beeindrucken, hab ich was. Mach doch eine Fallunterscheidung ob `n` Null ist\n"
"oder nicht!\n"
"\n"
"**Du** (*flüsternd*): Wer will hier wen beeindrucken?\n"
"\n"
"**Robo** (*laut und selbstsicher*): Wir fangen mit `obtain ⟨⟩ := n an!"
msgstr ""

#: Game.Levels.Luna.L02_Pos
msgid "**Du**: Hmm, das muss man doch vereinfachen können.\n"
"\n"
"**Robo** (*flüsternd*): Zweiter pompöser Auftritt: sag einfach `simp` und lass das alles\n"
"automatisch geschehen."
msgstr ""

#: Game.Levels.Luna.L02_Pos
msgid "**Du**: Ah und jetzt falls `n ≠ 0`."
msgstr ""

#: Game.Levels.Luna.L02_Pos
msgid "**Robo**: Warte! Für den Rest zitieren wir einfach ein anderes Lemma: `Nat.suc_pos`."
msgstr ""

#: Game.Levels.Luna.L02_Pos
msgid "**Robo**: Warte! Für den Rest zitieren wir einfach ein anderes Lemma: `Nat.suc_pos`."
msgstr ""

#: Game.Levels.Luna.L02_Pos
msgid "**Du**: `simp` ist ja echt nicht schlecht …"
msgstr ""

#: Game.Levels.Luna.L03_Linarith
msgid "Linarith"
msgstr ""

#: Game.Levels.Luna.L03_Linarith
msgid "**Ritha**: Und wie wär's hiermit?"
msgstr ""

#: Game.Levels.Luna.L03_Linarith
msgid "**Du**: `simp` geht hier nicht vermutlich nicht …\n"
"\n"
"**Robo**: Nein, ist ja auch keine Vereinfachung, die du machen willst.\n"
"\n"
"**Lina**: Hier brauchst Du unser absolutes Powertool!\n"
"\n"
"**Ritha**: `linarith`"
msgstr ""

#: Game.Levels.Luna.L03_Linarith
msgid "**Du**: Naja, so beeindruckend war das jetzt auch noch nicht."
msgstr ""

#: Game.Levels.Luna.L04_Linarith
msgid "Linarith"
msgstr ""

#: Game.Levels.Luna.L04_Linarith
msgid "**Robo**: Dann versuchs mal hiermit!\n"
"\n"
"$$\n"
"\\begin{aligned}\n"
"  5 * y &\\le 35 - 2 * x \\\\\n"
"  2 * y &\\le x + 3\n"
"\\end{aligned}\n"
"$$"
msgstr ""

#: Game.Levels.Luna.L04_Linarith
msgid "**Du**: Boah, nicht schlecht."
msgstr ""

#: Game.Levels.Luna.L05_Trichotomy
msgid "Trichotomie"
msgstr ""

#: Game.Levels.Luna.L05_Trichotomy
msgid ""
msgstr ""

#: Game.Levels.Luna.L05_Trichotomy
msgid "**Robo**: Ein sehr nützliches Resultat ist `lt_trichotomy «{x}» «{y}»`:\n"
"\n"
"$«{x}» < «{y}»$ oder $«{x}» = «{y}»$ oder $«{x}» > «{y}»$\n"
"\n"
"Typischerweise kann man dieses wie folgt verwenden:\n"
"\n"
"```\n"
"obtain h | h | h := lt_trichotomy x y\n"
"```"
msgstr ""

#: Game.Levels.Luna.L05_Trichotomy
msgid "**Robo**: Beachte, dass du jetzt 3 Goals hast, eines pro Fall!"
msgstr ""

#: Game.Levels.Luna.L05_Trichotomy
msgid ""
msgstr ""

#: Game.Levels.Luna
msgid "Luna"
msgstr ""

#: Game.Levels.Luna
msgid "Robo hat einen kleinen Mond entdeckt, auf den ihr jetzt zusteuert.\n"
"Er hat eine ganz glatte Oberfläche, aber an einer Stelle hat die Oberfläche eine kleine\n"
"Öffnung, von der eine Treppe ins Innnere führt. Ihr landet und steigt neugierig hinab.\n"
"\n"
"Unten angekommen findest du dich in der aufgeräumtesten Wohnung wieder, die du je gesehen hast.\n"
"Ein kleines Mädchen begrüßt Euch.\n"
"\n"
"**Lina**: Ich bin Lina, die einzige Bewohnerin von Luna.\n"
"\n"
"Dann sieht sie Robo.\n"
"\n"
"**Lina**: Naja, eigentlich sind wir hier auch zu zweit …\n"
"\n"
"Sie dreht sich um und ruft etwas, da kommt ein Smart-Elf angefahren.\n"
"\n"
"**Lina**: Das ist Ritha!\n"
"\n"
"Robo findet sie offensichtlich süß.\n"
"\n"
"**Lina**: Aber jetzt steht mal hier nicht so unordentlich herum, bitte! Schuhe und Helme dort\n"
"und dort verstauen, und dann stellt Euch auf die markierten Besucher-Standpunkte. Sonst komme\n"
"ich hier noch ganz durcheinander."
msgstr ""

#: Game.Levels.Babylon.L01_Simp
msgid "Simp"
msgstr ""

#: Game.Levels.Babylon.L01_Simp
msgid "**Babylonier**: Jeder Turm hat eine Inschrift. Da könnt ihr noch einmal genau nachlesen,\n"
"warum er steht. Hier zum Beispiel."
msgstr ""

#: Game.Levels.Babylon.L01_Simp
msgid "**Du**: Oh das ist ganz schön viel neues … mal sehen …\n"
"\n"
"Das sieht aus wie $( \\sum_i 0 + 0 ) = 0$.\n"
"\n"
"**Robo**: Genau! Man schreibt `\\sum`. Und `i : Fin n` bedeutet,\n"
"dass summiert wird über $0$, $1$, …, $n-1$.\n"
"\n"
"**Du**: Okay. Und was mach ich jetzt?\n"
"\n"
"**Robo**: `simp` ist eine starke Taktik, die viele Terme vereinfacht.\n"
"Wir fangen besser an, sie zu benutzen."
msgstr ""

#: Game.Levels.Babylon.L01_Simp
msgid "**Babylonier**: Seht ihr, das passt!\n"
"\n"
"**Robo**: Mir fällt gerade ein, du hattest ja mal gefragt bezüglich `rw` unter Quantoren.\n"
"Mit Summen ist das das gleiche: Hier musst du immer `simp_rw` verwenden, wenn du innerhalb\n"
"einer Summe was umschreiben möchtest."
msgstr ""

#: Game.Levels.Babylon.L02_Sum
msgid "endliche Summe"
msgstr ""

#: Game.Levels.Babylon.L02_Sum
msgid "Ihr schaut euch den nächsten Turm an."
msgstr ""

#: Game.Levels.Babylon.L02_Sum
msgid "$\\sum_{i=0}^{n-1} 2 = n × 2$."
msgstr ""

#: Game.Levels.Babylon.L03_Sum
msgid "endliche Summe"
msgstr ""

#: Game.Levels.Babylon.L03_Sum
msgid "Ihr schaut euch den nächsten Turm an."
msgstr ""

#: Game.Levels.Babylon.L03_Sum
msgid "$\\sum_{i=0}^{n-1} (i + 1) = n + \\sum_{i=0}^{n-1} i$."
msgstr ""

#: Game.Levels.Babylon.L03_Sum
msgid "**Du**: Hmm, wieder `simp`?\n"
"\n"
"**Robo**: Nicht ganz. `simp` benutzt nur Lemmata, die klar eine Vereinfachung darstellen.\n"
"Im Lean-Duden sind diese Lemmata mit `@[simp]` markiert.\n"
"Hier brauchen wir aber folgende Identität:\n"
"\n"
"$$\n"
"\\sum_{i = 0}^n a_i + b_i = \\sum_{i = 0}^n a_i + \\sum_{j = 0}^n b_j\n"
"$$\n"
"\n"
"**Robo**: Und da bei dieser Identität unklar ist, welche Seite „einfacher“ ist, wird so ein Lemma nicht mit\n"
"`@[simp]` markiert.\n"
"\n"
"**Du**: Hat diese Gleichheit denn wenigstens einen Namen.\n"
"\n"
"**Robo**: Sie heißt `sum_add_distrib`."
msgstr ""

#: Game.Levels.Babylon.L03_Sum
msgid "**Robo**: Die zweite Summe `∑ x : Fin n, 1` kann jetzt aber mit\n"
"`simp` zu `n` vereinfacht werden."
msgstr ""

#: Game.Levels.Babylon.L03_Sum
msgid "**Robo**: Bis auf Umordnung sind jetzt beide Seiten gleich!\n"
"\n"
"**Du**: Dann greift jetzt wohl `ring`!\n"
"\n"
"**Robo**: Genau! Und alternativ könntest du mit `rw [add_comm]` die Arbeit von `ring`\n"
"auch manuell machen."
msgstr ""

#: Game.Levels.Babylon.L03_Sum
msgid ""
msgstr ""

#: Game.Levels.Babylon.L03_Sum
msgid "Der Babylonier macht ein sehr zufriedenes Gesicht."
msgstr ""

#: Game.Levels.Babylon.L04_ArithSum
msgid "Arithmetische Summe"
msgstr ""

#: Game.Levels.Babylon.L04_ArithSum
msgid "**Babylonier**: Kommt, ich zeig Euch mal einen unserer schönsten Türme!\n"
"\n"
"Nach einem kurzen Spaziergang steht ihr davon.\n"
"\n"
"**Robo**: Das muss der bekannte *Gaußsche Turm von Babylon* sein!\n"
"Über den hab ich schon einmal Daten verarbeitet.\n"
"\n"
"**Babylonier**: Richtig. Gauß war ein Babylonier!"
msgstr ""

#: Game.Levels.Babylon.L04_ArithSum
msgid "$2 \\cdot \\sum_{i = 0}^n i = n \\cdot (n + 1)$."
msgstr ""

#: Game.Levels.Babylon.L04_ArithSum
msgid "**Du**: Klar, die werden ja nicht oben anfangen mit bauen. Sag mal,\n"
"wie zeige ich denn die arithmetische Summe, die hier gekritzelt steht?\n"
"Ich würde gerne Induktion über $n$ anwenden.\n"
"\n"
"**Robo**: Wenn du meinst … Auf Leansch wäre das: `induction n with d hd`!\n"
"Der Zusatz `with d hd` ist natürlich optional.\n"
"Du kannst damit Namen für Induktionsvariable (d) und -hypothese (h) vorgeben."
msgstr ""

#: Game.Levels.Babylon.L04_ArithSum
msgid "**Du**: Zuerst der Induktionsanfang …\n"
"\n"
"**Robo**: Diesen kannst du oft mit `simp` abkürzen!"
msgstr ""

#: Game.Levels.Babylon.L04_ArithSum
msgid "**Robo**: Jetzt der Induktionsschritt.\n"
"Bei Induktion über endlichen Summen beginnst du den Induktionsschritt\n"
"immer mit `rw [sum_univ_castSucc]`."
msgstr ""

#: Game.Levels.Babylon.L04_ArithSum
msgid "**Du**: Oh das sieht jetz aber kompliziert aus…\n"
"\n"
"**Robo**: Da musst du etwas darüber hinweg lesen. Am besten machst du kurz `simp`,\n"
"dann sieht's schon wieder besser aus."
msgstr ""

#: Game.Levels.Babylon.L04_ArithSum
msgid "**Du**: Was bedeutet eigentlich der kleine Pfeil `↑`?\n"
"\n"
"**Robo**: Das ist eine *Coersion*. Sowas wie wenn man eine natürliche Zahl als ganze Zahl betrachtet,\n"
"also die natürliche Abbildung `ℕ ↪ ℤ` benutzt. Oder hier, wenn ein Element `x : Fin n` als\n"
"Element `↑x : ℕ` betrachtet wird."
msgstr ""

#: Game.Levels.Babylon.L04_ArithSum
msgid "**Robo**: Um die Induktionshypothese anzuwenden, brauchst du zuerst das Lemma `mul_add`."
msgstr ""

#: Game.Levels.Babylon.L04_ArithSum
msgid "**Du**: Und wie wende ich jetzt die Induktionshypothese an?\n"
"\n"
"**Robo** mit `rw` wie jede andere Annahme auch."
msgstr ""

#: Game.Levels.Babylon.L04_ArithSum
msgid "**Du**: Der Rest ist einfach Rechnerei.\n"
"\n"
"**Robo**: Dann wird `ring` wohl keine Probleme haben."
msgstr ""

#: Game.Levels.Babylon.L04_ArithSum
msgid "Du schaust dich um und bewunderst das Tal in dem hunderte, wenn nicht tausende,\n"
"Steintürme in allen Formen und Höhen stehen."
msgstr ""

#: Game.Levels.Babylon.L05_SumOdd
msgid "Summe aller ungeraden Zahlen"
msgstr ""

#: Game.Levels.Babylon.L05_SumOdd
msgid "Aus reiner Neugierde gehst Du zu einem etwas kleineren Nachbarsturm hinüber."
msgstr ""

#: Game.Levels.Babylon.L05_SumOdd
msgid "$\\sum_{i = 0}^{n-1} (2i + 1) = n ^ 2$."
msgstr ""

#: Game.Levels.Babylon.L05_SumOdd
msgid "**Robo**: Das funktioniert genau gleich wie zuvor, viel Glück."
msgstr ""

#: Game.Levels.Babylon.L05_SumOdd
msgid "Den Induktionschritt bei Summen solltest du wie gesagt\n"
"immer mit `rw [sum_univ_castSucc]` beginnen."
msgstr ""

#: Game.Levels.Babylon.L06_SumComm
msgid "Summe vertauschen"
msgstr ""

#: Game.Levels.Babylon.L06_SumComm
msgid "**Babylonier**: Schaut mal, da vorn stehen zwei Freunde von mir. Ich muss euch unbedingt vorstellen!\n"
"\n"
"Die beiden Freunde stehen vor zwei Türmen mit einer kleinen Brücke, die zwischen den ihnen verläuft.\n"
"Aber die Tafel am Eingang ist so sehr verwittert, dass sie nicht mehr lesbar ist.\n"
"Auf der oberen Hälfte steht nur folgendes, *in einer Form, die Du verstehst*:\n"
"\n"
"$$\\sum_{i=0}^n\\sum_{j=0}^m a_{ij} = \\sum_{j=0}^m\\sum_{i=0}^n a_{ij}$$\n"
"\n"
"Natürlich fangt ihr an zu rätseln, was darunter stand.\n"
"\n"
"**Robo**: Probier mal, das im lokalen Dialekt zu formulieren."
msgstr ""

#: Game.Levels.Babylon.L06_SumComm
msgid "**Robo**: Das sieht gut aus, aber du solltest das kurz beweisen, um sicher zu sein.\n"
"\n"
"**Du**: Hast du nicht ein Lemma dafür?\n"
"\n"
"**Robo**: Doch, probier mal `sum_comm`."
msgstr ""

#: Game.Levels.Babylon.L06_SumComm
msgid "Die drei Babylonier sind begeistert, als ihr ihnen das Stück Papier überreicht,\n"
"  auf das du die Aussage gekritzelt hast. Gleich zückt einer einen Meißel und sie beginnen, eine\n"
"  neue Platte zu erstellen.\n"
"\n"
"  Ihr beschließt, euch noch ein bisschen allein umzusehen."
msgstr ""

#: Game.Levels.Babylon.L07_Summary
msgid "Zusammenfassung"
msgstr ""

#: Game.Levels.Babylon.L07_Summary
msgid "**Du**: Robo, gib mir doch nochmals eine Übersicht, bitte.\n"
"\n"
"**Robo**: Aber klar:\n"
"\n"
"|                      | Beschreibung                              |\n"
"|:---------------------|:------------------------------------------|\n"
"| `Fin n`              | Ist ein Typ mit Zahlen $0, \\ldots, n-1$. |\n"
"| `∑ (i : Fin n), a i` | $\\sum_{i=0}^{n-1} a_i$                   |\n"
"| `↑i`                 | Eine Coersion, z.B. `Fin n → ℕ`.          |\n"
"\n"
"und\n"
"\n"
"|    | Taktik                    | Beispiel                             |\n"
"|:---|:--------------------------|:-------------------------------------|\n"
"| 21 | `simp`                    | Simplifikation.                      |\n"
"| 22 | `induction n`             | Induktion über $n$                   |\n"
"\n"
"Da kommt hinter einem Turm plötzlich ein besonders großer Babylonier hervor, schaut euch\n"
"bedrohlich an und fragt in tiefer Stimme:"
msgstr ""

#: Game.Levels.Babylon.L07_Summary
msgid "**Du**: Gulp. Naja das wird schon klappen. Also man fängt wieder mit Induktion an …"
msgstr ""

#: Game.Levels.Babylon.L07_Summary
msgid "**Du**: Also den Induktionsanfang kann man einfach zeigen …"
msgstr ""

#: Game.Levels.Babylon.L07_Summary
msgid "**Robo**: Und jetzt wieder `rw [sum_univ_castSucc]` und `simp`, um vorwärts zu\n"
"kommen!"
msgstr ""

#: Game.Levels.Babylon.L07_Summary
msgid "**Robo**: Siehst du die Induktionshypothese hier drin?"
msgstr ""

#: Game.Levels.Babylon.L07_Summary
msgid "**Du**: Okay, damit habe ich die linke Seite der Gleichung ziemlich gut bearbeitet.\n"
"Aber, ehm, mit der Rechten komme ich nicht weiter …\n"
"\n"
"Der Babylonier schaut dich finster an.\n"
"\n"
"**Du**: Ich will `sum_univ_castSucc` auf der rechten Seite anwenden, aber es gibt mehrere Orte, wo das Lemma passen würde, und ich will es nur an einer bestimmten Stelle anwenden.\n"
"\n"
"**Robo**:\n"
"Mit `rw [sum_univ_castSucc (n := «{n}» + 1)]` kannst du angeben, wo genau.\n"
"\n"
"**Du**: Was bedeutet das?\n"
"\n"
"**Robo** Das Lemma hat eine Annahme `n` und du sagst ihm explizit, was es für dieses `n`\n"
"einsetzen muss, nämlich `«{n}» + 1`"
msgstr ""

#: Game.Levels.Babylon.L07_Summary
msgid "**Robo**: Das hat jetzt einfach `Fin.sum_univ_castSucc` am ersten Ort angewendet,\n"
"wo das möglich war. Das ist nicht so ideal, die linke Seite war schon okay.\n"
"\n"
"**Robo**: Geh doch zurück und bring `rw` dazu am anderen Ort umzuschreiben."
msgstr ""

#: Game.Levels.Babylon.L07_Summary
msgid "**Robo**: `add_pow_two` ist auch noch nützlich!"
msgstr ""

#: Game.Levels.Babylon.L07_Summary
msgid "**Du**: Ich glaube, ich sehe hier eine Gaußsche Summe!!\n"
"\n"
"**Robo**: Ich habe dir das vorhin temporär als `arithmetic_sum` gespeichert.\n"
"Das kannst du jetzt benutzen."
msgstr ""

#: Game.Levels.Babylon.L07_Summary
msgid "**Du**: Jetzt sollten es eigentlich nur noch arithmetische Operationen sein."
msgstr ""

#: Game.Levels.Babylon.L07_Summary
msgid "Der Babylonier denkt ganz lange nach, und ihr bekommt das Gefühl, dass er gar nie\n"
"aggressiv war, sondern nur eine sehr tiefe Stimme hat.\n"
"\n"
"Mit einem kleinen Erdbeben setzt er sich hin und winkt euch dankend zu."
msgstr ""

#: Game.Levels.Babylon
msgid "Babylon"
msgstr ""

#: Game.Levels.Babylon
msgid "Ihr erreicht einen Planet, auf dem unzählige Steinplatten zu bizzar hohen Türme\n"
"gestapelt sind. Die ganze Landschaft wirkt wie ein grosses Puzzle, in dem jede Platte\n"
"feinsäuberlich auf den darunterliegenden Platten aufbaut. Einige Türme sind so hoch, dass man ihre Spitze gar nicht erkennen kann. Bald trefft ihr auch den ersten Bewohner dieses Planeten an.\n"
"\n"
"**Babylonier**: Willkommen auf *Babylon*!\n"
"\n"
"**Du**: Oh …\n"
"\n"
"Dich beschleicht ein ungutes Gefühl.\n"
"\n"
"**Du**: Seid ihr euch sicher, dass diese Türme stabil sind?\n"
"\n"
"**Babylonier**: 100 Pro!\n"
"\n"
"**Du**: Wie baut ihr denn diese Meisterwerke?\n"
"\n"
"**Babylonier**: Ganz einfach! Ein Stein nach dem anderen."
msgstr ""

#: Game.Levels.Cantor.L00_CantorPowerset
msgid "Cantor's Diagonalargument"
msgstr ""

#: Game.Levels.Cantor.L00_CantorPowerset
msgid "**Cantor**: Wusstet ihr dass es keine surjektiven Funktionen `f : A → Set A` gibt? Faszinierend\n"
"oder?\n"
"\n"
"**Cantor**: Wie das geht? Hier, ist eine kleine Hilfe:"
msgstr ""

#: Game.Levels.Cantor.L00_CantorPowerset
msgid ""
msgstr ""

#: Game.Levels.Cantor.L00_CantorPowerset
msgid "**Robo**: Denk daran, dass `mem_setOf` aus `Set` irgendwann hilfreich sein wird."
msgstr ""

#: Game.Levels.Cantor.L00_CantorPowerset
msgid "**Du**: Ich denke eine Fallunterscheidung auf `«{a}» ∈ «{f}» «{a}»` könnte sinnvoll sein."
msgstr ""

#: Game.Levels.Cantor.L00_CantorPowerset
msgid "**Robo**: Das wäre `by_cases h₁ : «{a}» ∈ «{f}» «{a}»`."
msgstr ""

#: Game.Levels.Cantor.L00_CantorPowerset
msgid "**Robo**: Mach mal mit `suffices : «{a}» ∉ «{f}» «{a}»` weiter!"
msgstr ""

#: Game.Levels.Cantor.L01_CantorPowerset
msgid "Cantor's Diagonalargument"
msgstr ""

#: Game.Levels.Cantor.L01_CantorPowerset
msgid "**Cantor**: Also und jetzt die eigentliche Aussage!"
msgstr ""

#: Game.Levels.Cantor.L01_CantorPowerset
msgid "**Du**: Uff. Aber ehrlich habe ich die das \"Diagonale\" daran noch nicht\n"
"ganz gesehen.\n"
"\n"
"\n"
"**Cantor**: Natürlich, das kann ich euch zeigen, aber da muss ich etwas ausholen…"
msgstr ""

#: Game.Levels.Cantor.L01_CantorPowerset
msgid "**Du**: Also ein Widerspruchsbeweis?"
msgstr ""

#: Game.Levels.Cantor.L01_CantorPowerset
msgid "**Robo**: als Erinnerung: Wenn du so etwas wie `?f` siehst, bedeutet das, dass\n"
"noch nicht spezifiziert wurde welche Funktion benützt wird. Du hättest besser\n"
"`apply cantor_helper f` geschrieben. Aber du kannst auch einfach mal weitermachen, als ob `?f`\n"
"schon `«{f}»` wäre, und vermutlich wird Lean das irgendwann automatisch einfüllen."
msgstr ""

#: Game.Levels.Cantor.L01_CantorPowerset
msgid "**Cantor**: Wendet doch gleich das Resultat von vorhin an!\n"
"\n"
"**Robo**: Ich hab das als `cantor_helper f` gespeichert."
msgstr ""

#: Game.Levels.Cantor.L02_IsFixedPt_abs
msgid "Fixpunkte"
msgstr ""

#: Game.Levels.Cantor.L02_IsFixedPt_abs
msgid "**Du**: Also wie ist das mit der Diagonalen?\n"
"\n"
"**Cantor**: Um das genauer zu erläutern muss ich euch zuerst ein paar rätsel zu Fixpunkten stellen."
msgstr ""

#: Game.Levels.Cantor.L02_IsFixedPt_abs
msgid "**Robo**: `IsFixedPt f x` ist die Aussage `f x = x`.\n"
"\n"
"**Du**: Und `abs` ist der Betrag? Was mache ich damit?\n"
"\n"
"**Robo**: Ich denke so einfache Sachen, die `0` beinhalten kann `simp` ganz gut,\n"
"aber ich habe hier auch noch zwei Resultate, die hilfreich aussehen."
msgstr ""

#: Game.Levels.Cantor.L02_IsFixedPt_abs
msgid ""
msgstr ""

#: Game.Levels.Cantor.L02_IsFixedPt_abs
msgid ""
msgstr ""

#: Game.Levels.Cantor.L03_fixedPoints_neg
msgid "Fixpunkt"
msgstr ""

#: Game.Levels.Cantor.L03_fixedPoints_neg
msgid "**Cantor**: Oder schaut hier, die Menge der Fixpunkte von `-(·)` ist ein Singleton."
msgstr ""

#: Game.Levels.Cantor.L03_fixedPoints_neg
msgid "**Du**: `fixedPoints f` ist dann wohl die Menge aller Fixpunkte?\n"
"\n"
"**Robo**: Ja, genau: `fixedPoints f := { x | IsFixedPt f x }`.\n"
"\n"
"**Du**: Welche Optionen habe ich nochmals bei Gleichungen von Mengen?\n"
"\n"
"**Robo** Entweder du brauchst `ext x` um `x ∈ A ↔ x ∈ B` zu zeigen, oder\n"
"du benützt `rw [Subset.antisymm_iff]` um dann `A ⊆ B ∧ B ⊆ A` zu zeigen."
msgstr ""

#: Game.Levels.Cantor.L03_fixedPoints_neg
msgid ""
msgstr ""

#: Game.Levels.Cantor.L03_fixedPoints_neg
msgid ""
msgstr ""

#: Game.Levels.Cantor.L04_IsFixedPt_not
msgid "Keine Fixpunkte"
msgstr ""

#: Game.Levels.Cantor.L04_IsFixedPt_not
msgid "**Cantor**: Aber auf was ich eigentlich hinaus wollte, ist die Fixpunkte von `¬` anzuschauen;\n"
"Es gibt nämlich keine!"
msgstr ""

#: Game.Levels.Cantor.L04_IsFixedPt_not
msgid "**Du**: Und was hatten jetzt Fixpunkte mit dem Diagonalargument zu tun?\n"
"\n"
"**Cantor**: Nur Geduld! Ich habe gerade so viel Spaß!"
msgstr ""

#: Game.Levels.Cantor.L04_IsFixedPt_not
msgid "**Du**: Ja, `¬(·)` hat keinen Fixpunkt, keine Aussage kann gleichzeitig\n"
"wahr und falsch sein!"
msgstr ""

#: Game.Levels.Cantor.L05_IsFixedPt_odd
msgid "Fixpunkte"
msgstr ""

#: Game.Levels.Cantor.L05_IsFixedPt_odd
msgid "**Cantor**: Zum Beispiel bei ungeraden Funktionen. Da sind die Fixpunkte symmetrisch.\n"
"\n"
"**Du** (*flüsternd zu Robo*): Das hat jetzt wirklich nichts mehr mit der ursprünglichen\n"
"Frage zu tun\n"
"\n"
"**Robo** (*leise*): Na komm schon, wir kommen bestimmt gleich dazu."
msgstr ""

#: Game.Levels.Cantor.L06_idempotent
msgid "Idempotent"
msgstr ""

#: Game.Levels.Cantor.L06_idempotent
msgid "**Cantor**: Also noch ein letztes Rätsel, dann kommen wir gleich zurück zum\n"
"Diagonalargument.\n"
"\n"
"**Robo**: Oh das sieht anspruchsvoller aus."
msgstr ""

#: Game.Levels.Cantor.L06_idempotent
msgid "**Du**: Etwas womit ich unsicher bin, wie spielt da wohl `«{f}» ∘ «{f}» = «{f}»` mit rein?\n"
"\n"
"**Robo**: Vermutlich willst du das irgendwann auf ein bestimmtes `x` anwenden.\n"
"\n"
"Dafür kannst du irgendwann `apply congr_fun at «{h}»` brauchen, damit\n"
"du `∀ x, («{f}» ∘ «{f}») x = «{f}» x` kriegst."
msgstr ""

#: Game.Levels.Cantor.L06_idempotent
msgid "**Robo**: Wir hatten einmal `Function.comp_apply`!"
msgstr ""

#: Game.Levels.Cantor.L07_CantorDiag_IsFixedPt
msgid "Diagonalargument"
msgstr ""

#: Game.Levels.Cantor.L07_CantorDiag_IsFixedPt
msgid "**Cantor**: Genug gerätselt, jetzt aber zum Diagonalargument. Wenn wir eine surjektive\n"
"Funktion `f : A → (A → Y)` haben, dann hat jede Funktion `s : Y → Y` einen Fixpunkt.\n"
"\n"
"**Du**: Und welcher Punkt ist das?\n"
"\n"
"**Cantor**: Gute Frage! Hier, ich geb euch eine Aufgabe um das herauszufinden."
msgstr ""

#: Game.Levels.Cantor.L07_CantorDiag_IsFixedPt
msgid "**Cantor**: Diese Aufgabe soll euch vermitteln, wie ihr den Fixpunkt kriegt!"
msgstr ""

#: Game.Levels.Cantor.L07_CantorDiag_IsFixedPt
msgid "**Du**: Also ist der Fixpunkt dieses diagonale Element `f b b`, für ein `b`\n"
"  das irgendwie aus der Surjektivität kommt…\n"
"\n"
"  **Cantor**: Und damit auf zum Hauptsatz!"
msgstr ""

#: Game.Levels.Cantor.L07_CantorDiag
msgid "Diagonalargument"
msgstr ""

#: Game.Levels.Cantor.L07_CantorDiag
msgid "**Cantor**: Viel Glück!"
msgstr ""

#: Game.Levels.Cantor.L07_CantorDiag
msgid "**Du**: Jetzt möchte ich aber mit dieser generellen Form, die ursprüngliche\n"
"Aufgabe nochmals lösen."
msgstr ""

#: Game.Levels.Cantor.L07_CantorDiag
msgid "**Cantor**: Mit der Aufgabe vorhin könnt\n"
"ihr sicher herausfinden, was das richtige `c : A → Y` ist, auf das ihr die Surjektivität\n"
"anwenden wollt."
msgstr ""

#: Game.Levels.Cantor.L07_CantorDiag
msgid "**Robo**: So viel weiss ich: die Funktion\n"
"definieren wir mit\n"
"\n"
"```\n"
"let c : A → Y := fun a ↦ _\n"
"```\n"
"\n"
"aber den Wert musst schon du herausfinden!"
msgstr ""

#: Game.Levels.Cantor.L07_CantorDiag
msgid "**Cantor**: Gute Wahl!"
msgstr ""

#: Game.Levels.Cantor.L07_CantorDiag
msgid "**Cantor**: Das sieht gut aus, jetzt können wir ja\n"
"`cantor_diagonal_isFixedPt` von vorhin brauchen!"
msgstr ""

#: Game.Levels.Cantor.L08_CantorPowerset
msgid "Diagonalargument"
msgstr ""

#: Game.Levels.Cantor.L08_CantorPowerset
msgid "**Du**: Und wie hängt das jetzt damit zusammen, dass es keine Surjektive Funktion\n"
"`f : A → Set A` gibt?\n"
"\n"
"**Cantor**: Ganz einfach, nehmt `s` als die Funktion `fun x ↦ ¬ x`.\n"
"\n"
"**Robo**: In Lean kann man nämlich eine Menge `U : Set A` mit dem Prädikat\n"
"`{ x : A | x ∈ U } : A → Prop` gleichsetzen, die sind per Definition dasselbe.\n"
"Damit kann man `f : A → Set A` auch als `f : A → A → Prop` sehen.\n"
"\n"
"**Du**: Und `{ a | a ∉ f a }` ist `s (f a a)` für `s : (fun x ↦ ¬ x)`, alles klar."
msgstr ""

#: Game.Levels.Cantor.L08_CantorPowerset
msgid "**Cantor**: Ein Widerspruchsbeweis ist die Kür der Mathematik."
msgstr ""

#: Game.Levels.Cantor.L08_CantorPowerset
msgid "**Du**: Also hier jetzt `cantor_diagonal` verwenden?"
msgstr ""

#: Game.Levels.Cantor.L08_CantorPowerset
msgid "**Robo**: Zum Beispiel mit `apply cantor_diagonal at «{h}»`!"
msgstr ""

#: Game.Levels.Cantor.L08_CantorPowerset
msgid "**Cantor**: Nein, nein! Wir wollten doch\n"
"mein schönes Theorem `cantor_diagonal` verwenden!"
msgstr ""

#: Game.Levels.Cantor.L08_CantorPowerset
msgid "**Cantor**: Wir hatten doch geübt, dass `¬(·)` keinen Fixpunkt hat.\n"
"\n"
"**Robo**: Das habe ich als `not_isFixedPt_not` gepspeichert"
msgstr ""

#: Game.Levels.Cantor
msgid "Cantor"
msgstr ""

#: Game.Levels.Cantor
msgid "Auf eurer Reise kommt ihr an einem Zwergplaneten vorbei. Darauf steht ein Haus mit unendlich vielen\n"
"Türen auf jeder Seite. Ihr macht euch einen Spass daran von einem Ecken aus gleichzeitig Türen\n"
"aufzutun und zu beobachten wie sich dein Schatten mit dem von Robo kreuzt.\n"
"\n"
"Dann entdeckt ihr einen Mann, der draussen sitzt. In der Hand hält er eine Schriftrolle\n"
"auf der unendliche Zahlenfolgen geschrieben sind, und die Rolle scheint in einem riesigen\n"
"Haufen ausgerolltem Papier zu enden.\n"
"\n"
"Die Person stellt sich euch als Cantor der Magier vor."
msgstr ""

#: Game.Levels.Robotswana.L01_SMulEBasis
msgid "Standardbasis"
msgstr ""

#: Game.Levels.Robotswana.L01_SMulEBasis
msgid "Den Spuren folgend, findet ihr ein Stück Pergament, auf dem zuoberst\n"
"eine Notiz steht.\n"
"\n"
"```\n"
"E i j := stdBasisMatrix i j (1 : ℝ)\n"
"```\n"
"\n"
"Darunter ein bisschen wildes Gekritzel, das aber deutlich mit einer klaren\n"
"Zeile angefangen hat:"
msgstr ""

#: Game.Levels.Robotswana.L01_SMulEBasis
msgid "`E i j` ist die `n × n`-Matrix (mit Werten in `ℝ`) mit einer `1` an\n"
"Stelle $(i, j)$ und null überall sonst.\n"
"\n"
"Bemerkung: Dies ist eine spezialisierte Form der generellen `stdBasisMatrix i j (a : R)`,\n"
"welche auch nicht-quadratisch sein kann und einen beliebigen Wert `a` aus einem beliebigen\n"
"Ring annehmen kann.\n"
"\n"
"Das Spiel bevorzugt `E`, um die Lesbarkeit zu erhöhen."
msgstr ""

#: Game.Levels.Robotswana.L01_SMulEBasis
msgid ""
msgstr ""

#: Game.Levels.Robotswana.L01_SMulEBasis
msgid "**Du**: Welches Wesen auch immer hier Spuren hinterlassen hat – mir scheint, es mag Matrizen. Was meints du?\n"
"\n"
"**Robo**: Ja! `stdBasisMatrix i j a` kenne ich, das ist die Matrix, die an der Position `(i, j)` den Eintrag `a` hat und sonst überall Null ist.\n"
"\n"
"**Du**: Und die `E`s sind dann einfach eine Abkürzung für den Fall `a = 1`?\n"
"\n"
"**Robo**: So sieht's aus. Und `A i j` ist einfach der Eintrag der Matrix `A` an der Position `(i, j)`.\n"
"\n"
"**Du**: Ah, verstehe. Da steht also kein Produkt von Matrizen, sondern nur eine Skalarmultiplikation. Etwas in der Art von …\n"
"\n"
"Du kritzelst auf das Papier:\n"
"\n"
"$$\n"
"A_{i,j} \\cdot\n"
"\\begin{pmatrix}\n"
"0 & 0 & 0\\\\\n"
"1 & 0 & 0 \\\\\n"
"0 & 0 & 0\n"
"\\end{pmatrix}\n"
"=\n"
"\\begin{pmatrix}\n"
"0 & 0 & 0\\\\\n"
"A_{i,j} & 0 & 0 \\\\\n"
"0 & 0 & 0\n"
"\\end{pmatrix}\n"
"$$\n"
"\n"
"**Du**: Dann ist das ja mal wieder… …offensichtlich!?\n"
"\n"
"**Robo**: Ja. Ich denke, wenn du mit `unfold E` anfängst, geht der Rest wie von selbst."
msgstr ""

#: Game.Levels.Robotswana.L01_SMulEBasis
msgid "**Du**: Und was machen wir jetzt mit dieser „Erkenntnis“?\n"
"\n"
"**Robo**: Keine Ahnung.  Ich speichere das jedenfalls mal als `Matrix.smul_ebasis` ab, falls wir es nochmals\n"
"brauchen.\n"
"\n"
"Damit folgt ihr weiter der Spur."
msgstr ""

#: Game.Levels.Robotswana.L02_EBasis
msgid "Falsche Indizes"
msgstr ""

#: Game.Levels.Robotswana.L02_EBasis
msgid "Kurze Zeit später findet ihr zwei sehr ähnlichen Zettel, wieder\n"
"vollgekritzelt, fast alles durchgestrichen.\n"
"Die erste Zeile aber lässt sich jeweils gerade noch ausmachen."
msgstr ""

#: Game.Levels.Robotswana.L02_EBasis
msgid "**Robo**: Ich speichere dieses `E.mul_of_ne` auch mal, wer weiß.\n"
"\n"
"  **Du**: Jetzt bin ich aber neugierig, wer diese Zettel hier verloren oder weggeworfen hat. Komm, lass uns weitergehen."
msgstr ""

#: Game.Levels.Robotswana.L02_EBasis
msgid ""
msgstr ""

#: Game.Levels.Robotswana.L02_EBasis
msgid "**Du**: Das sieht jetzt aber nach Matrizen-Multiplikation aus.\n"
"Müsste so auch stimmen."
msgstr ""

#: Game.Levels.Robotswana.L02_EBasis
msgid "**Robo**: Vergiss aber nicht, dass `simp` die Annahme `«{h}»` explizit braucht!"
msgstr ""

#: Game.Levels.Robotswana.L03
msgid "Richtige Indizes"
msgstr ""

#: Game.Levels.Robotswana.L03
msgid ""
msgstr ""

#: Game.Levels.Robotswana.L03
msgid "**Du**: Jetzt bin ich aber neugierig, wer diese Zettel hier verloren oder weggeworfen hat. Komm, lass uns weitergehen."
msgstr ""

#: Game.Levels.Robotswana.L03
msgid ""
msgstr ""

#: Game.Levels.Robotswana.L03
msgid "**Du**:  Sieht auch richtig aus."
msgstr ""

#: Game.Levels.Robotswana.L04_MatrixEqSum
msgid "Summe von Basiselementen"
msgstr ""

#: Game.Levels.Robotswana.L04_MatrixEqSum
msgid "Ihr kommt an eine Stelle, wo das Gras auf einer größeren, quadratischen\n"
"Fläche heruntergetrampelt ist. Spuren führen kreuz und queer und in verschiedene\n"
"Richtungen weg.\n"
"\n"
"Ein bisschen planlos sucht ihr die Stelle ab und findet verschiedenste Pergamentstücke.\n"
"Die meisten sind leer oder unleserlich, aber eines kannst du entziffern."
msgstr ""

#: Game.Levels.Robotswana.L04_MatrixEqSum
msgid "Du beschließt, einer besonders markanten Spur zu folgen. Robo zieht dir hinterher und schnappt\n"
"sich beim gehen noch ein willkürliches Stück Pergament vom Boden."
msgstr ""

#: Game.Levels.Robotswana.L04_MatrixEqSum
msgid "Sagt aus, dass man jede $(n × n)$-Matrix (über $\\mathbb{R}$) $A$ schreiben kann\n"
"als $A = \\sum_{i=0}^{n-1}\\sum_{j=0}^{n-1} A_{ij} \\cdot E(i, j)$.\n"
"\n"
"Siehe auch `matrix_eq_sum_std_basis`, welches die generalisierte Form für\n"
"$(m × n)$-Matrix (über beliebigem $R$) ist."
msgstr ""

#: Game.Levels.Robotswana.L04_MatrixEqSum
msgid "Die generellere Version von `matrix_eq_sum_ebasis`. Siehe dort."
msgstr ""

#: Game.Levels.Robotswana.L04_MatrixEqSum
msgid "**Du**: Das scheint einfach zu sagen, dass diese `E i j` ein Erzeugendensystem für den Raum der Matrizen bilden.\n"
"\n"
"**Robo**: Da kannst du bestimmt gleich die Resultate anwenden, die wir schon gefunden haben!"
msgstr ""

#: Game.Levels.Robotswana.L04_MatrixEqSum
msgid "**Robo**: Schau zuerst den Ausdruck `(A i j) • E i j` an. Unter Summen braucht man `simp_rw`."
msgstr ""

#: Game.Levels.Robotswana.L04_MatrixEqSum
msgid "**Robo**: Ja gut, du kannst auch einfach den Beweis vom ersten Pergament wiederholen.\n"
"Nur zu, Übung macht den Meister.\n"
"\n"
"**Du**: Schon gut, ich hab kein mechanisches Hirn wie du."
msgstr ""

#: Game.Levels.Robotswana.L04_MatrixEqSum
msgid "**Robo**: Ach ja!  So wie es jetzt hier steht, kenne ich die Aussage aus meiner Bibliothek.\n"
"Das ist genau `apply matrix_eq_sum_std_basis`.\n"
"\n"
"**Du**: Super! Dann brauchen wir uns ja gar nicht damit aufhalten."
msgstr ""

#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid "Einheitsmatrix"
msgstr ""

#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid "**Du**: Zeig mal, was hast du da? Was zur Einheitsmatrix? Passend für unsere Sammlung?\n"
"\n"
"**Robo**: Ja, schau. Ich glaube, hier kannst Du gleich mit `matrix_eq_sum_ebasis` beginnen.\n"
"\n"
"**Du**: Ich frage mich, ob wir noch wichtiges auf dem Platz zurückgelassen haben?\n"
"\n"
"**Robo**: Egal, jetzt sind wir schon ein gutes Stücken weiter. Probier jetzt hier einmal!"
msgstr ""

#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid "**Du**: Ich habe das Gefühl, wir sind jemandem auf der Spur, der sich für die\n"
"die Diagonale von Matrizen interessiert.  Aber ich bekomme langsam Durst!"
msgstr ""

#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid ""
msgstr ""

#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid "**Du**: Ich denke, die beiden Summen sind identisch, weil jeder Summand identisch ist.\n"
"Denkst du das funktioniert ähnlich wie mit den Funktionen, da bei dieser Bibliothek?\n"
"\n"
"**Robo**: Die beiden Taktiken `congr` und `ext` könnten dir hier tatsächlich helfen.\n"
"\n"
"*(von oben)*: Wurde noch nicht erklärt, aber zukünftig werden `ext` und\n"
"`congr` schon früher eingeführt."
msgstr ""

#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid "**Du**: Oh, jetzt habe ich nicht nur den Summationsindex, sondern auch noch die beiden\n"
"Indices `«{r}»,«{s}»` der Matrizen eingeführt. Aber das sollte passen. Nur… die verbleibende Summe\n"
"ist ja überall Null außer beim Index `«{i}»`.\n"
"\n"
"**Robo**: Ist das so?  Lass mich mal suchen…  Nicht schön, sollte aber funktionieren:  mit `rw [← Finset.sum_subset (Finset.subset_univ {«{i}»})]`\n"
"solltest du die Summe so umschreiben können, dass sie nur über dem Singleton `{«{i}»}` läuft."
msgstr ""

#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid "**Du**: Danke, das hilft! Dieser Schritt sollte einfach sein: Eine Summe über ein Element,\n"
"bei diesem ist `1 «{i}» «{i}»` wieder Eins, und `1 • _` vereinfacht sich auch!"
msgstr ""

#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid "**Robo**: `simp` klingt wirklich nach einer guten Idee."
msgstr ""

#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid "**Du**: Aber was mache ich hier? `«{h₂}»` sagt ja mehr oder weniger dass `«{i}» ≠ «{x}»` ist.\n"
"\n"
"**Robo**: Ja, aber nicht ganz. Führ das doch mit `have h₃ : «{i}» ≠ «{x}»` ein und zeig das kurz!"
msgstr ""

#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid "**Robo**: Umgekehrt wäre es nützlicher, da\n"
"`1 «{i}» «{x}»` als `if «{i}» = «{x}» then _ else _` definiert ist!\n"
"\n"
"**Du**: Du hast recht, ich brauch gleich `«{i}» = «{x}»` oder `«{i}» ≠ «{x}»`. Lass mich das ändern."
msgstr ""

#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid "**Du**: Als erstes würde ich mal schauen, ob sich `«{h₂}»` vereinfacht."
msgstr ""

#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid "**Du**: Hmm, jetzt ist das erstmal verdreht.\n"
"\n"
"**Robo**: Erinnere dich an `symm`!\n"
"\n"
"**Du**: Richtig, das brauchten wir ja schon bei diesem wilden Typen mit seinen Förderbändern."
msgstr ""

#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid "**Du**: Wie setze ich denn jetzt die Definition für `1 «{i}» «{x}»` ein?\n"
"\n"
"**Robo**: `Matrix.one_apply`!"
msgstr ""

#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid "**Robo**: Und da das falsch ist, kannst du mit `rw` und `if_neg` weiterkommen."
msgstr ""

#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid "Dieses Theorem sollte eigentlich woanders eingeführt werden"
msgstr ""

#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid "Dieses Theorem sollte eigentlich woanders eingeführt werden"
msgstr ""

#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid "Zwei Funktionen sind gleich, wenn sie auf allen Elementen gleich sind.\n"
"\n"
"Wenn das Goal `f = g` ist, kann man mit `ext i`, ein Element `i` einführen, und dann zeigen,\n"
"dass `f i = g i` ist.\n"
"\n"
"`ext` versucht, so viele Indices einzufügen wie möglich `funext i` führt nur den spezifizierten ein."
msgstr ""

#: Game.Levels.Robotswana.L05_EBasisDiagSum
msgid "`congr` versucht, eine Gleichung `_ = _` auf eine Gleichung von Untertermen zu reduzieren. Zum\n"
"Beispiel ein Goal der Form `f a = f b` wird durch `congr` zu `a = b` reduziert."
msgstr ""

#: Game.Levels.Robotswana.L06_EBasisEqOnDiag
msgid "Ein nihilierter Kommutator"
msgstr ""

#: Game.Levels.Robotswana.L06_EBasisEqOnDiag
msgid "Der Spur folgend kommt ihr an einem großen Baum. Im Schatten findet ihr ein regloses Etwas:\n"
"\n"
"$$\n"
"[A, B] = AB - BA\n"
"$$\n"
"\n"
"**Robo**:  Ach ja, ein Kommutator!\n"
"\n"
"**Du**: Der sieht aber ziemlich nihiliert aus.  Ich glaube, der ist verdurstet.\n"
"\n"
"**Robo**: Und schau, hier ist noch was in den Baum gekritzelt."
msgstr ""

#: Game.Levels.Robotswana.L06_EBasisEqOnDiag
msgid "**Robo**: Ich glaube, die Annahme, dass Kommutatoren nihiliert werden, nehmen wir jetzt erst\n"
"einmal mit.\n"
"\n"
"**Du**: Schön.  Sagte ich bereits, dass ich langsam Durst habe?"
msgstr ""

#: Game.Levels.Robotswana.L06_EBasisEqOnDiag
msgid ""
msgstr ""

#: Game.Levels.Robotswana.L06_EBasisEqOnDiag
msgid "**Du**: Mit anderen Worten: Wenn `f` Kommutatoren nihiliert, dann stimmen seine Werte\n"
"auf allen `E i i` überein. Stimmt das??\n"
"\n"
"**Robo**: Lass es uns herausfinden!"
msgstr ""

#: Game.Levels.Robotswana.L06_EBasisEqOnDiag
msgid "**Du**: Aber was soll ich denn mit unserer Annahme `«{h₁}»` anfangen!\n"
"Ich müsste überhaupt erst einmal eine Multiplikation haben.\n"
"\n"
"**Robo**: Du müsstest ein Matrizenprodukt `A * B` finden, für das  `f (E i i) = f (A * B) = f (E j j)` gilt.\n"
"Dann könnstest du `trans f (A * B)` schreiben, um zwei Beweisziele – `f (E i i) = f (A * B)` und `f (A * B) = f (E j j)` – zu erhalten,\n"
"bei denen `«{h₁}»` vielleicht anwendbar ist."
msgstr ""

#: Game.Levels.Robotswana.L06_EBasisEqOnDiag
msgid "**Robo**: Hatten wir nicht `E i k = (E i j) * (E j k)` auf einem dieser Zettel?"
msgstr ""

#: Game.Levels.Robotswana.L06_EBasisEqOnDiag
msgid "**Robo**: Hast du das nicht alles gemacht, weil du `«{h₁}»` brauchen\n"
"wolltest?\n"
"\n"
"**Du**: Ah ja, stimmt!"
msgstr ""

#: Game.Levels.Robotswana.L07_EBasisZeroOffDiag
msgid "Desinteresse"
msgstr ""

#: Game.Levels.Robotswana.L07_EBasisZeroOffDiag
msgid "Gleich neben dem Baum findest du noch eine Notiz, in der groß `E i j` durchgestrichen ist.\n"
"\n"
"**Du**: Soll wohl heißen: `E i j` mit i ≠ j interessieren uns nicht."
msgstr ""

#: Game.Levels.Robotswana.L07_EBasisZeroOffDiag
msgid "Die Spuren wirken mittlerweile viel frischer und ihr folgt ihnen schneller und\n"
"unvorsichtiger als zuvor."
msgstr ""

#: Game.Levels.Robotswana.L07_EBasisZeroOffDiag
msgid ""
msgstr ""

#: Game.Levels.Robotswana.L07_EBasisZeroOffDiag
msgid "**Robo**: Wie könnten wir denn hier `«{h₁}»` verwenden?\n"
"\n"
"**Du**: Wie wär's, wenn wir diesmal `E i j` als Produkt `E i j * E j j` schreiben?\n"
"\n"
"**Robo**:  Wieso gerade so?\n"
"\n"
"**Du**: Wenn ich in diesem Produkt die Faktoren vertausche, erhalte ich Null!  Hatten wir doch auch schon, `E.mul_of_ne` oder so etwas."
msgstr ""

#: Game.Levels.Robotswana.L07_EBasisZeroOffDiag
msgid "**Robo*: Wie du meinst. Dann probier doch am besten `trans f (E i j * E j j)`."
msgstr ""

#: Game.Levels.Robotswana.L07_EBasisZeroOffDiag
msgid "**Du**: Ehm, das sehe ich einfach von der Definition.\n"
"\n"
"**Robo**: Vergiss nicht `unfold E`, oder sag `simp`, dass es die Definition von `E` benutzen soll (`simp [E]`)."
msgstr ""

#: Game.Levels.Robotswana.L07_EBasisZeroOffDiag
msgid "**Robo**: Und hier wolltest du jetzt kommutieren?\n"
"\n"
"**Du**: Genau!"
msgstr ""

#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "Die Summe der Summe der Summe"
msgstr ""

#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "Ihr findet nochmals einen Hinweis, aber in der Eile verliert ihr die Fährte.\n"
"Du bist inzwischen sehr durstig.\n"
"Während Robo die nähere Umgebung absucht, setzt du dich erschöpft hin und\n"
"starrst unter der warmen Sonne etwas beduselt auf den Pergamentfetzen."
msgstr ""

#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "**Du**: Na endlich.\n"
"\n"
"Robo reicht dir eine Flasche Wasser.\n"
"\n"
"**Du**: Wo hast du die denn auf einmal her?\n"
"\n"
"**Robo**: Trick 17.\n"
"\n"
"**Du**:  Und hast du die Fährte wiedergefunden?\n"
"\n"
"**Robo**:  Ja, komm mit! Da hinten hab ich etwas gesehen."
msgstr ""

#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid ""
msgstr ""

#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "**Du**: Was das wohl jetzt soll …?\n"
"\n"
"Du kritzelst einen bisschen herum.\n"
"\n"
"$$\n"
"\\begin{aligned}\n"
"f(A)\n"
"&= f\\left( \\sum_{i,j} A_{i,j} ⬝ E_{i,j} \\right) \\\\\n"
"&= \\sum_{i,j} A_{i,j} ⬝ f(E_{i,j})   \\\\\n"
"&= \\sum_{i,j} A_{i,i} ⬝ f(E_{i,i})\n"
"\\end{aligned}\n"
"$$\n"
"\n"
"**Du**: Ja, so könnte das gehen.  Ich schreibe `A` als Summe von Basismatrizen,\n"
"nutze dann die Linearität, und zuletzt, dass `f` auf den `E i j` mit `i ≠ j` verschwindet.\n"
"\n"
"Vermutlich sollte ich also als erstes das `A` in `f A` als Summe von Basismatrizen\n"
"schreiben, nicht aber das andere `A` weiter hinten.\n"
"\n"
"**Robo** (*aus der Ferne*): `nth_rw 1 [ ... ]`! Funktioniert wie `rw`."
msgstr ""

#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "**Du** (*schreiend*): Was meinst du damit?\n"
"\n"
"**Robo** (*ebenfalls schreiend*): Na, du willst bestimmt `matrix_eq_sum_ebasis A` anwenden, aber mit `nth_rw 1` und nicht mit `rw`.\n"
"`rw [matrix_eq_sum_ebasis A]` würde beide `A`s ersetzen."
msgstr ""

#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "**Du**: Hmm, `rw` ist tatsächlich eine schlechte Idee.\n"
"Das sieht zu kompliziert aus. Lass es mich doch mit `nth_rw` versuchen."
msgstr ""

#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "**Du** (*in Gedanken*): Jetzt Linearität nutzen… Und ja nicht an Wasser denken…\n"
"Auf Babylon gabs genug Wasser… Woran war ich nochmals?"
msgstr ""

#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "**Robo** (*von irgendwo*): Das klingt nach `map_sum`.  Glaub nicht, dass wir\n"
"das auf Babylon gesehen haben, das fantasierst du. Aber `simp` kennt dieses Lemma bestimmt."
msgstr ""

#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "**Du**: Ah ja, im Zweifelsfall vereinfachen."
msgstr ""

#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "**Robo*: Wie weit bist du jetzt?\n"
"\n"
"**Du**: Ich muss noch irgendwie einbringen, dass `f` auf den `E i j` mit `i≠j` verschwindet.\n"
"\n"
"**Robo**: Mach doch folgenden Zwischenschritt:\n"
"\n"
"`trans ∑ i, ∑ j, if i = j then (A i j) * f (E i j) else 0`"
msgstr ""

#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "**Du**: Summe gleich Summe, `congr`-`ext` macht da der Dumme."
msgstr ""

#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "**Robo**: Vielleicht gleich nocheinmal?"
msgstr ""

#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "**Du**: Und jetzt Fallunterscheidung zu `«{i}» = «{j}»`…"
msgstr ""

#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "**Robo**: `by_cases` war das, genau!"
msgstr ""

#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "**Robo**: Hier ist `if_pos «{h₂}»` nützlich."
msgstr ""

#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "**Robo**: …und hier `if_neg «{h₂}»`.\n"
"\n"
"**Du**: Weiß ich doch."
msgstr ""

#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "**Du**: `f (E i j)` ist doch Null, hatten wir doch schon gesehen!"
msgstr ""

#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "**Robo**: Und das hieß `zero_on_offDiag_ebasis`."
msgstr ""

#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "**Du**: Und ich dachte schon das wär's.\n"
"\n"
"**Robo**: Fast, da ist noch die zweite Hälfte des `trans`-Befehls oben. Diese Hälfte\n"
"ist ganz einfach."
msgstr ""

#: Game.Levels.Robotswana.L08_EvalOnEBasis
msgid "Lineare Abbildungen (oder genereller \"additive\" Abbildungen) kann man mit einer\n"
"Summe vertauschen."
msgstr ""

#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid "Matrix"
msgstr ""

#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid "Keine fünfzig Meter weiter kommt ihr auf eine kleine Anhöhe.\n"
"Robo zeigt auf einen Punkt in der Ferne.\n"
"\n"
"**Robo**: Schau mal, da liegt es!\n"
"\n"
"**Du**: Und was *ist* das???\n"
"\n"
"**Robo**:  Weiß nicht.  Aber mein Gefühl sagt mir, diese Zettel sind eine Art Steckbrief.  Schau mal, hier ist noch einer.  Ich glaube, der sagt, wie groß es ist."
msgstr ""

#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid "**Du**: Okay. Lass uns vorsichtig näher gehen."
msgstr ""

#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid ""
msgstr ""

#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid "Du überlegst ein bisschen und kritzelst auf dem Papier herum.  Nach einer Weile:\n"
"\n"
"**Du**: Ich glaube, ich habe eine Idee! Das `(«{n}» + 1)`-fache der Gleichung kann ich mit den vorherigen Resultaten wie folgt nachrechnen:\n"
"$$\n"
"\\begin{aligned}\n"
"(n+1) \\cdot f(E_{i i})\n"
"&= \\sum_j f(E_{i i}) \\\\\n"
"&= \\sum_j f(E_{j j}) \\\\\n"
"&= f(1) \\\\\n"
"&= n + 1\n"
"\\end{aligned}\n"
"$$\n"
"\n"
"Der wesentlich Punkt ist, dass wir ja gesehen hatten, dass `f E i i` und `f E j j` für beliebige `i` und `j` gleich sind.  Also sind sie in der Summe austauschbar.\n"
"\n"
"**Robo**: Mmm.  Du willst jedenfalls zunächst ausnutzen, dass Multiplikation mit `(«{n}» + 1)` injektiv ist?\n"
"Da kann ich ausnahmsweise aushelfen:\n"
"`apply nat_mul_inj' (n := «{n}».succ)`!"
msgstr ""

#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid "**Robo**: Wenn ich dich richtig verstanden haben, willst du jetzt mehrmals `trans` anwenden, als erstes\n"
"`trans ∑ j : Fin n.succ, f (E i i)`."
msgstr ""

#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid "**Robo**: Oh, das ist jetzt aber nicht das, was du eben aufgeschrieben hattest.\n"
"Könnte aber auch funktionieren.\n"
"Probier mal `trans «{f}» (∑ j : Fin «{n}».succ, E «{i}» «{i}»)` als nächsten Schritt."
msgstr ""

#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid "**Du**: Genau, jetzt müssen wir für diese erste Gleichheit nur die konstante Summe ausrechnen.\n"
"\n"
"**Robo**: `simp [E]` kann das sicher komplett vereinfachen."
msgstr ""

#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid "**Du**: Als nächstes ziehen wir die Funktion in die Summe rein."
msgstr ""

#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid "**Du**: Und jetzt möchte ich die Gleichung durch einen Zwischenschritt\n"
"`«{f}» (∑ x, E x x)` zeigen."
msgstr ""

#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid "**Du**: Nein, das ist jetzt mathematisch falsch!"
msgstr ""

#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid "**Robo**: Jetzt wieder `congr`-`ext`?\n"
"\n"
"**Du**: Nein, zuerst, die Funktion in die Summe rein, sonst klappt das nicht."
msgstr ""

#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid "**Du**: Nochmals!"
msgstr ""

#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid "**Du**: Und das war ein Resultat, welches wir auf dem Weg gefunden haben."
msgstr ""

#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid "**Robo**: `eq_on_diag_ebasis` sagt meine Speicherplatte."
msgstr ""

#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid "**Robo**: Das sieht nach `ebasis_diag_sum_eq_one` aus."
msgstr ""

#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid "**Robo**: Das hatten wir schon gesehen."
msgstr ""

#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid "**Robo**: Das Resultat, das du hier anwenden wolltest, hieß `eq_sum_apply_diag_ebasis`."
msgstr ""

#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid "**Robo**: Probier mal `rw [«{h₂}»]`."
msgstr ""

#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid "Dieses Theorem sollte eigentlich woanders eingeführt werden"
msgstr ""

#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid "Dieses Theorem sollte eigentlich woanders eingeführt werden"
msgstr ""

#: Game.Levels.Robotswana.L09_EvalOnEBasis
msgid "Dieses Theorem sollte eigentlich woanders eingeführt werden"
msgstr ""

#: Game.Levels.Robotswana.L10_Characterize
msgid "Trace"
msgstr ""

#: Game.Levels.Robotswana.L10_Characterize
msgid "Ihr schleicht euch langsam an.\n"
"\n"
"**Du** (**flüsternd**): Ich glaube, du hattest Recht.  Diese Zettel sind eine Art Steckbrief!\n"
"Und sie beschreiben dieses Wesen hier eindeutig!\n"
"\n"
"**Robo**: Wie meinst du das?\n"
"\n"
"**Du**: Schau doch, seine Größe, seine Vorliebe für Kommutatoren, und all die anderen Sachen,\n"
"damit kann es eindeutig identifiziert werden kann!\n"
"\n"
"**Robo**: Das musst du mir genauer erklären.\n"
"\n"
"**Du**:  Ich versuch's mal. Gibt es in Leansch einen Namen für die Spur?\n"
"\n"
"**Robo**: Ja klar, die heißt natürlich `trace`.  Manche Formalosophen nennen sie auch liebevoll Tracy.\n"
"\n"
"Du nimmst einen der Pergamentfetzen und schreibst auf die Rückseite."
msgstr ""

#: Game.Levels.Robotswana.L10_Characterize
msgid "**Robo**: Tatsache. Du hattest Recht.\n"
"\n"
"Ihr beobachtet voller Entzücken dieses offenbar einzigartige Wesen auf diesem Planeten.\n"
"\n"
"Als ihr näher kommt, scheint euch Tracy zu bemerken.  Aber es scheint dadurch keinesfalls gestört\n"
"zu sein."
msgstr ""

#: Game.Levels.Robotswana.L10_Characterize
msgid ""
msgstr ""

#: Game.Levels.Robotswana.L10_Characterize
msgid "**Du**:  Hier sind noch einmal alle Eigenschaften zusammengefasst.\n"
"\n"
"**Robo**:  Und du behauptest, nur Tracy hat diese Eigenschaften?\n"
"\n"
"**Du**: Ja.  Ich glaube, das ist so.  Jedes `f`, dass diese Eigenschaften hat, verhält sich auch allen Matrizen genauso wie Tracy.  Und deshalb *ist* es Tracy!"
msgstr ""

#: Game.Levels.Robotswana.L10_Characterize
msgid "**Robo**: `ext`!"
msgstr ""

#: Game.Levels.Robotswana.L10_Characterize
msgid "**Du**: Und jetzt schreiben wir `f A` als Summe von Basiselementen."
msgstr ""

#: Game.Levels.Robotswana.L10_Characterize
msgid "**Robo**: Den Fall `n = 0` sehe ich sofort!\n"
"\n"
"**Du**: Wirklich?\n"
"\n"
"**Robo**: Ja, die Spur einer 0×0-Matrix ist per Definition `0`. Mach mal `obtain ⟨⟩ := n.\n"
"\n"
"**Du**: Nicht `induction n`?\n"
"\n"
"**Robo**: Geht auch, aber wir brauchen die Induktionshypothese nicht."
msgstr ""

#: Game.Levels.Robotswana.L10_Characterize
msgid "**Robo**: Ich hab im Kopf mal `simp` ausprobiert. Probier es auch mal."
msgstr ""

#: Game.Levels.Robotswana.L10_Characterize
msgid "**Du**: Wir hatten doch eben festgestellt, dass `f (E i i) = 1` gilt!\n"
"\n"
"**Robo**: Nachschlagen kann ich gut! Das war `one_on_diag_ebasis`."
msgstr ""

#: Game.Levels.Robotswana.L10_Characterize
msgid "**Robo**: Denk daran, unter einer Summe must du `simp_rw` verwenden,\n"
"`rw` kann das nicht.\n"
"\n"
"**Du**: Ah, und die expliziten Argumente `h₁` und `h₂` sollte ich wohl auch noch angeben?"
msgstr ""

#: Game.Levels.Robotswana.L10_Characterize
msgid "**Du** `_ * 1` ist `simp`, oder?"
msgstr ""

#: Game.Levels.Robotswana.L10_Characterize
msgid "**Robo**: Die beiden Seiten sind per Definition gleich!"
msgstr ""

#: Game.Levels.Robotswana.L10_Characterize
msgid "**Du**: Wo kommt denn dieses Beweisziel jetzt noch her?\n"
"\n"
"**Robo**: Ganz am Anfang bei `rw [eq_sum_apply_diag_ebasis]` hast du vermutlich dieses Argument\n"
"ausgelassen.  Jetzt kannst du es noch nachholen."
msgstr ""

#: Game.Levels.Robotswana.L10_Characterize
msgid "Nicht genau definiert als, aber per Definition äquivalent zu:\n"
"`trace A = ∑ i, A i i`.\n"
"\n"
"Mathlib benutzt den Term `diag A i` auf den wir hier nicht genauer eingehen."
msgstr ""

#: Game.Levels.Robotswana.L11_Linearity
msgid "Trace"
msgstr ""

#: Game.Levels.Robotswana.L11_Linearity
msgid "Als ihr mit etwas Abstand stehen bleibt, kommt Tracy auf euch zugelaufen und fängt an zu spielen. Belustigt gibt es euch verschiedenste\n"
"Aufgaben und Terme, und ihr versucht, diese schnell genug zu kombinieren."
msgstr ""

#: Game.Levels.Robotswana.L11_Linearity
msgid "Schließlich macht ihr euch auf den Rückweg.\n"
"Ihr verlauft euch sofort, aber Tracy ist euch offenbar gefolgt und führt euch quer durch\n"
"die Grasslandschaft zurück zu eurem Schiff."
msgstr ""

#: Game.Levels.Robotswana.L11_Linearity
msgid "**Du**: Da geht es gerade offensichtlich um Linearität der Spur von Matrizen."
msgstr ""

#: Game.Levels.Robotswana.L11_Linearity
msgid "**Robo**: Dieser letzte Schritt ist `Fintype.card_fin`. Das ginge auch alles\n"
"mit `simp` wenn wir nicht am spielen wären.\n"
"\n"
"**Du**: Ist doch egal, das macht Spass!"
msgstr ""

#: Game.Levels.Robotswana.L11_Linearity
msgid ""
msgstr ""

#: Game.Levels.Robotswana.L11_Linearity
msgid ""
msgstr ""

#: Game.Levels.Robotswana.L11_Linearity
msgid ""
msgstr ""

#: Game.Levels.Robotswana
msgid "Robotswana"
msgstr ""

#: Game.Levels.Robotswana
msgid "Ihr landet auf einem warmen Planeten, und tretet auf eine weite Graslandschaft hinaus.\n"
"\n"
"Nach etwas Umschauen entdeckt Robo Spuren, die von eurem Landeplatz wegführen, zwischen\n"
" vereinzelten Bäumen hindurch. Ihr beratet kurz und beschließt, den Spuren zu folgen."
msgstr ""

#: Game.Levels.End
msgid "Ende"
msgstr ""

#: Game.Levels.End
msgid "Das ist das Ende unserer Geschichte. Du fühlst dich gut ausgerüstet, dich mit den Formalosophen\n"
"zu unterhalten.\n"
"\n"
"Robo beschließt, dass du seien Hilfe nicht mehr benötigst. Euer Abenteuer hat ihn inspiriert,\n"
"er besteigt sein Raumschiff auf der Suche nach einem großen, ungelösten Theorem,\n"
"welches er gerne beweisen würde, und düst davon."
msgstr ""

#: Game.Levels.NewStuff.Prime.L01_Dvd
msgid "Teilbarkeit"
msgstr ""

#: Game.Levels.NewStuff.Prime.L01_Dvd
msgid "Ihr begenet einer Frau, die mit Vorschlaghammer und Schaufel anscheinend an einer Erweiterung\n"
"ihres Hauses baut. Im gespräch erzählt sie euch wie die Dornenwände gezüchtet wurden vor ihrer\n"
"Zeit, und über's Wetter und so.\n"
"\n"
"**Handwerkerin**: (*langer Monolog*) …, und dann gestern habe ich zwei Herren überhört,\n"
"wie sie an folgender Aufgabe gesessen sind, könnt ihr mir das erklären?"
msgstr ""

#: Game.Levels.NewStuff.Prime.L01_Dvd
msgid "**Robo**: `n ∣ m` bedeutet \"$n$ teilt $m$\", der senkrechte Strich ist allerdings\n"
"ein spezieller, den man mit `\\|` schreibt.\n"
"Definiert ist dieses Symbol als `∃ c, n = m * c`.\n"
"\n"
"**Du**: Dann kann ich direkt `obtain` und `use` verwenden, wie wenns ein `∃` wäre?\n"
"\n"
"**Robo**: Genau!"
msgstr ""

#: Game.Levels.NewStuff.Prime.L01_Dvd
msgid "**Robo**: Fang doch damit an, mit `obtain ⟨x ,hx⟩ := _`\n"
"alle Hyptothesen aufzuteilen."
msgstr ""

#: Game.Levels.NewStuff.Prime.L01_Dvd
msgid "**Robo**: Jetzt musst du mit `use _` eine Zahl angeben so dass\n"
"`«{n}» + «{k}» = «{m}» * _` gilt."
msgstr ""

#: Game.Levels.NewStuff.Prime.L01_Dvd
msgid "**Du**: Mit ein bisschen umschreiben kann man sicer `ring` verwenden."
msgstr ""

#: Game.Levels.NewStuff.Prime.L01_Dvd
msgid "(Warning: the unicode symbol `∣` (`\\\\dvd`) and the ASCII symbol `|` are not the same!\n"
"Use the former for dividing.)"
msgstr ""

#: Game.Levels.NewStuff.Prime.L02_Prime
msgid "Primzahlen"
msgstr ""

#: Game.Levels.NewStuff.Prime.L02_Prime
msgid "Als nächstes Begnet ihr einem Lehrer, der nachdenkend an der Sonne sitzt.\n"
"\n"
"**Lehrer**: Sagt mal, mich hat heute einer meiner Schüler was gefragt,\n"
"und ich glaube einfach, der ist in so jungen Jahren bereits schlauer als ich.\n"
"\n"
"Hier etwas Kontext:"
msgstr ""

#: Game.Levels.NewStuff.Prime.L02_Prime
msgid "**Du**: Die einzigen Teiler einer Primzahl sind `1` und `p`, ist das\n"
"nicht eine der möglichen Definitionen über `ℕ`?\n"
"\n"
"**Robo**: Doch, oder zumindest fast.\n"
"Du kannst du mit `rw` und `Nat.prime_def_lt''` eine der Definitionen für `Nat.Prime` einsetzen\n"
"\n"
"**Du** Könnte ich nicht einfach `unfold Nat.Prime` sagen um mir das anzuschauen.\n"
"\n"
"**Robo**: Bloss nicht. Das ist so eine Definition, in die du besser nicht hineinschaust!\n"
"`Nat.Prime p` ist als `Irreducible p` definiert, was wiederum anhand von Einheiten\n"
"definiert ist… Da verlieren wir uns in Definition die wir im Moment gar nicht brauchen."
msgstr ""

#: Game.Levels.NewStuff.Prime.L02_Prime
msgid "**Du**: Ich sehe, meine \"Definition\" hätte auch `1` als Primzahl deklariert. Gut,\n"
"dass wir das überprüft haben.\n"
"\n"
"**Lehrer**: Und jetzt kommen wir zu dem, was mir Kopfschmerzen bereitet."
msgstr ""

#: Game.Levels.NewStuff.Prime.L03_Prime
msgid "Primzahlen"
msgstr ""

#: Game.Levels.NewStuff.Prime.L03_Prime
msgid "Der Lehrer erklärt sein Problem.\n"
"\n"
"**Lehrer**: Und dann fragte der Schüler, wie man denn folgendes herleitet.\n"
"Und dabei ist das weit über seiner Altersstufe!"
msgstr ""

#: Game.Levels.NewStuff.Prime.L03_Prime
msgid "**Du**: Naja, mal schauen wie weit man mit `intro` und `constructor` kommt…"
msgstr ""

#: Game.Levels.NewStuff.Prime.L03_Prime
msgid "**Robo**: Stop! Hier helfe ich dir etwas"
msgstr ""

#: Game.Levels.NewStuff.Prime.L04_ExistsUnique
msgid "Existiert eindeutig"
msgstr ""

#: Game.Levels.NewStuff.Prime.L04_ExistsUnique
msgid "Hier lässt sich noch eine neue Notation einführen: `∃!` bedeutet\n"
"\"es existiert ein eindeutiges\" und ist definiert als"
msgstr ""

#: Game.Levels.NewStuff.Prime.L04_ExistsUnique
msgid "Zeige dass die einzige gerade Primzahl $2$ ist."
msgstr ""

#: Game.Levels.NewStuff.Prime.L05_MinFacPrime
msgid "Unendlich viele Primzahlen"
msgstr ""

#: Game.Levels.NewStuff.Prime.L05_MinFacPrime
msgid "**Irgendeine Person**: Ich bin auf der Suche nach der grössten Primzahl.\n"
"\n"
"**Du**: Dann viel Erfolg.\n"
"\n"
"**Person**: Wieso?\n"
"\n"
"**Du**: Na es gibt unendlich viele!\n"
"\n"
"**Person**: Wieso?\n"
"\n"
"**Du**: Lass uns mal mit folgendem anfangen: Für jede Zahl exisitiert eine Primzahl, die\n"
"grösser ist.\n"
"\n"
"**Person**: Welche denn?\n"
"\n"
"**Du** Entweder das Produkt aller Primfaktoren von $n$ plus Eins, oder $n! + 1$.\n"
"\n"
"**Robo**: Zu $n! + 1$ kann ich besser helfen, hier zum Beispiel:"
msgstr ""

#: Game.Levels.NewStuff.Prime.L05_MinFacPrime
msgid "**Person**: Die ist schon mal grösser als die grösste Zahl, die ich je angeschaut\n"
"habe!"
msgstr ""

#: Game.Levels.NewStuff.Prime.L05_MinFacPrime
msgid "Das ist mehrheitlich `minFac_prime`."
msgstr ""

#: Game.Levels.NewStuff.Prime.L05_MinFacPrime
msgid ""
msgstr ""

#: Game.Levels.NewStuff.Prime.L05_MinFacPrime
msgid ""
msgstr ""

#: Game.Levels.NewStuff.Prime.L05_MinFacPrime
msgid ""
msgstr ""

#: Game.Levels.NewStuff.Prime.L05_MinFacPrime
msgid "Der kleinste Primfaktor einer natürlichen Zahl."
msgstr ""

#: Game.Levels.NewStuff.Prime.L05_MinFacPrime
msgid "Eine Primzahl.\n"
"\n"
"Achtung: Lena kennt `Nat.Prime` (eine Primzahl) sowie `Prime` (ein Primelement)"
msgstr ""

#: Game.Levels.NewStuff.Prime.L05_MinFacPrime
msgid "`factorial n` oder `n !` ist das Produkt aller natürlichen Zahlen von `1` bis `n`."
msgstr ""

#: Game.Levels.NewStuff.Prime.L06_MinFacGE
msgid "Unendlich viele Primzahlen"
msgstr ""

#: Game.Levels.NewStuff.Prime.L06_MinFacGE
msgid "**Person**: Warte mal, ist die wirklich grösser als $n$?\n"
"\n"
"**Du**: Na klar!"
msgstr ""

#: Game.Levels.NewStuff.Prime.L06_MinFacGE
msgid "**Person**: Die ist schon mal grösser als die grösste Zahl, die ich je angeschaut\n"
"habe!"
msgstr ""

#: Game.Levels.NewStuff.Prime.L07_InfinitudePrimes
msgid "Unendlich viele Primzahlen"
msgstr ""

#: Game.Levels.NewStuff.Prime.L07_InfinitudePrimes
msgid ""
msgstr ""

#: Game.Levels.NewStuff.Prime.L07_InfinitudePrimes
msgid ""
msgstr ""

#: Game.Levels.NewStuff.Prime.L07_InfinitudePrimes
msgid "Zeige, dass es unendlich viele Primzahlen gibt"
msgstr ""

#: Game.Levels.NewStuff.Prime.L07_InfinitudePrimes
msgid "**Du**: `minFac (n ! + 1)` ist der kleinste Primfaktor von $n! + 1$"
msgstr ""

#: Game.Levels.NewStuff.Prime.L08_InfinitudePrimes
msgid "Unendlich viele Primzahlen"
msgstr ""

#: Game.Levels.NewStuff.Prime.L08_InfinitudePrimes
msgid ""
msgstr ""

#: Game.Levels.NewStuff.Prime.L08_InfinitudePrimes
msgid ""
msgstr ""

#: Game.Levels.NewStuff.Prime
msgid "Primzahlen"
msgstr ""

#: Game.Levels.NewStuff.Prime
msgid "Ihr schlendert durch die Befestigung ohne direktes Ziel. Und sprecht mit\n"
"verschiedenen Einwohnern."
msgstr ""

#: Game.Levels.Function.L01_Function
msgid "Anonyme Funktionen"
msgstr ""

#: Game.Levels.Function.L01_Function
msgid "Auf die Frage hin, ob sie von einer Bibliothek wisse, erzählt euch das kleine Mädchen,\n"
"dass es auf der Insel nur eine gäbe, aber sie bedrängt euch so mit einer Frage,\n"
"dass sie euch gar nicht sagt, wo dieser zu finden sei."
msgstr ""

#: Game.Levels.Function.L01_Function
msgid "**Robo**: `f : ℤ → ℤ` ist die Notation für eine Funktion und `f x` ist diese Funktion\n"
"angewendet auf ein Element `(x : ℤ)`.\n"
"\n"
"**Du**: War `→` nicht eben noch eine Implikation?\n"
"\n"
"**Robo**: Doch, die brauchen das gleiche Zeichen für beides.\n"
"\n"
"**Du**: Dann ist `f : ℤ → ℤ` also einfach abstrakt irgendeine Funktion,\n"
"wie definiere ich aber jetzt konkret eine Abbildungsvorschrift?\n"
"\n"
"**Robo**: Man kennt hier eine Notation für eine anonyme Funktion:\n"
"`fun (x : ℤ) ↦ x ^ 2` ist\n"
"\n"
"$$\n"
"\\begin{aligned}\n"
"f : \\mathbb{ℤ} &\\to \\mathbb{ℤ} \\\\\n"
"x &\\mapsto x ^ 2\n"
"\\end{aligned}\n"
"$$\n"
"\n"
"**Robo**: PS, `↦` ist `\\mapsto`. Aber man kann auch stattdessen `=>` benutzen."
msgstr ""

#: Game.Levels.Function.L01_Function
msgid "Das Mädchen wird kurz ruhig, dann beginnt es zu lächeln und zeigt strahlend\n"
"in eine Richtung. Ihr folgt ihrem Finger und euch fällt in weiter ferne eine pompöse Struktur\n"
"auf einem flachen Hügel auf."
msgstr ""

#: Game.Levels.Function.L02_Let
msgid "Anonyme Funktionen"
msgstr ""

#: Game.Levels.Function.L02_Let
msgid "Ihr macht euch auf in Richtung Bibliothek entlang kleiner Pfade zwischen verschiedensten Behausungen.\n"
"\n"
"**Du**: Sag mal, ich weiß jetzt dass ich eine Funktion als `fun x ↦ x + 1` definieren kann,\n"
"aber wie kann ich ihr einen Namen geben?\n"
"\n"
"**Robo**: Wenn jemand hier lokal eine Funktion definiert, werden die dir\n"
"`f : ℤ → ℤ := fun x ↦ x + 1; …` als Objekt mitgeben.\n"
"\n"
"**Robo**: Im Beweis hingegen, kannst du dir mit `let f := fun (x : ℤ) ↦ x + 1` selbst eine\n"
"temporäre Definition machen. Hier, probier mal:"
msgstr ""

#: Game.Levels.Function.L02_Let
msgid "**Robo**: Wie immer gehst du ein `∃` mit `use …` an."
msgstr ""

#: Game.Levels.Function.L02_Let
msgid "**Robo**: Wenn du `«{f}»` richtig definiert hast, kannst du\n"
"dieses mit `use` brauchen, und die resultierende Ungleichung sollte einfach sein"
msgstr ""

#: Game.Levels.Function.L02_Let
msgid "**Du**: Zu was sich das wohl vereinfacht?"
msgstr ""

#: Game.Levels.Function.L02_Let
msgid ""
msgstr ""

#: Game.Levels.Function.L03_Let
msgid "let"
msgstr ""

#: Game.Levels.Function.L03_Let
msgid "**Du**: Kannst du mir nochmals eine Aufgabe stellen, Robo?"
msgstr ""

#: Game.Levels.Function.L03_Let
msgid "**Du**: Ist `g ∘ «{f}»` Komposition von Funktionen?\n"
"\n"
"**Robo**: Richtig! Das schreibt man mit `\\comp`.\n"
"\n"
"**Du** Und hier könnte ich also wieder\n"
"`let g := fun (x : ℤ) ↦ _` definieren oder direkt\n"
"`use fun (x : ℤ) ↦ _`?\n"
"\n"
"**Robo**: Genau!"
msgstr ""

#: Game.Levels.Function.L03_Let
msgid "**Robo**: Jetzt kannst du diese mit `use «{g}»` benutzen."
msgstr ""

#: Game.Levels.Function.L03_Let
msgid "**Robo**: `(«{g}» ∘ «{f}») x` ist per Definition `«{g}» («{f}» x)`. `simp` kennt dieses\n"
"Lemma, aber du kannst es auch mit `rw [comp_apply]` direkt verwenden."
msgstr ""

#: Game.Levels.Function.L03_Let
msgid "**Robo**: `ring` sieht durch lokale Definitionen wie\n"
"`«{f}»` und `«{g}»` hindurch,\n"
"du kannst es also direkt benutzen."
msgstr ""

#: Game.Levels.Function.L03_Let
msgid "**Robo**: `(g ∘ «{f}») x` ist per Definition `g («{f}» x)`. `simp` kennt dieses\n"
"Lemma, aber du kannst es auch mit `rw [comp_apply]` direkt verwenden."
msgstr ""

#: Game.Levels.Function.L03_Let
msgid "**Robo**: `ring` sieht durch lokale Definitionen wie\n"
"`«{f}»` hindurch,\n"
"du kannst es also direkt benutzen."
msgstr ""

#: Game.Levels.Function.L03_Let
msgid "Sagt dass `(f ∘ g) x` das gleiche ist wie `f (g x)`."
msgstr ""

#: Game.Levels.Function.L03_Let
msgid "**Du**: Dann verstehst du etwas Mathe?\n"
"\n"
"**Robo**: Ich hatte ja keine Ahnung ob die generierte Aufgabe beweisbar ist… aber offenbar\n"
"hatte ich Glück.\n"
"\n"
"Und damit erreicht ihr den Hügel mit der Bibliothek."
msgstr ""

#: Game.Levels.Function.L04_Piecewise
msgid "Stückweise Definition"
msgstr ""

#: Game.Levels.Function.L04_Piecewise
msgid "Endlich kommt ihr zur Bibliothek. Komischerweise stehen an der Tür\n"
"zwei Wächtern. Der eine hat ein `f` auf seiner Brustplatte, der andere\n"
"ein `g` eingraviert. Dieser gibt dir ein Blatt mit einer langen Zeilen am oberen Ende."
msgstr ""

#: Game.Levels.Function.L04_Piecewise
msgid "**Robo**: Schau mal, die beiden haben zwei Funktionen, eine davon mit stückweiser Definition.\n"
"\n"
"**Du**: Also, ich soll zeigen, dass die beiden vertauschbar sind?\n"
"\n"
"**Robo**: Genau, am besten wählst du mit `funext x` ein beliebiges Element aus, und zeigst das\n"
"dann für dieses."
msgstr ""

#: Game.Levels.Function.L04_Piecewise
msgid "**Du**: Ah und jetzt kann ich erst einmal `(g ∘ f) «{x}»` zu `g (f «{x}»)` umschreiben?\n"
"\n"
"**Robo**: Mit `simp` klappt das."
msgstr ""

#: Game.Levels.Function.L04_Piecewise
msgid "**Robo**: Jetzt kannst du nämlich eine Fallunterscheidung\n"
"machen, `by_cases h : 0 ≤ «{x}»`.\n"
"\n"
"**Du**: Damit krieg ich die Fälle `0 ≤ «{x}»` und `0 > «{x}»`?\n"
"\n"
"**Robo**: Genau! Oder präziser `0 ≤ «{x}»` und `¬(0 ≤ «{x}»)`. Das ist nicht ganz das gleiche,\n"
"und man könnte mit dem Lemma `not_le` zwischen `¬(0 ≤ «{x}»)` und `0 > «{x}»` wechseln."
msgstr ""

#: Game.Levels.Function.L04_Piecewise
msgid "**Du**: Jetzt muss ich wohl doch mal die Definitionen brauchen.\n"
"\n"
"**Robo**: Dann brauch mal `simp [f, g]`!"
msgstr ""

#: Game.Levels.Function.L04_Piecewise
msgid "**Robo**: Jetzt hast du `rw [if_pos «{h}»]` zur Verfügung um das if-then-else zu\n"
"reduzieren."
msgstr ""

#: Game.Levels.Function.L04_Piecewise
msgid "**Robo**: Nochmals `simp [f, g]`."
msgstr ""

#: Game.Levels.Function.L04_Piecewise
msgid "**Du**: Ah und die Verneinung von `if_pos` ist sicher …"
msgstr ""

#: Game.Levels.Function.L04_Piecewise
msgid "**Robo**: `if_neg`, genau!"
msgstr ""

#: Game.Levels.Function.L04_Piecewise
msgid "Zufrieden tauschen die beiden Wächter ihren Platz und geben so dabei den\n"
"Durchgang frei."
msgstr ""

#: Game.Levels.Function.L04_Piecewise
msgid "Wenn `h : A` ein beweis der Aussage `A` ist, dann reduziert\n"
"`rw [if_pos h]` reduziert eine Aussage `if A then B else C` zu `B`.\n"
"\n"
"Umgekehrt kann man `if_neg` verwenden wenn `h : ¬ A`."
msgstr ""

#: Game.Levels.Function.L04_Piecewise
msgid "Wenn `h : ¬ A` ein Beweis ist, dass Aussage `A` falsch ist, dann reduziert\n"
"`rw [if_neg h]` eine Aussage `if A then B else C` zu `C`.\n"
"\n"
"Umgekehrt kann man `if_pos` verwenden wenn `h : A`."
msgstr ""

#: Game.Levels.Function.L05_Extend
msgid "Choosing an arbitrary element of a nonempty type."
msgstr ""

#: Game.Levels.Function.L05_Extend
msgid ""
msgstr ""

#: Game.Levels.Function.L05_Extend
msgid "`Classical.arbitrary «{A}»` ist ein beliebiges Element in `«{A}»`,\n"
"`n.toNat` ist entweder die Ganzahl als natürliche Zahl gesehen oder `0` für negative Ganzzahlen.\n"
"\n"
"Versuch erst mal, die richtige Funktion zu definieren: `let f : ℤ → A :=` usw."
msgstr ""

#: Game.Levels.Function.L06_Extend
msgid "Choosing an arbitrary element of a nonempty type."
msgstr ""

#: Game.Levels.Function.L06_Extend
msgid ""
msgstr ""

#: Game.Levels.Function.L07_Funext
msgid ""
msgstr ""

#: Game.Levels.Function.L07_Funext
msgid ""
msgstr ""

#: Game.Levels.Function.L07_Funext
msgid ""
msgstr ""

#: Game.Levels.Function.L08_CongrArg
msgid ""
msgstr ""

#: Game.Levels.Function.L08_CongrArg
msgid ""
msgstr ""

#: Game.Levels.Function.L08_CongrArg
msgid ""
msgstr ""

#: Game.Levels.Function.L08_CongrArg
msgid ""
msgstr ""

#: Game.Levels.Function.L09_CongrFun
msgid ""
msgstr ""

#: Game.Levels.Function.L09_CongrFun
msgid ""
msgstr ""

#: Game.Levels.Function.L09_CongrFun
msgid "`apply congr_fun at «{h}»` ändert `«{h}» : «{f}» = «{g}»` zu\n"
"`«{h}» : ∀ x, «{f}» x = «{g}» x`."
msgstr ""

#: Game.Levels.Function.L09_CongrFun
msgid ""
msgstr ""

#: Game.Levels.Function.L09_CongrFun
msgid ""
msgstr ""

#: Game.Levels.Function.L10_Surjective
msgid "A function which semiconjugates an endofunction to the\n"
"successor function is surjective."
msgstr ""

#: Game.Levels.Function.L10_Surjective
msgid ""
msgstr ""

#: Game.Levels.Function.L10_Surjective
msgid "Induktion über `«{n}»`"
msgstr ""

#: Game.Levels.Function.L10_Surjective
msgid "**Robo**: Siehst du die Annahme `«{hs}» : f ∘ g = succ ∘ f`?\n"
"\n"
"**Du**: Ja.\n"
"\n"
"**Robo**: Um eine Gleichheit von Funktionen zu verwenden, willst du\n"
"oft `apply congr_fun at «{hs}»` sagen! Das wandelt die Gleichung\n"
"`f₁ = f₂` in `∀ x, f₁ x = f₂ x` um."
msgstr ""

#: Game.Levels.Function
msgid "Funktionen"
msgstr ""

#: Game.Levels.Function
msgid "Auf der Suche nach dem Buch der Urbilder landet ihr auf einem kleinen Mond, der bis auf\n"
"eine Insel komplett mit Wasser bedeckt zu sein scheint.\n"
"\n"
"Auf der Insel seht ihr verschiedene große und kleine Behausungen, manche aus Stroh und Holz,\n"
"vereinzelte aus Lehm.\n"
"\n"
"Planlos geht ihr zum ersten Haus bei dem jemand vorne außen sitzt."
msgstr ""

#: Game.Levels.FunctionSurj.L01_Surjective
msgid "Surjektive"
msgstr ""

#: Game.Levels.FunctionSurj.L01_Surjective
msgid "Endlich kommt ihr in einen große, beleuchteten zentralen Raum.\n"
"Alle Wände sind voll mit Büchern und\n"
"in der Mitte sitzt an einem einsamen\n"
"Tisch ein Gelehrter, der tatsächlich das gesuchte Buch zeigen kann.\n"
"\n"
"Bevor er dieses aushändigt, will er aber folgendes wissen:"
msgstr ""

#: Game.Levels.FunctionSurj.L01_Surjective
msgid "**Robo**: Die Definition von `Surjective f` ist `∀ y, (∃ x, f x = y)`.\n"
"\n"
"**Du**: Dann kann ich das auch einfach wie Quantifier behandeln?\n"
"\n"
"**Robo**: Schieß drauf los!"
msgstr ""

#: Game.Levels.FunctionSurj.L01_Surjective
msgid "**Du**: das is doch eigentlich ganz einfach… Kann man das denn\n"
"noch weiter vereinfachen?\n"
"\n"
"**Robo**: Wenn du `«{f}»` auch einsetzt vermutlich schon."
msgstr ""

#: Game.Levels.FunctionSurj.L01_Surjective
msgid "Der Gelehrte händigt euch schmunzelnd das Buch aus."
msgstr ""

#: Game.Levels.FunctionSurj.L02_CurrySurjective
msgid "Not exhausted by naturals."
msgstr ""

#: Game.Levels.FunctionSurj.L02_CurrySurjective
msgid ""
msgstr ""

#: Game.Levels.FunctionSurj.L03_LeftInverse
msgid "Left inverse"
msgstr ""

#: Game.Levels.FunctionSurj.L03_LeftInverse
msgid "A function `g : B → A` is a left inverse of a function `f : A → B` if for all `a : A`,\n"
"`g (f a) = a`."
msgstr ""

#: Game.Levels.FunctionSurj.L03_LeftInverse
msgid "Actually, in Lean, we have `RightInverse g f = LeftInverse f g` by definition."
msgstr ""

#: Game.Levels.FunctionSurj.L04_RightInverse
msgid "Right inverse"
msgstr ""

#: Game.Levels.FunctionSurj.L04_RightInverse
msgid ""
msgstr ""

#: Game.Levels.FunctionSurj.L04_RightInverse
msgid ""
msgstr ""

#: Game.Levels.FunctionSurj.L05_RightInverse
msgid "Does it have a right inverse?"
msgstr ""

#: Game.Levels.FunctionSurj.L05_RightInverse
msgid "We say `f : A → B` has a right inverse if there exists a function `g : B → A` such that `f ∘ g = id`."
msgstr ""

#: Game.Levels.FunctionSurj.L06_choose
msgid "Every function with nonempty fibres has a right inverse."
msgstr ""

#: Game.Levels.FunctionSurj.L06_choose
msgid "The preimage of set `S` under a function `f`, denoted by `f ⁻¹' S` is the set of all elements\n"
"`x` in the domain of `f` such that `f x` is in `S`.\n"
"\n"
"```\n"
"f ⁻¹' S = {x | f x ∈ S}\n"
"```\n"
"\n"
"We call the preimage `f ⁻¹' { b }` of the singleton `{ b }` the fiber of `b`."
msgstr ""

#: Game.Levels.FunctionSurj.L06_choose
msgid "Since we know that for each `b : B`, the fiber is nonempty, we can choose some element of that fibre using the axiom of choice.\n"
"The tactic `choose g hg using nonempty_fibre` creates a function which chooses an `a : A` and `hg` witnesses that `a` is in the fiber of `b`."
msgstr ""

#: Game.Levels.FunctionSurj.L07_SurjectiveRightInverse
msgid "Every surjection has a right inverse"
msgstr ""

#: Game.Levels.FunctionSurj.L07_SurjectiveRightInverse
msgid "The preimage of set `S` under a function `f`, denoted by `f ⁻¹' S` is the set of all elements\n"
"`x` in the domain of `f` such that `f x` is in `S`.\n"
"\n"
"```\n"
"f ⁻¹' S = {x | f x ∈ S}\n"
"```\n"
"\n"
"`HasRightInverse.surjective`"
msgstr ""

#: Game.Levels.FunctionSurj
msgid "Surjektivität"
msgstr ""

#: Game.Levels.FunctionSurj
msgid ""
msgstr ""

#: Game.Levels.FunctionInj.L01_Injective
msgid "Injektivität"
msgstr ""

#: Game.Levels.FunctionInj.L01_Injective
msgid "Ihr läuft durch verschiedenste Gänge der Bibliothek, allesamt mit Büchern entlang der Wände.\n"
"\n"
"**Du**: Wenn wir wüssten, dass nur ein möglicher Weg hierhin führt, könnten wir\n"
"ausschliessen, dass wir im Kreis laufen.\n"
"\n"
"Plötzlich begegnet ihr einem älteren Wesen mit Fackel. Auf die Frage antwortet es mit folgendem:"
msgstr ""

#: Game.Levels.FunctionInj.L01_Injective
msgid "**Robo**: `Injective` ist als `∀ {a b : U}, f a = f b → a = b`\n"
"definiert, also kannst du mit `intro` anfangen.\n"
"\n"
"**Du**: Und wenn ich das nicht weiss?\n"
"\n"
"**Robo**: Dann schaust du mit `unfold Injective` in die Definition rein."
msgstr ""

#: Game.Levels.FunctionInj.L01_Injective
msgid "**Du**: Jetzt will ich wohl mit der Definition von `«{f}»` die\n"
"Annahme `«{ha}»` vereinfachen."
msgstr ""

#: Game.Levels.FunctionInj.L01_Injective
msgid "**Du** Woa das war ja einfach!"
msgstr ""

#: Game.Levels.FunctionInj.L02_New
msgid "Preimage of surjective is injective"
msgstr ""

#: Game.Levels.FunctionInj.L02_New
msgid ""
msgstr ""

#: Game.Levels.FunctionInj.L03_Injective
msgid "Nicht Injektiv"
msgstr ""

#: Game.Levels.FunctionInj.L03_Injective
msgid "Weiterirrend kommt ihr an eine Verzweigung.\n"
"\n"
"**Robo**: Sieht beides gleich aus.\n"
"\n"
"Ein paar Schritte in den linken Korridor hinein seht ihr auf dem Boden ein Blatt mit Gekritzel.\n"
"\n"
"\n"
"**Du**: Hier haben wir wieder eine stückweise Funktion\n"
"\n"
"$$\n"
"f(n) = \\begin{cases}\n"
"    n^2 & \\text{falls } n \\text{ gerade} \\\\\n"
"    n+1 & \\text{andernfalls.}\n"
"\\end{cases}\n"
"$$\n"
"\n"
"Darunter steht in leicht leuchtender Schrift:"
msgstr ""

#: Game.Levels.FunctionInj.L03_Injective
msgid "**Robo**: Das ist sicher ein Hinweis.\n"
"\n"
"**Du**: Aber `¬ Injective` sagt mir nichts…\n"
"\n"
"**Robo**: Könntest du etwas mit `¬ ∀` anfangen? Dann könntest du ja `Injektive` zuerst öffnen.\n"
"\n"
"**Du**: Darüber haben wir doch mal was gelernt…"
msgstr ""

#: Game.Levels.FunctionInj.L03_Injective
msgid "**Robo**: Das war `push_neg`."
msgstr ""

#: Game.Levels.FunctionInj.L03_Injective
msgid "**Robo**: Das war `push_neg`."
msgstr ""

#: Game.Levels.FunctionInj.L03_Injective
msgid "**Du** Jetzt muss ich einfach ein Gegenbeispiel nennen, oder?\n"
"\n"
"**Robo** Genau! Welche beiden Zahlen möchtest du denn verwenden?"
msgstr ""

#: Game.Levels.FunctionInj.L03_Injective
msgid "Als ihr das Problem gelöst habt, erschleicht euch ein starkes\n"
"Gefühl, dass dies der falsche Weg ist.\n"
"Also geht ihr zurück und nehmt die rechte Gabelung."
msgstr ""

#: Game.Levels.FunctionInj.L04_Diagonal
msgid "Diagonal"
msgstr ""

#: Game.Levels.FunctionInj.L04_Diagonal
msgid "In this level, you will prove that the the diagonal function is injective."
msgstr ""

#: Game.Levels.FunctionInj.L05_Injective
msgid "Monotone Funktionen"
msgstr ""

#: Game.Levels.FunctionInj.L05_Injective
msgid "Sofort hakt die ältere Gestalt nach:"
msgstr ""

#: Game.Levels.FunctionInj.L05_Injective
msgid "**Du**: Hmm, das ist etwas schwieriger…\n"
"\n"
"**Robo**: Aber ich hab einen Trick auf Lager:\n"
"Das Lemma `StrictMono.injective` sagt, dass jede strikt monotone Funktion injektive ist,\n"
"und ich habe das Gefühl Monotonie ist hier einfacher zu zeigen."
msgstr ""

#: Game.Levels.FunctionInj.L05_Injective
msgid "**Robo**: `apply` ist wonach du suchst."
msgstr ""

#: Game.Levels.FunctionInj.L05_Injective
msgid "**Robo**: Ich glaube, dieser Weg ist zu steinig. Fang doch nochmals von vorne an!"
msgstr ""

#: Game.Levels.FunctionInj.L05_Injective
msgid "**Robo**: Ich glaube, dieser Weg ist zu steinig. Fang doch nochmals von vorne an!"
msgstr ""

#: Game.Levels.FunctionInj.L05_Injective
msgid "**Du**: Jetzt möchte ich strikte Monotonie von `n ^ 3` und `n + 3` separat zeigen,\n"
"schliesslich scheint es mir als wär das zweite wieder einfach.\n"
"\n"
"**Robo**: Dafür hab ich `StrictMono.add` bereit!"
msgstr ""

#: Game.Levels.FunctionInj.L05_Injective
msgid "**Du**: Hmm, darauf hab ich jetzt wenig Lust. Gibt's dafür auch was? Das gilt ja nur\n"
"wenn der Exponent ungerade ist.\n"
"\n"
"**Robo**: Du könntest mal `Odd.strictMono_pow` versuchen…"
msgstr ""

#: Game.Levels.FunctionInj.L05_Injective
msgid "**Du**: Ist das nicht ne Trivialität? Warte mal!"
msgstr ""

#: Game.Levels.FunctionInj.L05_Injective
msgid "**Du**: Ha! Und dieser Teil funktioniert sicher gleich wie Injektivität vorhin!"
msgstr ""

#: Game.Levels.FunctionInj.L05_Injective
msgid "**Du**: oder …?\n"
"\n"
"**Robo**: Doch, doch. Schau mal mit `unfold` hinein in die Definition."
msgstr ""

#: Game.Levels.FunctionInj.L05_Injective
msgid "Dieses Lemma sagt `StrictMono f → Injective f`."
msgstr ""

#: Game.Levels.FunctionInj.L05_Injective
msgid "Für ungerades `n` is `x ↦ x ^ n` strikt monoton.\n"
"\n"
"*Bemerkung*: Das Lemma ist im namespace `Odd`, damit man `hn.strictMono_pow` für den\n"
"Beweis `hn : Odd n` schreiben könnte."
msgstr ""

#: Game.Levels.FunctionInj.L05_Injective
msgid "Wenn `f,g` beide strikt monoton sind, dann ist es `f + g` auch."
msgstr ""

#: Game.Levels.FunctionInj.L05_Injective
msgid "**Du**: Danke vielmals!\n"
"\n"
"Und damit lässt das Wesen mitten im Gang stehen, wo es weiter über Injektivität nachdenkt."
msgstr ""

#: Game.Levels.FunctionInj.L06_Injective
msgid "Monotone Funktionen"
msgstr ""

#: Game.Levels.FunctionInj.L06_Injective
msgid ""
msgstr ""

#: Game.Levels.FunctionInj.L07_SuccHasLeftInv
msgid "Left Inverse"
msgstr ""

#: Game.Levels.FunctionInj.L07_SuccHasLeftInv
msgid "In this level, you will prove that the successor function on the natural numbers has a left inverse."
msgstr ""

#: Game.Levels.FunctionInj.L08_RightInvOfLeftInv
msgid "Injections with nonempty domain have retract."
msgstr ""

#: Game.Levels.FunctionInj.L08_RightInvOfLeftInv
msgid ""
msgstr ""

#: Game.Levels.FunctionInj.L09_InjOfHasLeftInv
msgid "Functions with left inverses are injective."
msgstr ""

#: Game.Levels.FunctionInj.L09_InjOfHasLeftInv
msgid "In this level you show that a function which has a left inverse is injective."
msgstr ""

#: Game.Levels.FunctionInj.L10_InjHasLeftInv
msgid "Injections have a left inverse, and vice versa"
msgstr ""

#: Game.Levels.FunctionInj.L10_InjHasLeftInv
msgid ""
msgstr ""

#: Game.Levels.FunctionInj
msgid "Injektivität"
msgstr ""

#: Game.Levels.FunctionInj
msgid "Auf der Suche nach dem Buch der Urbilder landet ihr auf einem kleinen Mond, der bis auf\n"
"eine Insel komplett mit Wasser bedeckt zu sein scheint.\n"
"\n"
"Auf der Insel seht ihr verschiedene große und kleine Behausungen, manche aus Stroh und Holz,\n"
"vereinzelte aus Lehm.\n"
"\n"
"Planlos geht ihr zum ersten Haus bei dem jemand vorne außen sitzt."
msgstr ""

#: Game.Levels.FunctionImage.L01_ImagePreimage
msgid "Bild/Urbild"
msgstr ""

#: Game.Levels.FunctionImage.L01_ImagePreimage
msgid "`f '' S` ist das Bild,\n"
"`f ⁻¹' V` das Urbild,\n"
"\n"
"`f '' S := {f a | a ∈ S}`\n"
"`f ⁻¹' V := {a | f a ∈ V}`"
msgstr ""

#: Game.Levels.FunctionImage.L01_ImagePreimage
msgid ""
msgstr ""

#: Game.Levels.FunctionImage.L02_Image
msgid "Bild/Urbild"
msgstr ""

#: Game.Levels.FunctionImage.L02_Image
msgid "unangewendetes image/preimage als Funktion"
msgstr ""

#: Game.Levels.FunctionImage.L03_SurjectiveRange
msgid "Range of Surjection"
msgstr ""

#: Game.Levels.FunctionImage.L03_SurjectiveRange
msgid "The range of a function is the set of all outputs.\n"
"\n"
"In this level you show that a function is surjective if and only if the range of\n"
"the function is equal to the universal subset of the codomain. For `f : A → B`,\n"
"the range of `f` is defined as\n"
"\n"
"```\n"
"range f : Set B := {b | ∃ a, f a = b}\n"
"```"
msgstr ""

#: Game.Levels.FunctionImage.L03_SurjectiveRange
msgid "**Du**: Wie zeigt man denn schon wieder Gleichheit von Mengen?"
msgstr ""

#: Game.Levels.FunctionImage.L03_SurjectiveRange
msgid "**Robo**: Ich habe ein relevantes Resultat gefunden: `mem_range`.\n"
"Such das mal in denem Inventar!"
msgstr ""

#: Game.Levels.FunctionImage.L04_ImagePreimage
msgid ""
msgstr ""

#: Game.Levels.FunctionImage.L05_InjectiveFibre
msgid "Range of Injective"
msgstr ""

#: Game.Levels.FunctionImage.L05_InjectiveFibre
msgid "For an injective function `f : A → B` the fibres of the elements in the range\n"
"are singletons."
msgstr ""

#: Game.Levels.FunctionImage.L06
msgid "Preimage of surjective is injective"
msgstr ""

#: Game.Levels.FunctionImage.L06
msgid ""
msgstr ""

#: Game.Levels.FunctionImage.L07_LeftInvPreimage
msgid "Preimage of the inverse"
msgstr ""

#: Game.Levels.FunctionImage.L07_LeftInvPreimage
msgid "The image of a set `S : Set A` along a  function `f : A → B` is the set of all elements\n"
"`b : B` that are the image of some element `a : A` in `S`. We denote it by `f '' S` and\n"
"define it as below.\n"
"```\n"
"f '' S = {b : B | ∃ a : A, a ∈ S ∧ f a = b}\n"
"```\n"
"\n"
"Note that an element of the image is a triple `⟨b, a, h⟩` where `b` is the image of `a` and `h`\n"
"is the proof that `a` is in `S` and `f a = b`.\n"
"\n"
"The image of function with a left in\n"
"verse is a subset of the preimage of the inverse of\n"
"the same subset."
msgstr ""

#: Game.Levels.FunctionImage.L08_Preimage_Injective
msgid "Preimage of surjective is injective"
msgstr ""

#: Game.Levels.FunctionImage.L08_Preimage_Injective
msgid "Given a function `f : A → B` we obtain a function `preimage f : Set B → Set A`\n"
"by taking the preimage of sets of `B`. Recall that\n"
"```\n"
"preimage f S = f ⁻¹' S = {a | f a ∈ S}\n"
"```\n"
"\n"
"Show that `preimage f` is injective iff f is surjective."
msgstr ""

#: Game.Levels.FunctionImage
msgid "Image/Preimage"
msgstr ""

#: Game.Levels.FunctionBij.L01_Bijective
msgid "Bijektivität"
msgstr ""

#: Game.Levels.FunctionBij.L01_Bijective
msgid "**Du**: Ehm, und wie kommen wir da wieder raus?\n"
"\n"
"**Gelehrter**: Gerne zeige ich euch den Weg, nachdem ihr mir auch noch folgendes erklärt:"
msgstr ""

#: Game.Levels.FunctionBij.L01_Bijective
msgid "**Robo** *(flüsternd)*: `Bijectve f` ist als `Injective f ∧ Surjective f` definiert.\n"
"\n"
"**Du**: Dann ist das ja ganz simpel!"
msgstr ""

#: Game.Levels.FunctionBij.L01_Bijective
msgid "Zufrieden drückt euch der Gelehrte eine neue Fackel in die Hand und\n"
"zeigt euch den Weg nach draußen."
msgstr ""

#: Game.Levels.FunctionBij.L02_Inverse
msgid "Inverse"
msgstr ""

#: Game.Levels.FunctionBij.L02_Inverse
msgid "Eigentlich hast du nur beiläufig Robo gefragt, ob bijektiv nicht auch bedeute, dass\n"
"eine Inverse Funktion existiere. Jetzt steht ihr aber schon seit einer halben Stunde rum\n"
"und der Gelehrte möchte wissen, wie das den genau ginge.\n"
"\n"
"Offensichtlich kennt er diese Aussage als `Function.bijective_iff_has_inverse` aus seinen Büchern,\n"
"aber er möchte, dass du ihm das hier und jetzt nochmals von Grund auf zeigst."
msgstr ""

#: Game.Levels.FunctionBij.L02_Inverse
msgid "**Robo**: Tipp. Teil doch `Bijective` mit `obtain ⟨hinj, hsurj⟩  := «{h}»` in\n"
"`Injective` und `Surjective` auf!"
msgstr ""

#: Game.Levels.FunctionBij.L02_Inverse
msgid "**Du**: Ja was ist eigentlich die Inverse von `«{f}»`…?\n"
"\n"
"**Robo**: Hast du eine Idee?\n"
"\n"
"**Du**: Also von der Surjektivität weiss ich, dass für alle `y : B` ein Urbild `x : A` existiert.\n"
"\n"
"**Robo**: Mit `choose g hg using «{fsurj}» ` kannst du eine Funktion\n"
"definieren, die `y` irgendein Urbild zuweist."
msgstr ""

#: Game.Levels.FunctionBij.L02_Inverse
msgid "Zeig erst einmal dass `«{g}»` ein Rechtsinverses von `«{f}»` ist,\n"
"also zum Beispiel `have hR : RightInverse «{g}» «{f}»`"
msgstr ""

#: Game.Levels.FunctionBij.L02_Inverse
msgid "**Robo**: Mit `dsimp` kannst du es ja etwas vereinfachen."
msgstr ""

#: Game.Levels.FunctionBij.L02_Inverse
msgid "**Robo**: fang mal mit `intro` an."
msgstr ""

#: Game.Levels.FunctionBij.L02_Inverse
msgid "**Robo**: Zerlege `«{h}»` noch soweit du kannst!"
msgstr ""

#: Game.Levels.FunctionBij.L02_Inverse
msgid "**Robo**: Das UND auch noch!"
msgstr ""

#: Game.Levels.FunctionBij.L02_Inverse
msgid "**Robo**: Injektivität ist der schwierige Teil. Fang mal an mit `intro`."
msgstr ""

#: Game.Levels.FunctionBij.L02_Inverse
msgid "**Du**: Wenn die Argumente `f a = f b` gleich sind, ist dann auch `g (f a) = g (f b)`,\n"
"wie sag ich das?\n"
"\n"
"**Robo**: Also wenn du `f a = f b` hast, kannst du ja auch einfach damit umschreiben."
msgstr ""

#: Game.Levels.FunctionBij.L02_Inverse
msgid "**Robo**: Du kannst die `RightInverse`-Annahme einfach mit `rw`\n"
"benutzen."
msgstr ""

#: Game.Levels.FunctionBij.L02_Inverse
msgid "Endlich entkommt ihr der Bibliothek.\n"
"\n"
"**Robo**: Da würden mich keine zehn Pferde nochmals hineinbringen!\n"
"\n"
"**Du**: Von wegen Pferden, wie viele PS hat eigentlich unser Raumschiff?"
msgstr ""

#: Game.Levels.FunctionBij
msgid "Bijektivität"
msgstr ""

#: Game.Levels.FunctionBij
msgid "Auf der Suche nach dem Buch der Urbilder landet ihr auf einem kleinen Mond, der bis auf\n"
"eine Insel komplett mit Wasser bedeckt zu sein scheint.\n"
"\n"
"Auf der Insel seht ihr verschiedene große und kleine Behausungen, manche aus Stroh und Holz,\n"
"vereinzelte aus Lehm.\n"
"\n"
"Planlos geht ihr zum ersten Haus bei dem jemand vorne außen sitzt."
msgstr ""

#: Game
msgid "Robo"
msgstr ""

#: Game
msgid "# Game Over oder QED?\n"
"\n"
"Willkommen zu unserem Prototyp eines Lean4-Lernspiels. Hier lernst du computer-gestützte\n"
"Beweisführung. Das Interface ist etwas vereinfacht, aber wenn du den *Editor Mode* aktivierst, fühlt es sich\n"
"fast genauso an wie in VSCode, der Standard-IDE für Lean.\n"
"\n"
"Rechts siehst du eine Übersicht. Das Spiel besteht aus mehreren Planeten, und jeder Planet hat mehrere Levels,\n"
"die in Form von grauen Punkten dargestellt sind. Gelöste Levels werden grün.\n"
"\n"
"Klicke auf den ersten Planeten *Logo*, um deine Reise zu starten.\n"
"\n"
"\n"
"### More\n"
"Schau im Menü unter \"Game Info\" für mehr Informationen zum Spiel."
msgstr ""

#: Game
msgid "## Spielstand\n"
"\n"
"Dein Spielstand wird lokal in deinem Browser als *site data* gespeichert.\n"
"Solltest du diese löschen, verlierst du deinen Spielstand!\n"
"Viele Browser löschen *site data* und *cookies* zusammen.\n"
"Wenn du \"Game rules: lax\" auswählst kannst aber jederzeit jedes Level spielen,\n"
"auch wenn du vorhergende Levels noch nicht gelöst hast.\n"
"\n"
"## Funding\n"
"\n"
"Dieses Lernspiel wurde und wird im Rahmen des Projekts\n"
"[ADAM: Anticipating the Digital Age of Mathematics](https://hhu-adam.github.io/)\n"
"an der Heinrich-Heine-Universität Düsseldorf entwickelt.\n"
"Es wird finanziert durch das Programm *Freiraum 2022* der\n"
"*Stiftung Innovation in der Hochschullehre*.\n"
"\n"
"## Credits\n"
"\n"
"* **Creators:** Jon Eugster, Alexander Bentkamp, Marcus Zibrowius, Sina Hazratpour\n"
"* **Game Engine:** Alexander Bentkamp, Jon Eugster, Patrick Massot\n"
"* **Illustrationen:** Dušan Pavlić\n"
"\n"
"## Kontakt\n"
"\n"
"Das Spiel befindet sich noch in der Entwicklung.\n"
"Wenn du Anregungen hast oder Bugs findest, schreib doch ein Email oder erstelle einen\n"
"Issue auf Github:\n"
"\n"
"* zum Spielinhalt im [Robo repo](https://github.com/hhu-adam/Robo/issues).\n"
"* zum Spielserver im [lean4game repo](https://github.com/leanprover-community/lean4game/issues).\n"
"\n"
"Kontakt: [Jon Eugster](https://www.math.hhu.de/lehrstuehle-/-personen-/-ansprechpartner/innen/lehrstuehle-des-mathematischen-instituts/lehrstuhl-fuer-algebraische-geometrie/team/jon-eugster)"
msgstr ""

#: Game
msgid "Fertig!"
msgstr ""

#: Game
msgid "Erkunde das Leansche Universum mit deinem Robo, welcher dir bei der Verständigung mit den Formalosophen zur Seite steht."
msgstr ""

#: Game
msgid "Dieses Spiel führt die Grundlagen zur Beweisführung in Lean ein und schneidet danach verschiedene Bereiche des Bachelorstudiums an.\n"
"\n"
"(Das Spiel befindet sich noch in der Entstehungsphase.)"
msgstr ""
